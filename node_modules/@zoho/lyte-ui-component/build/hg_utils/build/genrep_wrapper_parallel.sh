main()
{
	ST_TIME=`date +%b_%d_%Y@%T`
	if [ ! -d "${HOME}/REPOSITORY" ]
	then
		mkdir -p ${HOME}/REPOSITORY
	fi
	source ${HOME}/downloads/.env.conf
	setVariables $*
	buildReports_common_checkout
	if [ "$5" = "true" ]
	then
		doRequiredCheckout
		##copyBinaries
		updateReportsConf
		doReportFileCheckout
	fi
	if [ "$7" = "YES" ]
	then
		doReportFileCheckout
	fi
	callMainMethod $*
	postprocess $*
	ET_TIME=`date +%b_%d_%Y@%T`
	time_cal "Total time duration for ${PRODUCT_NAME} report generation" "${ST_TIME}" "${ET_TIME}" "$5"
}
setVariables()
{
	if [ "$5" = "true" ]
	then
		RAND_DIR=`pwd`
	else
		RAND_DIR="$6"
	fi
	cd ${RAND_DIR}
	PRODUCT_NAME=$1
	PRD_DETAILS_FILE=${RAND_DIR}/${PRODUCT_NAME}.txt
	echo "REPORTS_STARTED=\"`date "+%Y-%m-%d %T"`\"" >> ${PRD_DETAILS_FILE}
	. ${PRD_DETAILS_FILE}
	if [ "$5" = "true" ]
	then
		SHARED_SRC_DIR="${HOME}/REPOSITORY"
		RAND_SRC_DIR=${RAND_DIR}/SRC
		RAND_MOD_DIR=${RAND_SRC_DIR}/${MODULE}
		REPORTS_REPO_DIR="${RAND_DIR}/utility_packages"
		PYFILE_DIR="$RAND_DIR"
		SOURCES_DIR="${HOME}/REPOSITORY"
		sed -i 's@WH_DIR@REPORTS@g'  ${PYFILE_DIR}/clonehook.py
                sed -i "s@${PRODUCT_NAME}/@@g" ${PYFILE_DIR}/clonehook.py
	else
		RAND_SRC_DIR=${HOME}/REPOSITORY
		RAND_MOD_DIR=${RAND_DIR}/${MODULE}
		REPORTS_REPO_DIR="${RAND_DIR}/utility_packages"
		PYFILE_DIR="$RAND_DIR/hg_utils/build/"
		SOURCES_DIR="$RAND_SRC_DIR"
	fi
	CHECKOUT_CMD=`echo ${CO_CMD} | tr "," " "`
	TP_MOD="components"
	TP_CLONE_PATH="cmsuite.csez.zohocorpin.com/integ/"
	PREV_ZIPNAME=`echo ${PREV_ZIP} | awk -F "/" '{ print $NF }'`
	CUR_ZIPNAME=`echo ${CUR_ZIP} | awk -F "/" '{ print $NF }'`
	MS_ZIPNAME=`echo ${MS_ZIP} | awk -F "/" '{ print $NF }'`
	##JAVAHOME="/usr/java/jdk1.8.0_112"
	#JAVAHOME="/usr/java/zulujdk8.0_202"
	#ANT_HOME="/usr/ant/apache-ant-1.8.1"
        JAVAHOME=/zoho/build/downloads/java/zulujdk8.0_202/
        ANT_HOME=/zoho/build/downloads/ant/apache-ant-1.8.2/

	NODE_PATH="/etc/ansible_downloads/nvm/v0.10.28"
	CONTAINER_NAME="${PRODUCT_NAME}_${WH_BUILD_ID}_REP"
	if [ "${ARG}" = "HEAD" -o "${ARG}" = "default" -o "${ARG}" = "master" ]
	then
		P_DIR=`echo ${P_LBL} | sed "s@${PRODUCT_NAME}_@@g"`
		C_DIR=`echo ${C_LBL} | sed "s@${PRODUCT_NAME}_@@g"`
	else
		P_DIR=`echo ${P_LBL} | sed "s@${ARG}_@@g"`
		C_DIR=`echo ${C_LBL} | sed "s@${ARG}_@@g"`
	fi
	M_TMP=`echo ${MS_ZIP##*/}`
	##M_DIR=`echo ${MS_ZIP} | sed "s@/${M_TMP}@@g"`
	M_DIR=`echo ${LATEST_MILESTONE_URL}`
	REP_MCNAME=`echo ${CHECKOUT_CMD} | cut -d " " -f4`
	REP_USERNAME=`echo ${CHECKOUT_CMD} | cut -d " " -f5`
	REP_PASSWORD=`echo ${CHECKOUT_CMD} | cut -d " " -f6`
	WH_UNAME=$2
	WH_MCNAME=$3
	CONF_FNAME=`echo ${CONF_FILE_PATH} | awk -F "/" '{ print $NF }'`
}
copyBinaries()
{
for i in `echo $BINARY_LIST`
do
	ZIP_LIST=`echo $i | grep -E "(jar|zip|apk)$" | grep -iEv "jsp_java|java_jsp|jsp_src|java_jsp_source|jsp_java_compressed" `
        if [ -n "${ZIP_LIST}" ]
        then
        	cp ${OP_DIR}/$i ${RAND_DIR}
        fi
done

}
updateReportsConf()
{
	reports_file=${CONF_FNAME}
	reports_dir="${SOURCES_DIR}/$MODULE/build"
	if [ "${REP_TYPE}" = "CVS" ]
	then
		cd ${reports_dir}
		rm -vf ${reports_file}
		cvs upd -A ${reports_file}
	elif [ "${REP_TYPE}" = "GIT" ]
	then
		cd ${reports_dir}
		if [ -n "${REPORT_FILE_ARG}" ]
		then
			git checkout -f ${REPORT_FILE_ARG} ${reports_file}
		else
			git checkout -f master ${reports_file}
		fi
	else
		cd ${reports_dir}
		if [ -n "${REPORT_FILE_ARG}" ]
		then
			hg revert -r ${REPORT_FILE_ARG} ${reports_file}
		else
			hg revert -r default ${reports_file}
		fi
	fi
	cd -
}
doReportFileCheckout()
{
	if [ -d "${SOURCES_DIR}" ]
	then
		cd ${SOURCES_DIR}
		cp -fv ${SOURCES_DIR}/${MODULE}/build/${CONF_FNAME} ${RAND_DIR}
		cp ${WH_UNAME}@${WH_MCNAME}:${DL_DIR}/logs/changeset.txt ${RAND_DIR}
		cd -
	fi
}
doSubModuleCheckout()
{
	for i in `echo ${SUB_MODULE_LIST}`
	do
		SM_NAME=`echo $i | cut -d ":" -f1`
		SM_REPO_TYPE=`echo $i | cut -d ":" -f2`
		SM_REPO_URL=`echo $i | cut -d ":" -f3`
		SM_CSET=`echo ${SOURCE_CHANGESET_VALUE} | tr "," "\n" | tr "[A-Z]" "[a-z]" | grep -w "${SM_NAME}" | cut -d ":" -f2`
		SM_RAND_MOD_DIR=${RAND_SRC_DIR}/${SM_NAME}
		if [ "${SM_REPO_TYPE}" = "HG" ]
		then
			###SM_CHECKOUT_CMD="hg,clone,https://${HGREPO_USERNAME}:${HGREPO_PASSWORD}@cmsuite.csez.zohocorpin.com/${SM_REPO_URL}"
			SM_CHECKOUT_CMD="https://cmsuite.csez.zohocorpin.com/${SM_REPO_URL}"
		else
			#SM_CHECKOUT_CMD="git,clone,https://anonymous:anonymous@git-new.csez.zohocorpin.com/${SM_REPO_URL}.git"
			SM_CHECKOUT_CMD="https://git.csez.zohocorpin.com/${SM_REPO_URL}.git"
		fi
		#doSourceCheckout ${SM_NAME} ${SM_CHECKOUT_CMD} ${SM_RAND_MOD_DIR} ${SM_REPO_TYPE} ${SM_CSET}
		doSourceCheckout ${SM_CHECKOUT_CMD}
	done
}
buildReports_common_checkout()
{
	hg clone https://${TP_CLONE_PATH}/${TP_MOD} -r ${TP_CHANGESET_VALUE} tpfiles

	mkdir -p ${REPORTS_REPO_DIR}
        cd ${REPORTS_REPO_DIR}/
	####wget http://build/integ/build_reports/milestones/production/build_reports.zip
	cp /zoho/build/downloads/dload/integ/build_reports/milestones/production/build_reports.zip .
	unzip build_reports.zip
	#mv build_reports-default/** .
	rm -rf build_reports.zip
	cd -
	
}

doRequiredCheckout()
{

	mkdir -p ${RAND_SRC_DIR}
	echo "Source Checkout Started time : `date | cut -d " " -f4`"
	#doSourceCheckout ${MODULE} ${CO_CMD} ${RAND_MOD_DIR} ${REP_TYPE} ${SRC_CHANGESET}
	doSourceCheckout ${CLONE_VALUE}
	echo "Source Checkout Ended time : `date | cut -d " " -f4`"

	HG_DB_PSWD="mT8sTSGS"
	GET_SUBMODULES=`mysql -h integ-cm1 -u cmuser hgbuildmgmt -e "select t1.MODULE_NAME from Product t1,Product_Clusters t2 where t1.PRODUCT_ID=t2.SUB_PROD_ID and t2.PARENT_PROD_ID=(select PRODUCT_ID from Product where PRODUCT_NAME='${PRODUCT_NAME}');" -p${HG_DB_PSWD} | awk '{if ( FNR > 1 ) {print $0} }'`
	if [ -n "${GET_SUBMODULES}" ]
	then
		SUB_MODULE_LIST="${GET_SUBMODULES}"
	fi
	if [ -n "${SUB_MODULES}" ]
	then
		if [ -f "${RAND_DIR}/${CONF_FNAME}" ]
		then
			SUB_MODULE_LIST=`cat ${RAND_DIR}/${CONF_FNAME} | grep "^SUB_MODULES=" | cut -d "=" -f2 | cut -d "\"" -f2`
		else
			SUB_MODULE_LIST=`cat ${PRD_DETAILS_FILE} | grep "^SUB_MODULES=" | cut -d "=" -f2 | cut -d "\"" -f2`
		fi
	fi
	if [ -n "${SUB_MODULE_LIST}" ]
	then
		doSubModuleCheckout
	fi
}
doSourceCheckout()
{
    local CLONE_VALUE_LOCAL=$1
    CHECKOUT_CMD=`echo ${CMD} | tr "," " "`
    if [ -d "${RAND_DIR}/SRC" ]
    then
	    cd ${RAND_DIR}/SRC
	    zrepository=`echo ${CLONE_VALUE} | grep "repository.zoho.com"`
            if [ $? -eq 0 ]
            then
		   
		   vtitan=`echo ${CLONE_VALUE} | grep -Ew "MedicalMine|vtitan"`
	           echo $vtitan
		   clone_arg=${ARG}
		   if [ ! -z "$vtitan" ]
                   then
	                vtit_cln_val=`echo ${CLONE_VALUE} |  sed -e 's/repository.zoho.com/zrepository.zoho.com/g'`
                   	git clone -c http.sslVerify=false --recursive -b ${clone_arg} $vtit_cln_val --depth=1
                        #git clone -c http.postBuffer=100M -c core.compression=0 -c core.packedGitLimit=512M -c core.packedGitWindowSize=512M -c pack.windowsMemory=512M -c http.sslVerify=false --recursive -b ${clone_arg} $vtit_cln_val
                  else
	                  clone_arg=${ARG}
        	          wget --header='Authorization:Zoho-oauthtoken '$ACCESS_VALUE --header='X-ZR-Email:integration-team@zohocorp.com' https://repository.zoho.com/repos/${ZREPO_ID}/api/v1/archive/${clone_arg}/${MODULE_NAME}-${clone_arg}.zip --no-check-certificate
                	  unzip ${MODULE_NAME}-${clone_arg}.zip
	                  mv ${MODULE_NAME}-${clone_arg} ${MODULE_NAME}
		fi

            else

		    if [ "${REP_TYPE}" = "GIT" ]
		    then
       			git_source_wget ${CLONE_VALUE_LOCAL} 
		    else
        		hg_source_wget ${CLONE_VALUE_LOCAL}
		    fi
	   fi
    fi
    cd ${RAND_DIR}
}

hg_source_wget()
{
    http_path=`echo $1 | cut -d "=" -f2 | cut -d "/" -f1 | sed -e "s@https:@https://build:@g"`
    url_path=`echo $1 | sed -e "s@https://@\@@g"`
    repo_clone_val=`echo $http_path${HGREPO_PASSWORD}${url_path}`
    ends_val="$repo_clone_val/archive/$ARG.zip --no-check-certificate"
    wget $ends_val
    unzip $ARG.zip
    if [ ! -d "${MODULE_NAME}" ]
    then
	    mv ${MODULE_NAME}-${ARG} ${MODULE_NAME}
    fi



}

git_source_wget()
{
#    api_value=`echo $1 | sed -e "s@https:\/\/git\.csez\.zohocorpin\.com/@@g" | sed -e "s@.git@@g" | sed -e "s@\/@%2F@g"`
    api_value=`echo $1 | sed "s@\(.*\).csez.zohocorpin.com/@@g" | sed -e "s@.git@@g" | sed -e "s@\/@%2F@g"`

        echo $api_value
	pre_api=`echo $1 | cut -d "=" -f2 | cut -d "/" -f3`
        curl -k -X GET 'https://'${pre_api}'/api/v4/projects/'${api_value}'/repository/archive.zip?sha='${ARG}'&private_token='${GIT_WGET_PRIVATE_TOKEN} > ${MODULE_NAME}.zip

        unzip ${MODULE_NAME}.zip
        ORG_PATH=`find -maxdepth 1 -type d | sed -e "s@\./@@g" | grep -v "\."`
	if [ ! -d "${MODULE_NAME}" ]
        then
        	mv ${ORG_PATH} ${MODULE_NAME}
	fi

}

doSourceCheckout_Notneeded()
{
	cd ${HOME}/REPOSITORY
	local MODULE=$1
	local CMD=$2
	local RAND_MOD_DIR=$3
	local REP_TYPE=$4
	local SRC_CHANGESET=$5
	CHECKOUT_CMD=`echo ${CMD} | tr "," " "`
	cd ${HOME}/REPOSITORY
	if [ "${REP_TYPE}" = "CVS" -o "${REP_TYPE}" = "GIT" ]
	then
		rm -rvf ${MODULE}
		`${CHECKOUT_CMD}`
		if [ $? -ne 0 ]
                then
                    `${CHECKOUT_CMD}`
                fi

		cd ${MODULE}
		git checkout ${SRC_CHANGESET}
		if [ $? -ne 0 ]
                then
		    git checkout ${SRC_CHANGESET}
                fi

		cp -rf ${HOME}/REPOSITORY/${MODULE} ${RAND_SRC_DIR}
	else
		if [ ! -d "${HOME}/REPOSITORY/${MODULE}" ]
		then
			`${CHECKOUT_CMD}`
			if [ $? -ne 0 ]
	                then
        	            `${CHECKOUT_CMD}`
                	fi
		fi
		hg share -U ${HOME}/REPOSITORY/${MODULE} ${RAND_MOD_DIR}
		cd ${RAND_MOD_DIR}
		hg pull `echo $CMD | cut -d "," -f3`
		hg upd -r${SRC_CHANGESET} -C
	fi
	cd ${RAND_DIR}
}
callMainMethod()
{
	echo "CALLMAIN"

	cd ${RAND_DIR}
	if [ "$5" = "true" -o "$7" = "YES" ]
	then
		mkdir PREVIOUS MILESTONE
		#CUR_ZIPNAME=`echo ${CUR_ZIPNAME} | cut -d "," -f1`
		#unzip -od CURRENT ${CUR_ZIPNAME}
		CUR_URL_PATH=`echo $CUR_ZIP | sed -e "s@https://build.zohocorp.com@/zoho/build/downloads/dload@g"`
                unzip ${CUR_URL_PATH} -d CURRENT
		cd ${RAND_DIR}/PREVIOUS
		if [ ! -z "${PREV_ZIPNAME}" ]
		then
			PREV_URL=`echo ${PREV_ZIP} | sed "s@/${PREV_ZIPNAME}@@g" | grep "^http"`
		else
			PREV_URL="${PREV_ZIP}"
		fi
		if [ -n "${PREV_URL}" ]
		then
			for i in `echo ${BINARY_LIST}`
			do
				ZIP_LIST=`echo $i | grep -E "(jar|zip|apk)$" | grep -iEv "jsp_java|java_jsp|jsp_src|java_jsp_source|jsp_java_compressed" `
			        if [ -n "${ZIP_LIST}" ]
			        then
					PREV_URL_PATH=`echo $PREV_URL | sed -e "s@https://build.zohocorp.com@/zoho/build/downloads/dload@g"`
					#cp ${PREV_URL_PATH}/${i} .
					PREV_EXTRACT_DIR=`echo "${i%.*}"`
					#unzip -od ${PREV_EXTRACT_DIR} ${i}
					unzip ${PREV_URL_PATH}/${i} -d ${PREV_EXTRACT_DIR}
				fi
			done
		fi
		cd ${RAND_DIR}/MILESTONE
		if [ ! -z "${MS_ZIPNAME}" ]
		then
			MLS_URL=`echo ${MS_ZIP} | sed "s@/${MS_ZIPNAME}@@g" | grep "^http"`
		else
			MLS_URL="${MS_ZIP}"
		fi
		if [ -n "${MLS_URL}" ]
		then
			for i in `echo ${BINARY_LIST}`
			do
				ZIP_LIST=`echo $i | grep -E "(jar|zip|apk)$" | grep -iEv "jsp_java|java_jsp|jsp_src|java_jsp_source|jsp_java_compressed" `
                                if [ -n "${ZIP_LIST}" ]
                                then
					MLS_URL_PATH=`echo $MLS_URL | sed -e "s@https://build.zohocorp.com@/zoho/build/downloads/dload@g"`
					#cp ${MLS_URL_PATH}/$i .
					MILE_EXTRACT_DIR=`echo "${i%.*}"`
					#unzip -od ${MILE_EXTRACT_DIR} ${i}
					unzip ${MLS_URL_PATH}/$i -d ${MILE_EXTRACT_DIR}
				fi
			done
		fi
		cd ${RAND_DIR}
	fi
	echo "PRODUCT_HOME=\"${RAND_DIR}/CURRENT\"" >> ${PRD_DETAILS_FILE}
	echo "BUILD_DIR=\"${RAND_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "REPORTS_DIR=\"${RAND_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "U_PKG=\"${REPORTS_REPO_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "DLOAD_DIR=\"${RAND_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "JSDIRNAME=\"${RAND_SRC_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "CSSDIRNAME=\"${RAND_SRC_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "LATEST_BLD_DIR=\"CURRENT\"" >> ${PRD_DETAILS_FILE}
	echo "LAST_BUILD_DIR=\"PREVIOUS\"" >> ${PRD_DETAILS_FILE}
	echo "MILESTONES_URL=\"${M_DIR}\"" >> ${PRD_DETAILS_FILE}
	#echo "LATEST_MILESTONES_DIR=\"${RAND_DIR}/MILESTONE\"" >> ${PRD_DETAILS_FILE}
	MILESTOEN_DIR_PATH=`echo ${M_DIR} | sed "s@\(.*\)/milestones@@g"`
	echo "LATEST_MILESTONES_DIR=\"${DLOAD_DIRECTORY}/milestones/${MILESTOEN_DIR_PATH}\"" >> ${PRD_DETAILS_FILE}
	echo "LATEST_MILESTONES=\"${M_LBL}\"" >> ${PRD_DETAILS_FILE}
	echo "LATEST_MILESTONE_BRANCH=\"${LATEST_MS_BRANCH}\"" >> ${PRD_DETAILS_FILE}
	echo "MAIL_TEMPLATE=\"${RAND_DIR}/build_log.html\"" >> ${PRD_DETAILS_FILE}
	echo "DUMMY_FILE_NAME=\"${RAND_DIR}/b$$.html\"" >> ${PRD_DETAILS_FILE}
	echo "BUILD_LOG=\"${RAND_DIR}/build.log\"" >> ${PRD_DETAILS_FILE}
	echo "IP_PKG=\"${RAND_DIR}/tpfiles/internal_packages\"" >> ${PRD_DETAILS_FILE}
	echo "TP_PKG=\"${RAND_DIR}/tpfiles/thirdparty_packages\"" >> ${PRD_DETAILS_FILE}
	echo "IG_JARS_CONF=\"${RAND_MOD_DIR}/build/IgnoreJars.conf\"" >> ${PRD_DETAILS_FILE}
	echo "FINDBUGS_EXCLUDE_FILE=\"${RAND_MOD_DIR}/build/findbugs_exclude.xml\"" >> ${PRD_DETAILS_FILE}
        if [ "$5" = "false"  -o "$5" = "FALSE" ]
        then
	echo "SOURCE_PATH=\"${RAND_DIR}\"" >> ${PRD_DETAILS_FILE}
        else
	echo "SOURCE_PATH=\"${RAND_SRC_DIR}\"" >> ${PRD_DETAILS_FILE}
        fi
	echo "JAVA_SRC_DIR=\"${RAND_SRC_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "CHECKWORD_CONF=\"${RAND_MOD_DIR}/build/checkwords.conf\"" >> ${PRD_DETAILS_FILE}
	echo "STARTTAG=\"${P_LBL}\"" >> ${PRD_DETAILS_FILE}
	echo "ENDTAG=\"${C_LBL}\"" >> ${PRD_DETAILS_FILE}
	echo "P_DIR=\"${P_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "C_DIR=\"${C_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "TEMPLATE_FILE=\"${RAND_DIR}/template.txt\"" >> ${PRD_DETAILS_FILE}
	echo "REPORT_DIR=\"${RAND_DIR}/reports\"" >> ${PRD_DETAILS_FILE}
	echo "SRC_CLONED_DIR=\"${RAND_MOD_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "DEST_DL_DIR=\"${DL_DIR}\"" >> ${PRD_DETAILS_FILE}
	echo "DEST_UNAME=\"${WH_UNAME}\"" >> ${PRD_DETAILS_FILE}
	echo "DEST_HOSTNAME=\"${WH_MCNAME}\"" >> ${PRD_DETAILS_FILE}
	echo "commonzip_name=\"${COMMON_ZIP}\"" >> ${PRD_DETAILS_FILE}
	echo "ANT_HOME=\"${ANT_HOME}\"" >> ${PRD_DETAILS_FILE}
	echo "REVIEW_LABEL=\"${TP_CHANGESET_VALUE}\"" >> ${PRD_DETAILS_FILE}
	echo "reports_details=\"${PRD_DETAILS_FILE}\"" >> ${PRD_DETAILS_FILE}


	if [ -f "${RAND_MOD_DIR}/build/sas_build_upgrade/dr_changefiles.properties" ]
	then
		cp -fv ${RAND_MOD_DIR}/build/sas_build_upgrade/dr_changefiles.properties ${RAND_DIR}
	fi
	processor=`nproc`
	##IMAGE_NAME="cmtools.csez.zohocorpin.com:5000/kaleeswaran_n/reports"
	IMAGE_NAME="integ-cm.csez.zohocorpin.com/zoho/reports_updated"
	cpu_limit=`echo $(( $processor * 60 / 100))`
	DEFAULT_PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin"
	BUILD_ENVIRONMENT=" -e ANT_HOME=${ANT_HOME} -e JAVA_HOME=${JAVAHOME} -e PATH=$JAVAHOME/bin:$ANT_HOME/bin/:$DEFAULT_PATH:$GOROOT/bin:$NODE_PATH/bin"
	if [ "$5" = "true" ]
	then
		BUILD_ENVIRONMENT="$BUILD_ENVIRONMENT -v ${SHARED_SRC_DIR}:${SHARED_SRC_DIR} "
	else
		DLOAD_SHARED_PATH="-v ${DL_DIR}:${DL_DIR} -v /zoho/build/REPOSITORY:/zoho/build/REPOSITORY -v /zoho/build/downloads:/zoho/build/downloads "
	fi

	JDKANT_SHARED_VARIABLE="-v /zoho/build/downloads/ant/:/usr/ant/ -v /zoho/build/downloads/java/:/usr/java/ "


	if [ "$5" = "false" -o "$5" = "FALSE" ]
        then
		#sh -x ${REPORTS_REPO_DIR}/gen_reports/genreports.sh ${PRD_DETAILS_FILE} ${JAVAHOME} ${BUILD_DURATION} > ${RAND_DIR}/reports.log 2>&1
		sudo chown -R build.build ${RAND_DIR}

		CEPH_SHARED_FOLDER="-v /zoho/build/downloads/dload:/zoho/build/downloads/dload"

                sed -i "s@REPORT_NEEDED=\"TRUE\"@REPORT_NEEDED=\"FALSE\"@g" ${PRD_DETAILS_FILE} 
		REPORT_SCRIPT="sh  ${REPORTS_REPO_DIR}/gen_reports/genreports.sh ${PRD_DETAILS_FILE} ${JAVAHOME} ${BUILD_DURATION} > ${RAND_DIR}/reports.log 2>&1"
	        echo "docker run -t --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} -e JAVA_OPTS="-Xms600m -Xmx600m -XX:MaxPermSize=300m" -e ANT_OPTS="-Xmx512m -XX:MaxPermSize=250m" -v ${RAND_DIR}:${RAND_DIR} -v /etc/localtime:/etc/localtime:ro ${DLOAD_SHARED_PATH} -w="${RAND_DIR}" ${IMAGE_NAME} ${REPORT_SCRIPT}"
        	sudo docker run -t --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} -e JAVA_OPTS="-Xms600m -Xmx600m -XX:MaxPermSize=300m" -e ANT_OPTS="-Xmx512m -XX:MaxPermSize=250m" -v ${RAND_DIR}:${RAND_DIR} -v /etc/localtime:/etc/localtime:ro -v ${REPORTS_REPO_DIR}:${REPORTS_REPO_DIR} -v ${RAND_MOD_DIR}:${RAND_MOD_DIR} ${DLOAD_SHARED_PATH} ${JDKANT_SHARED_VARIABLE} ${CEPH_SHARED_FOLDER} -w="${RAND_DIR}" ${IMAGE_NAME} ${REPORT_SCRIPT} > ${RAND_DIR}/reports.log 2>&1
	else
		sh  ${REPORTS_REPO_DIR}/gen_reports/genreports.sh ${PRD_DETAILS_FILE} ${JAVAHOME} ${BUILD_DURATION} > ${RAND_DIR}/reports.log 2>&1

        fi

	####sudo chown -R build.build ${RAND_DIR}
	if [ -f "${RAND_DIR}/build_log.html" ]
	then
		mutt -e "set content_type=\"text/html\" from=integration-team@zohocorp.com" -s "${C_LBL} ${ARG} build available, product name: ${PRODUCT_NAME}" "${SUCCESS_MAIL_ID}" < "${RAND_DIR}/build_log.html"
	else
		echo "${RAND_DIR}/build_log.html does not exist .."
	fi
	echo "CALLMAIN ENDED"
}
postprocess()
{

	echo "CALL POSTPRO"
	echo $DL_DIR
	echo "***"
    if [ ! -d "${dir}" ]; then
	GET_ML_MOVED_DETAILS=`python ${PYFILE_DIR}/apiwrapper_reports.py ${WH_BUILD_ID}`
	echo ${GET_ML_MOVED_DETAILS}
       	if [ ! -z "${GET_ML_MOVED_DETAILS}" ]
        then
		if [ "${GET_ML_MOVED_DETAILS}" != "Webhost build" ]
	        then
            DL_DIR="${BLD_DL_DIR}/${GET_ML_MOVED_DETAILS}"
		fi
	fi
	fi

	if [ "$5" = "true" ]
	then
		echo $DL_DIR
                echo "report true"

                TEMP_LOCATION=`echo $DL_DIR | sed -e "s@downloads@downloads_backup@g"`
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports_log build@integ-cm1:${TEMP_LOCATION}/logs/
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/build_mail_template.xml build@integ-cm1:${TEMP_LOCATION}/logs/
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports build@integ-cm1:${TEMP_LOCATION}/
		cp  -rfv ${RAND_DIR}/reports_log ${DL_DIR}/logs/
		cp  -rfv ${RAND_DIR}/build_mail_template.xml ${DL_DIR}/logs
		cp  -rfv ${RAND_DIR}/reports ${DL_DIR}
		sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${PRD_DETAILS_FILE}
                sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${PRD_DETAILS_FILE}
		sed -i 's@ACCESS_VALUE=\(.*\)@ACCESS_VALUE=\"\"@g' ${PRD_DETAILS_FILE}

		sh ${RAND_DIR}/binary_html.sh ${PRD_DETAILS_FILE}>${DL_DIR}/logs/binary_details_html

		if [ -f "${RAND_DIR}/reports/CONSOLIDATE_REPORT/consolidate_report.html" ]
		then
                        #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports/CONSOLIDATE_REPORT/consolidate_report.html build@integ-cm1:${TEMP_LOCATION}/README.html
			cp  -rfv ${RAND_DIR}/reports/CONSOLIDATE_REPORT/consolidate_report.html ${DL_DIR}/README.html
		fi

		if [ -f "${RAND_DIR}/reports/CONSOLIDATE_REPORT/ChangeLog.html" ]
                then
                        cp  -rfv ${RAND_DIR}/reports/CONSOLIDATE_REPORT/ChangeLog.html ${DL_DIR}/ChangeLog.html
                fi

                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/build_log.html build@integ-cm1:${TEMP_LOCATION}/logs/
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/md5sum.txt build@integ-cm1:${TEMP_LOCATION}/logs/
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports_time.html build@integ-cm1:${TEMP_LOCATION}/logs/
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports.log build@integ-cm1:${TEMP_LOCATION}/logs/
		cp  -rfv ${RAND_DIR}/build_log.html ${DL_DIR}/logs/
		cp  -rfv ${RAND_DIR}/md5sum.txt ${DL_DIR}/logs
		cp -rfv ${RAND_DIR}/reports_time.html ${DL_DIR}/logs
		cp -rfv ${RAND_DIR}/reports.log ${DL_DIR}/logs/


		FINAL_DLOAD_SIZE=`du -sbL ${DL_DIR} | tr "\t" "@" | cut -d "@" -f1`
		perl -w -e "s@^BUILD_SIZE=.*@BUILD_SIZE=\"${FINAL_DLOAD_SIZE}\"@g" -p -i ${PRD_DETAILS_FILE}
		perl -w -e "s@^REPORT_NEEDED=.*@REPORT_NEEDED=\"Success\"@g" -p -i ${PRD_DETAILS_FILE}
		echo "REPORTS_ENDED=\"`date "+%Y-%m-%d %T"`\"" >> ${PRD_DETAILS_FILE}		

                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${PRD_DETAILS_FILE} build@integ-cm1:${TEMP_LOCATION}/logs/
		cp -rf ${PRD_DETAILS_FILE} ${DL_DIR}/logs

		curl -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data "build_id=${WH_BUILD_ID}&dload_path=${PRD_DETAILS_FILE}&process=reports" "http://integrepo-secondary:8081/api/v1/buildlog_update"
		
	else
		echo $DL_DIR
                echo "report false"

                TEMP_LOCATION=`echo $DL_DIR | sed -e "s@downloads@downloads_backup@g"`
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/{reports_log,build_mail_template.xml,build_log.html,md5sum.txt,reports_time.html,reports.log} build@integ-cm1:${TEMP_LOCATION}/logs/
		cp -rfv ${RAND_DIR}/{reports_log,build_mail_template.xml,build_log.html,md5sum.txt,reports_time.html,reports.log} ${DL_DIR}/logs/
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports build@integ-cm1:${TEMP_LOCATION}/
		cp -rfv ${RAND_DIR}/reports ${DL_DIR}

		sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${PRD_DETAILS_FILE}
                sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${PRD_DETAILS_FILE}
		sed -i 's@ACCESS_VALUE=\(.*\)@ACCESS_VALUE=\"\"@g' ${PRD_DETAILS_FILE}

		FINAL_DLOAD_SIZE=`du -sbL ${DL_DIR} | tr "\t" "@" | cut -d "@" -f1`
		perl -w -e "s@^BUILD_SIZE=.*@BUILD_SIZE=\"${FINAL_DLOAD_SIZE}\"@g" -p -i ${PRD_DETAILS_FILE}
		echo "REPORTS_ENDED=\"`date "+%Y-%m-%d %T"`\"" >> ${PRD_DETAILS_FILE}
                #scp -pr -i ${HOME}/downloads/ssh/id_rsa ${PRD_DETAILS_FILE} build@integ-cm1:${TEMP_LOCATION}/logs/
		cp -r ${PRD_DETAILS_FILE} ${DL_DIR}/logs
		sh ${RAND_DIR}/hg_utils/build/binary_html.sh ${PRD_DETAILS_FILE}>${DL_DIR}/logs/binary_details_html
		if [ -f "${RAND_DIR}/reports/CONSOLIDATE_REPORT/consolidate_report.html" ]
		then
                	#scp -pr -i ${HOME}/downloads/ssh/id_rsa ${RAND_DIR}/reports/CONSOLIDATE_REPORT/consolidate_report.html build@integ-cm1:${TEMP_LOCATION}/README.html
			cp -fv ${RAND_DIR}/reports/CONSOLIDATE_REPORT/consolidate_report.html ${DL_DIR}/README.html
		fi

		if [ -f "${RAND_DIR}/reports/CONSOLIDATE_REPORT/ChangeLog.html" ]
                then
                        cp  -rfv ${RAND_DIR}/reports/CONSOLIDATE_REPORT/ChangeLog.html ${DL_DIR}/ChangeLog.html
                fi

		curl -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data "build_id=${WH_BUILD_ID}&dload_path=${PRD_DETAILS_FILE}&process=binary" "http://integrepo-secondary:8081/api/v1/buildlog_update"

		REMOVED_DIRECTORY_LIST="PREVIOUS,MILESTONE,CURRENT,DEPENDENCIES,CURRENT_WAR_FILES,*.zip,*.war"
		for to_be_removed in ${REMOVED_DIRECTORY_LIST}
		do
			if [ ! -z "{to_be_removed}" ]
			then
				rm -rf ${to_be_removed}
			fi
		done
	fi

        
	echo "CALL POSTPRO END"
}
time_cal()
{
	CRON_BLD_TIME_FILE=${RAND_DIR}/time.txt
	VALUE=${1}
	SDTIME="${2}"
	EDTIME="${3}"
	SDATE=`echo ${SDTIME} | cut -d "@" -f1`
	STIME=`echo ${SDTIME} | cut -d "@" -f2`
	SD=`echo ${SDATE} | tr "_" " "`
	EDATE=`echo ${EDTIME} | cut -d "@" -f1`
	ETIME=`echo ${EDTIME} | cut -d "@" -f2`
	ED=`echo ${EDATE} | tr "_" " "`
	SOUT=`date -d "${SD} ${STIME}" +%s`
	EOUT=`date -d "${ED} ${ETIME}" +%s`
	DUR=`expr ${EOUT} - ${SOUT}`
	MINS=$(expr ${DUR} \/ 60)
	SECS=$(expr ${DUR} % 60)
	if [ "x${SECS}" = "x" ]
	then
		BDUR="${MINS} min(s)"
	else
		BDUR="${MINS} min(s) ${SECS} sec(s)"
	fi
	echo "BUILD DURATION : ${BDUR}"
	TOTAL_BDUR="`echo ${BDUR} | tr -d \" \"`"
	echo "${VALUE} is started at ${SDTIME}" >> ${CRON_BLD_TIME_FILE}
	echo "<br>" >> ${CRON_BLD_TIME_FILE}
	echo "${VALUE} is ended at ${EDTIME}" >> ${CRON_BLD_TIME_FILE}
	echo "<br>" >> ${CRON_BLD_TIME_FILE}
	echo "Total ${VALUE} time is ${TOTAL_BDUR}" >> ${CRON_BLD_TIME_FILE}
	echo "<br><br><br>" >> ${CRON_BLD_TIME_FILE}
	if [ "${VALUE}" = "${ARG}_BUILD" ]
	then
		export TOTAL_BDUR
	fi
	cp ${CRON_BLD_TIME_FILE} ${DL_DIR}/logs
}
main $*
