checkIDCChangesMerged()
{
        COMMIT_URL=""
        if [ -n "$CHECKIDC_CHANGESET" -a $CHECKIDC_CHANGESET = "YES" ]
        then
	      if [ -n "${BUILD_TO_COMPARE}" ]
	      then
                  SD_IDC_URL=`echo $BUILD_TO_COMPARE | sed 's/\\\//g' | sed 's/\/[^\/]*$//g'`
	      else
                  SD_API_URL="https://sdtools.csez.zohocorpin.com/api/latestBuilds?authtoken=${SD_API_TOKEN}&product_name=${SD_PRODUCT_NAME}"
                  EXEC_URL=`curl -X GET $SD_API_URL | cut -d ":" -f2- | sed 's@"@@g' | sed 's@}@@'`
                  SD_IDC_URL=`echo $EXEC_URL | sed 's/\\\//g' | sed 's/\/[^\/]*$//g'`
	      fi

              curl -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "https://cmtools-api.csez.zohocorpin.com/api/v1/buildlogs?url=${SD_IDC_URL}&expanded=true" | jq "." > ${WORK_DIR}/buildlogapi.json
              IDC_BUILD_URL_WITHOUT_BINARY_NAME=\""`echo ${SD_IDC_URL} | sed s,/*[^/]*$,,`"\"
              log_message "IDCBUILDURL :::: ${IDC_BUILD_URL_WITHOUT_BINARY_NAME}"
              IDC_BLD_SRC_CHANGESET="`jq -r ".buildlogs[] | select(.url | contains(${IDC_BUILD_URL_WITHOUT_BINARY_NAME})) | .build_label" ${WORK_DIR}/buildlogapi.json | sed 's/"//g'`"
              SOURCE_BRANCH="`jq -r ".buildlogs[] | select(.url | contains(${IDC_BUILD_URL_WITHOUT_BINARY_NAME})) | .checkout_label" ${WORK_DIR}/buildlogapi.json | sed 's/"//g'`"
              mkdir -p ${WORK_DIR}/IDC_DIFF_CHECK
              cd ${WORK_DIR}/IDC_DIFF_CHECK
              ZREPO_CHECK=`echo $CLONE_VALUE | grep "repository.zoho"`

              if [ ${REPOSITORY_TYPE} = "HG" ]
              then
                      if [ -n "${ZREPO_CHECK}" ]
                      then
                              REP_PATH=`echo $CLONE_VALUE |  sed -e 's/repository.zoho.com/zrepository.zoho.com/g'`
                              if [ ! -d "${MODULE_NAME}" ]; then
                                hg clone $REP_PATH
                                if [ $? -ne 0 ]; then
                                    hg clone $REP_PATH
                                    if [ $? -ne 0 ]; then
                                        changesetCheckNeeded="NO"
                                    else
                                        changesetCheckNeeded="YES"
                                    fi
                                else
                                    changesetCheckNeeded="YES"
                                fi
                              else
                                cd ${MODULE_NAME}; hg pull -u
                                if [ $? -ne 0 ]; then
                                    cd ${WORK_DIR}/IDC_DIFF_CHECK/${MODULE_NAME}; hg pull -u
                                    if [ $? -ne 0 ]; then
                                        changesetCheckNeeded="NO"
                                    else
                                        changesetCheckNeeded="YES"
                                    fi
                                else
                                    changesetCheckNeeded="YES"
                                fi
                              fi
                      else
                        if [ ! -d "${MODULE_NAME}" ]; then
                            hg clone $CLONE_VALUE
                            if [ $? -ne 0 ]; then
                                hg clone $CLONE_VALUE
                                if [ $? -ne 0 ]; then
                                    changesetCheckNeeded="NO"
                                else
                                    changesetCheckNeeded="YES"
                                fi
                            else
                                changesetCheckNeeded="YES"
                            fi
                        else
                            cd ${MODULE_NAME}; hg pull -u
                            if [ $? -ne 0 ]; then
                                cd ${WORK_DIR}/IDC_DIFF_CHECK/${MODULE_NAME}; hg pull -u
                                if [ $? -ne 0 ]; then
                                    changesetCheckNeeded="NO"
                                else
                                    changesetCheckNeeded="YES"
                                fi
                            else
                                changesetCheckNeeded="YES"
                            fi
                        fi
                      fi
                      if [ -n "${changesetCheckNeeded}" -a "${changesetCheckNeeded}" == "YES" ]; then
                        cd ${WORK_DIR}/IDC_DIFF_CHECK/${MODULE_NAME}
                        CHANGESET_EVAL=`eval echo \\${IDC_BLD_SRC_CHANGESET}`
                        LOG_VAL="descendants($CHANGESET_EVAL)"

                        IDC_CHANGE_EXISTS=`hg log -b ${ARG} -r$LOG_VAL`
                      else
                        log_message "There was an issue in cloning the repository or in getting the IDC Changeset."
                      fi
              elif [ ${REPOSITORY_TYPE} = "GIT" ]
              then
                      if [ -n "${ZREPO_CHECK}" ]
                      then
                              REP_PATH=`echo $CLONE_VALUE |  sed -e 's/repository.zoho.com/zrepository.zoho.com/g'`
                              if [ ! -d "${MODULE_NAME}" ]; then
                                git clone $REP_PATH
                                if [ $? -eq 0 ]; then
                                    git clone $REP_PATH
                                fi
                              else
                                cd ${MODULE_NAME}; git pull
                              fi
                      else
                              if [ ! -d "${MODULE_NAME}" ]; then
                                git clone $CLONE_VALUE
                                if [ $? -eq 0 ]; then
                                    git clone $CLONE_VALUE
                                fi
                              else
                                cd ${MODULE_NAME}; git pull
                              fi
                      fi

                      cd ${WORK_DIR}/IDC_DIFF_CHECK/${MODULE_NAME}
                      IDC_CHANGE_EXISTS=`git branch --contains $IDC_BLD_SRC_CHANGESET | grep -w "${ARG}"`
              fi

              if [ -n "${IDC_CHANGE_EXISTS}" ]
              then
                    log_message "IDC Build updated Changeset(${IDC_BLD_SRC_CHANGESET}) available in the Branch ${ARG} of ${MODULE_NAME} Repository."
                    content+="<tr><td>1</td>"
                    content+="<td>${PRODUCT_NAME}</td>"
                    content+="<td>${SOURCE_BRANCH}</td>"
                    content+="<td>${ARG}</td>"
                    content+="<td>${IDC_BLD_SRC_CHANGESET}</td>"
                    content+="<td style='content: \2713;font-weight: bolder;'>&#10003;</td></tr>"
              else
                      if [ ${REPOSITORY_TYPE} = "HG" ]
                     then
                             if [ -n "${ZREPO_CHECK}" ]
                             then
                                     COMMIT_URL="$CLONE_VALUE#/commit/${IDC_BLD_SRC_CHANGESET}"
                             else
                                     COMMIT_URL="$CLONE_VALUE/rev/${IDC_BLD_SRC_CHANGESET}"
                             fi
                             elif [ ${REPOSITORY_TYPE} = "GIT"]
                     then
                             if [ -n "${ZREPO_CHECK}" ]
                             then
                                     COMMIT_URL="$CLONE_VALUE#/commit/${IDC_BLD_SRC_CHANGESET}"
                             else
                                     COMMIT_URL="$CLONE_VALUE/-/commit/${IDC_BLD_SRC_CHANGESET}"
                             fi
                     fi

                     log_message "IDC Build updated Changeset(${IDC_BLD_SRC_CHANGESET}) not available in the Branch ${ARG} of ${MODULE_NAME} Repository."
                    content+="<tr><td>1</td>"
                    content+="<td>${PRODUCT_NAME}</td>"
                    content+="<td>${SOURCE_BRANCH}</td>"
                    content+="<td>${ARG}</td>"
                    content+="<td>${IDC_BLD_SRC_CHANGESET}</td>"
                    content+="<td style='content: \2713; font-weight: bolder;'>&#xd7;</td></tr>"
                    log_message "Commit URL IS ${COMMIT_URL}" "SEVERE"
                fi
                cd ${WORK_DIR}
        fi
        parallelModuleDownloadProcess
}
log_message() {
    message="${1}"
    LOG_TYPE="INFO"
    if [ -n "${2}" ]; then
        LOG_TYPE="${2}"
    fi
    timestamp="$(date +"%Y-%m-%d %T")"
    echo "${LOG_TYPE} [${timestamp}] :::: `echo ${message} | fold -s -w 170 | awk 'NR==1 {print} NR>1 {print "\t\t\t\t" $0}'`"
}
parallelModuleDownloadProcess(){
    if [ -n "${TIP_SUB_PRODUCT_DETAILS}" ]; then
        content+="<tr><td colspan="6" style='text-align: Center; font-weight: bold;'>Sub Module Comparison Result</td></tr>"
        i=1
        for sub_module_details in `echo ${TIP_SUB_PRODUCT_DETAILS} | tr "," "\n"`; do
            sub_module_name="`echo ${sub_module_details} | cut -d "=" -f1`"
            sub_module_branch="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f1`"
            sub_module_repo_type="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f2`"
            sub_module_repo_url="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f3-4`"
            sub_module_product_id="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f5`"
            sub_module_repo_changeset="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f6`"
            sub_module_repo_id="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f7`"

            log_message "****************************************************"
            log_message "SubModuleDetails ${sub_module_details}\n"
            log_message "SubModuleName ${sub_module_name}"
            log_message "SubModuleBranch ${sub_module_branch}"
            log_message "SubModuleRepoType ${sub_module_repo_type}"
            log_message "SubModuleRepoURL ${sub_module_repo_url}"
            log_message "SubModuleProductID ${sub_module_product_id}"
            log_message "SubModuleRepoChangeset ${sub_module_repo_changeset}"
            log_message "SubModuleZrepoID ${sub_module_repo_id}"
            if ! grep -q "cmsuite" <<< "${sub_module_repo_url}"; then
                module_name="`basename ${sub_module_repo_url}`"
                module_name="`echo ${module_name} | sed -e "s@.git@@g"`"
                log_message "Module_name ${module_name}"
                if [ -n "${sub_module_branch}" ]; then
                    prepareRepoCloneCommand ${sub_module_repo_type} ${sub_module_repo_url} ${sub_module_branch} ${sub_module_name} ${sub_module_product_id} ${i}
                fi
            ((i++))
            fi
        done
    fi
}
prepareRepoCloneCommand() {
    SubProductChangesetMergeCheck="NO"
    REPO_TYPE="${1}"
    CLONE_VALUE="${2}"
    clone_arg="${3}"
    checkout_mod_name="${4}"
    sub_product_id="${5}"
    incremental_number="${6}"
    clone_prefix="$(getDVCS ${REPO_TYPE})"
    repo_clone_command="${clone_prefix} clone ${clone_option} ${CLONE_VALUE} ${checkout_mod_name}-${clone_arg}"
    log_message "RepoCloneCommand ${repo_clone_command}"
    cd ${WORK_DIR}/IDC_DIFF_CHECK/
    if [ ! -d ${WORK_DIR}/IDC_DIFF_CHECK/${checkout_mod_name}-${clone_arg} ]; then
            ${repo_clone_command}
            clone_status="$?"
            log_message "RepoClone Status for ${checkout_mod_name} IS :::: ${clone_status}"
            if [ ${clone_status} -ne 0 ]; then
                log_message "Issue in repository cloning process for ${checkout_mod_name}. Retrying the clone process again." "ERROR"
                cd ${WORK_DIR}/IDC_DIFF_CHECK/
                ${repo_clone_command}
                if [ ${clone_status} -ne 0 ]; then
                    log_message "Issue in repository cloning process with retry process for ${checkout_mod_name}." "ERROR"
                else
                    SubProductChangesetMergeCheck="YES"
                fi
            else
                SubProductChangesetMergeCheck="YES"
            fi
    else
        cd ${WORK_DIR}/IDC_DIFF_CHECK/${checkout_mod_name}-${clone_arg}
        if [ "${REPO_TYPE}" == "HG" ]; then
            PULL_COMMAND="hg pull -u"
        else
            PULL_COMMAND="git pull"
        fi
        ${PULL_COMMAND}
        if [ $? -ne 0 ]; then
            log_message "Repository Exists. Hence pull process initiated which got failed and so retrying the process again." "ERROR"
            hg pull -u
            if [ $? -eq 0 ]; then
                log_message "Issue in pulling the changes in repository with retry process for ${checkout_mod_name}." "ERROR"
            else
                SubProductChangesetMergeCheck="YES"
            fi
        else
            SubProductChangesetMergeCheck="YES"
        fi
    fi
    if [ -n "${SubProductChangesetMergeCheck}" -a "${SubProductChangesetMergeCheck}" == "YES" ]; then
            SUB_IDC_BLD_SRC_CHANGESET="`jq -r ".source_changeset_details[] | select(.product_id | contains(${sub_product_id})) | .changeset" ${WORK_DIR}/buildlogapi.json | sed 's/"//g'`"
            SUB_IDC_BLD_SOURCE_BRANCH="`jq -r ".source_changeset_details[] | select(.product_id | contains(${sub_product_id})) | .branch" ${WORK_DIR}/buildlogapi.json | sed 's/"//g'`"
            echo "SUBPROD_IDC_BLD_SRC_CHANGESET ${SUB_IDC_BLD_SRC_CHANGESET}"
            if [ -n "${SUB_IDC_BLD_SRC_CHANGESET}" ]; then
                subProdIDCMergeChangesetCheck ${checkout_mod_name}-${clone_arg} ${REPO_TYPE} ${SUB_IDC_BLD_SRC_CHANGESET} ${clone_arg} ${checkout_mod_name} ${CLONE_VALUE} ${incremental_number} ${SUB_IDC_BLD_SOURCE_BRANCH}
            else
                content+="<tr><td>${7}</td>"
                content+="<td>${checkout_mod_name}</td>"
                content+="<td>NA</td>"
                content+="<td>${CLONE_ARG}</td>"
                content+="<td>NA</td>"
                content+="<td style='content: \2713; font-weight: bolder;'>-</td></tr>"
                log_message "IDC Changeset are not available for ${checkout_mod_name} to cross check whether the changeses merged in the current build." "SEVERE"
            fi
    fi
}
getDVCS() {
    REPO_TYPE="${1}"
    clone_prefix="$([[ "${REPO_TYPE}" == "HG" ]] && echo "hg" || echo "git")"
    export clone_option="$([[ "${REPO_TYPE}" == "HG" ]] && echo "--config ui.clonebundles=false" || echo " ")"
    echo "${clone_prefix} ${clone_option}"
}
subProdIDCMergeChangesetCheck(){
    CHANGESET_EVAL=`eval echo \\${3}`
    LOG_VAL="descendants($CHANGESET_EVAL)"
    IDC_BLD_SRC_CHANGESET="${3}"
    CLONE_ARG="${4}"
    checkout_mod_name="${5}"
    if [ -d ${WORK_DIR}/IDC_DIFF_CHECK/${1} ]; then
        cd ${WORK_DIR}/IDC_DIFF_CHECK/${1}/
        if [ "${2}" == "HG" ]; then
            SUBPROD_IDC_CHANGE_EXISTS=`hg log -b ${CLONE_ARG} -r$LOG_VAL`
        else
            SUBPROD_IDC_CHANGE_EXISTS=`git branch --contains $IDC_BLD_SRC_CHANGESET | grep -w "${CLONE_ARG}"`
        fi
    fi
    if [ -n "${SUBPROD_IDC_CHANGE_EXISTS}" ]; then
        log_message "The IDC Changeset(${IDC_BLD_SRC_CHANGESET}) SubProduct Build (${checkout_mod_name}) for ${MODULE_NAME} is available in the Branch ${CLONE_ARG} of ${checkout_mod_name} Repository." "SEVERE"
        content+="<tr><td>${7}</td>"
        content+="<td>${checkout_mod_name}</td>"
        content+="<td>${8}</td>"
        content+="<td>${IDC_BLD_SRC_CHANGESET}</td>"
        content+="<td style='content: \2713;font-weight: bolder;'>&#10003;</td></tr>"
    else
        log_message "The IDC Changeset(${IDC_BLD_SRC_CHANGESET}) SubProduct Build (${checkout_mod_name}) for ${MODULE_NAME} are not available in the Branch ${CLONE_ARG} of ${checkout_mod_name} Repository." "SEVERE"
        content+="<tr><td>${7}</td>"
        content+="<td>${checkout_mod_name}</td>"
        content+="<td>${8}</td>"
        content+="<td>${CLONE_ARG}</td>"
        content+="<td>${IDC_BLD_SRC_CHANGESET}</td>"
        content+="<td style='content: \2713; font-weight: bolder;'>&#xd7;</td></tr>"
        getCommitURL ${6} ${2} ${IDC_BLD_SRC_CHANGESET}
    fi
}
getCommitURL(){
        ZREPO_CHECK=`echo ${1} | grep "repository.zoho"`
        if [ "${2}" = "HG" ]
        then
                if [ -n "${ZREPO_CHECK}" ]
                then
                        COMMIT_URL="${1}#/commit/${3}"
                else
                        COMMIT_URL="${1}/rev/${3}"
                fi
        elif [ "${2}" = "GIT" ]
        then
                if [ -n "${ZREPO_CHECK}" ]
                then
                        COMMIT_URL="${1}#/commit/${3}"
                else
                        COMMIT_URL="${1}/-/commit/${3}"
                fi
        fi
        log_message "Commit URL ${COMMIT_URL}" "SEVERE"
}
createHeaderHtml(){
    content="<html><head><title>${PRODUCT_NAME} IDC Changeset Comparison Report.</title></head>"
    content+="<script src='https://code.jquery.com/jquery-3.4.1.slim.min.js' integrity='sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n' crossorigin='anonymous'></script>"
    content+="<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@4.4.1/dist/css/bootstrap.min.css' integrity='sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh' crossorigin='anonymous'>"
    content+="<h3 class='h3' style='border-bottom: 1px solid #CCC;padding-bottom: 25px;text-align: center; margin: 10px 20px 0px 0px;line-height: 30px;'>${PRODUCT_NAME} IDC CHANGESET COMPARSION VIEW</h3>"
    content+="<table class='table table-bordered'>"
    content+="<thead class='table-dark'>"
    content+="<tr>"
    content+="<th scope='col'>#</th>"
    content+="<th scope='col'>ProductName</th>"
    content+="<th scope='col'>Source Branch</th>"
    content+="<th scope='col'>Target Branch</th>"
    content+="<th scope='col'>Missing Changeset(IDC)</th>"
    content+="<th scope='col'>Available</th>"
    content+="</tr></thead>"
}
createBodyHtml(){
    content+="<tbody>"
}
createFooterHtml(){
    content+="</tbody></table></html>"
}
createOutputFile(){
    echo ${content} > ${WORK_DIR}/logs/idc_comparison.html
}
initiateIDCCheckProcess(){
createHeaderHtml
createBodyHtml
checkIDCChangesMerged
createFooterHtml
createOutputFile
}
