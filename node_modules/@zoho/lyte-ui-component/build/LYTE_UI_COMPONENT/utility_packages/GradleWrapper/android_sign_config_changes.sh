#!/bin/sh
[ $1 ] || { echo "Usage: $0 <GRADLE ROOT PROJECT FOLDER>"; exit 1; }
main()
{
        project_root_dir=${1}
	new_sign_option=${2}
        config_matches="storeFile storePassword keyAlias keyPassword"
	if [ "${new_sign_option}" = "yes" ]; then
		new_sign_needed="yes"
	else
		new_sign_needed="no"
	fi
	findGradleFile
}
findGradleFile()
{
   sign_config_entry=0
   classpath_entry=0
   gradleFileList=$(find ${project_root_dir} -type f \( -name "*.gradle*" ! -path "*.hg*" ! -path "*.git*" \) )
   for checksignfile in $(echo ${gradleFileList})
   do
       grep -q "storeFile.*file.*(.*.*)" ${checksignfile}
       if [ $? -eq 0 ];then
           sign_config_entry=$(expr ${sign_config_entry} + 1)
       fi
       grep -q "classpath.*:\|classpath(.*)\|^[^/]*classpath" ${checksignfile}
       if [ $? -eq 0 ];then
           classpath_entry=$(expr ${classpath_entry} + 1)
       fi
   done
 
   if [ ${sign_config_entry} -ne 0 ]; then

   for gfile in $(echo ${gradleFileList})
   do
      if [ -f ${gfile} ]
      then
          echo ${gfile} | grep -q "buildSrc/"
          if [ $? -ne 0 ]; then
	      grep -q "classpath.*:\|storeFile\|classpath(.*\|classpath.libs*" ${gfile}
              if [ $? -eq 0 ]; then
                  changeSignConfig
              fi
          fi
      fi
   done
   fi
}
changeSignConfig()
{
   dsl_storefile_lineno=$(grep -wn "storeFile" ${gfile} | grep "=" | cut -d ":" -f1)
   if [ "${dsl_storefile_lineno}" != "" ]; then
      for dslno in $(echo ${dsl_storefile_lineno}); do
	  cred_lineno=$(expr $dslno - 1)
	  sed -n "${cred_lineno}p" ${gfile} | grep -q "CredentialsContainer"
	  if [ $? -ne 0 ]; then
	      sed -i "${dslno}i val credentials = extra.properties[\"credentials\"] as CredentialsContainer" ${gfile}
          fi
      done
   fi
   
   for signkeymatch in $(echo ${config_matches})
   do
       grep -rwn "${signkeymatch}" ${gfile} | grep -v "//\|/\*" | while read -r matchedline;
       do
          matched_line=$(echo ${matchedline} | cut -d ":" -f1)
          if [ "${signkeymatch}" = "storeFile" ]
          then
	      if sed -n "${matched_line}p" ${gfile} | grep -q "zoho-android-release-key.keystore"; then
		  if [ "${new_sign_needed}" = "yes" ]; then
		  	sed -i "${matched_line}s/file([^)]*)/file(credentials.forKey(\"encKeyPathNew\"))/" ${gfile}
		  else
		  	sed -i "${matched_line}s/file([^)]*)/file(credentials.forKey(\"encKeyPath\"))/" ${gfile}
		  fi
                  echo "-------- LineNo:${matched_line} storeFile encrypt method added --------  ${gfile}"
              elif sed -n "${matched_line}p" ${gfile} | grep -q "nic-release-key.keystore"; then
                  sed -i "${matched_line}s/file([^)]*)/file(credentials.forKey(\"nicEncKeyPath\"))/" ${gfile}
                  echo "-------- LineNo:${matched_line} NIC storeFile encrypt method added --------  ${gfile}"
              fi
          elif [ "${signkeymatch}" = "storePassword" ]
	  then
              if grep -q "System.getenv(\"KSTOREPWD\")" ${gfile}; then
		  if [ "${new_sign_needed}" = "yes" ]; then
		  	sed -i "${matched_line}s/System.getenv(\"KSTOREPWD\")/credentials.forKey(\"encStorePWDNew\")/" ${gfile}
		  else
		  	sed -i "${matched_line}s/System.getenv(\"KSTOREPWD\")/credentials.forKey(\"encStorePWD\")/" ${gfile}
		  fi
                  echo "-------- LineNo:${matched_line} storePassword encrypt method added --------  ${gfile}"
              elif grep -q "System.getenv(\"NICKSTOREPWD\")" ${gfile}; then
                  sed -i "${matched_line}s/System.getenv(\"NICKSTOREPWD\")/credentials.forKey(\"nicEncStorePWD\")/" ${gfile}
                  echo "-------- LineNo:${matched_line} NIC storePassword encrypt method added --------  ${gfile}"
              fi
          elif [ "${signkeymatch}" = "keyAlias" ]
          then
              if grep -q "System.getenv(\"RELKEY\")" ${gfile}; then
		  sed -i "${matched_line}s/System.getenv(\"RELKEY\")/credentials.forKey(\"encRelkey\")/" ${gfile}
                  echo "-------- LineNo:${matched_line} keyAlias encrypt method added --------  ${gfile}"
              elif grep -q "System.getenv(\"NICRELKEY\")" ${gfile}; then
                  sed -i "${matched_line}s/System.getenv(\"NICRELKEY\")/credentials.forKey(\"nicEncRelkey\")/" ${gfile}
                  echo "-------- LineNo:${matched_line} NIC keyAlias encrypt method added --------  ${gfile}"
              fi
          elif [ "${signkeymatch}" = "keyPassword" ]
          then
              if grep -q "System.getenv(\"KEYPWD\")" ${gfile}; then
		  if [ "${new_sign_needed}" = "yes" ]; then
		  	sed -i "${matched_line}s/System.getenv(\"KEYPWD\")/credentials.forKey(\"encKeyPWDNew\")/" ${gfile}
		  else
		  	sed -i "${matched_line}s/System.getenv(\"KEYPWD\")/credentials.forKey(\"encKeyPWD\")/" ${gfile}
		  fi
                  echo "-------- LineNo:${matched_line} keyPassword encrypt method added --------  ${gfile}"
              elif grep -q "System.getenv(\"NICKEYPWD\")" ${gfile}; then
                  sed -i "${matched_line}s/System.getenv(\"NICKEYPWD\")/credentials.forKey(\"nicEncKeyPWD\")/" ${gfile}
                  echo "-------- LineNo:${matched_line} NIC keyPassword encrypt method added --------  ${gfile}"
              fi
          fi
       done
   done

   addEncryptPlugin
   addEncryptClasspath
   addCommentforPrintedLine
}
addEncryptPlugin()
{
     plugin_name="plugins"

     if grep -q 'plugins{\|plugins[[:space:]]*{' ${gfile}; then
         sed -i ':a; N; $!ba; s/'${plugin_name}'\s*{/'${plugin_name}' {/g' $gfile
         precheck_first_line_no=$(grep -n ''${plugin_name}'[[:space:]]*{' ${gfile} | head -n 1 | sed 's/^\([0-9]\+\):.*/\1/')
         if [ "${precheck_first_line_no}" != "" ]; then
             gradle_file_type="kts"
         fi
     else
         gradle_file_type="legacy"
     fi

     if [ "${gradle_file_type}" = "legacy" ]; then
         if grep -q 'apply plugin:' ${gfile}; then
             grep -q "nu.studer.credentials" ${gfile}
	     if [ $? -ne 0 ]; then
	         plugin_first_line_no=$(grep -n 'apply plugin:' ${gfile} | head -n 1 | sed 's/^\([0-9]\+\):.*/\1/')
	         if [ "${plugin_first_line_no}" != "" ]; then
	             construct_line_no=$(expr $plugin_first_line_no + 1)
		     echo "-------- LineNo:${construct_line_no} Encrypt plugin added --------  ${gfile}"
		     sed -i "${construct_line_no}i apply plugin: \"nu.studer.credentials\"" ${gfile}
	         fi
	     fi
         fi
     else
	grep -q "nu.studer.credentials" ${gfile}
	if [ $? -ne 0 ]; then
	   if ! grep -q "id.*apply.*false" ${gfile}; then
	       sed -i ':a; N; $!ba; s/'${plugin_name}'\s*{/'${plugin_name}' {/g' $gfile
	       if grep -q 'plugins {' $gfile && grep -q 'id \|id(' $gfile; then
	           plugin_first_line_no=$(grep -n ''${plugin_name}'[[:space:]]*{' ${gfile} | head -n 1 | sed 's/^\([0-9]\+\):.*/\1/')
	           if [ "${plugin_first_line_no}" != "" ]; then
	               construct_line_no=$(expr $plugin_first_line_no + 2)
		       echo "-------- LineNo:${construct_line_no} Encrypt plugin added --------  ${gfile}"
		       if grep -q "id(" ${gfile}; then
			    if [ ${classpath_entry} != 0 ];then
		                sed -i "${construct_line_no}i id(\"nu.studer.credentials\")" ${gfile}
		            else
				sed -i "${construct_line_no}i id(\"nu.studer.credentials\") version \"3.0\" " ${gfile}
			    fi
			    grep -q 'import nu.studer.gradle.credentials.domain.CredentialsContainer' ${gfile}
			    if [ $? -ne 0 ]; then
			        sed -i "1i import nu.studer.gradle.credentials.domain.CredentialsContainer" ${gfile}
		            fi
		       else
			    if [ ${classpath_entry} != 0 ];then
		                sed -i "${construct_line_no}i id \"nu.studer.credentials\"" ${gfile}
		            else
		                sed -i "${construct_line_no}i id \"nu.studer.credentials\" version \"3.0\"" ${gfile}
		            fi
		       fi
	           fi
	       fi
	   fi
        fi
     fi
}
addEncryptClasspath()
{
    classpath_type=""

    if grep -q "^[^/]*classpath" ${gfile}; then
	classpath_gradle_file="${gfile}"
    fi

    if [ -f "${classpath_gradle_file}" ]; then
        grep -q "nu.studer:gradle-credentials-plugin:3.0" ${classpath_gradle_file}
	if [ $? -ne 0 ]; then
	    if grep -q "classpath(" ${classpath_gradle_file}; then
	        classpath_type="kts"
	    fi

	    if [ "${classpath_type}" = "kts" ]; then
	        classpath_first_line_no=$(grep -n 'classpath(' "${classpath_gradle_file}" | head -n 1 | sed 's/^\([0-9]\+\):.*/\1/')
	        if [ ${classpath_first_line_no} != "" ]; then
	            construct_classpath_lineno=$(expr $classpath_first_line_no + 1)
		    echo "-------- LineNo:${construct_classpath_lineno} Encrypt classpath added --------  ${classpath_gradle_file}"
		    sed -i "${construct_classpath_lineno}i classpath(\"nu.studer:gradle-credentials-plugin:3.0\")" ${classpath_gradle_file}
                fi
	    else
	        classpath_first_line_no=$(grep -n 'classpath.*:' "${classpath_gradle_file}" | head -n 1 | sed 's/^\([0-9]\+\):.*/\1/')
	        if [ ${classpath_first_line_no} != "" ]; then
	            construct_classpath_lineno=$(expr $classpath_first_line_no + 1)
		    echo "-------- LineNo:${construct_classpath_lineno} Encrypt classpath added --------  ${classpath_gradle_file}"
		    sed -i "${construct_classpath_lineno}i classpath \"nu.studer:gradle-credentials-plugin:3.0\"" ${classpath_gradle_file}
                fi
	    fi
	fi
     fi
}
addCommentforPrintedLine()
{
	printline_match_credentials=$(grep -n "credentials.forKey" ${gfile} | grep '\$\|print\|println' | grep -v "//\|/\*" | cut -d ":" -f1)
	printline_match_storefile=$(grep -n "storeFile" ${gfile} | grep '\$\|print\|println' | grep -v "//\|/\*" | cut -d ":" -f1)
	printline_match_storepaswd=$(grep -n "storePassword" ${gfile} | grep '\$\|print\|println' | grep -v "//\|/\*" | cut -d ":" -f1)
	printline_match_keypaswd=$(grep -n "keyPassword" ${gfile} | grep '\$\|print\|println' | grep -v "//\|/\*" | cut -d ":" -f1)
	printline_match_alias=$(grep -n "keyAlias" ${gfile} | grep '\$\|print\|println' | grep -v "//\|/\*" | cut -d ":" -f1)

	if [ "${printline_match_credentials}" != "" ]; then
	    for credline in $(echo ${printline_match_credentials}); do
		echo "-------- LineNo:${credline} restricted line commented -------- ${gfile}"
	        sed -i ''${credline}'s/^/\/\//' ${gfile}
	    done
	fi
	if [ "${printline_match_storefile}" != "" ]; then
	    for strfleline in $(echo ${printline_match_storefile}); do
		echo "-------- LineNo:${strfleline} restricted line commented -------- ${gfile}"
	        sed -i ''${strfleline}'s/^/\/\//' ${gfile}
	    done
	fi
	if [ "${printline_match_storepaswd}" != "" ]; then
	    for strpaswdline in $(echo ${printline_match_storepaswd}); do
		echo "-------- LineNo:${strpaswdline} restricted line commented -------- ${gfile}"
	        sed -i ''${strpaswdline}'s/^/\/\//' ${gfile}
	    done
	fi
	if [ "${printline_match_keypaswd}" != "" ]; then
	    for keypaswdline in $(echo ${printline_match_keypaswd}); do
		echo "-------- LineNo:${keypaswdline} restricted line commented -------- ${gfile}"
	        sed -i ''${keypaswdline}'s/^/\/\//' ${gfile}
	    done
	fi
	if [ "${printline_match_alias}" != "" ]; then
	    for aliasline in $(echo ${printline_match_alias}); do
		echo "-------- LineNo:${aliasline} restricted line commented -------- ${gfile}"
	        sed -i ''${aliasline}'s/^/\/\//' ${gfile}
	    done
	fi
}
main $*
