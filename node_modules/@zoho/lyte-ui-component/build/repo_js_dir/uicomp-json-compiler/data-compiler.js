const $ = require("./data-helpers.js");
const path = require("path");
var omittedFiles = ['button-test','colorpicker-ui','dropdown-test'];

var compiler = {
	update:(file)=>{
		const filename = $.getLast(file);
		const ext = $.getExt(filename);
		let component = $.getName(filename);
		if(ext === 'css'){
			component = component.replace('-ui','');
		}
		if(!$.checkForMetaFiles(component,false)){
			$.createMetaFilesFor(component);
		}
		$.updateExtractedData(component);
	},
	compile:(array)=>{
		const components = (array && array.length > 0 ) ? array : $.getChildFoldersOf($.metaInfoPath).filter(file => !omittedFiles.includes(file));
		const outputJson = {};
		components.forEach((component)=>{
			let json = {templates:{},dependencies:[],methods:[],properties:{}};
			let dataset = $.getContent(path.join($.metaInfoPath,component,'syntax.txt'));  //No I18N
			if(dataset){  //No I18N
				dataset = dataset.split(/^\s*##/gm).slice(2);
				const propertiesToWatch = [];
				dataset.forEach((data)=>{
					data = data.split("##");  //No I18N
					let	key = data[0].split("--")[0].trim();
					let contentType = (data[0].split("--")[1] || '').trim();
					let content = data[1] ? data[1].trim() : "";
					if(!json.templates.hasOwnProperty(key)){
						json.templates[key]={};
					}
					if(contentType.toLowerCase().includes("html")){
						json.templates[key][contentType]=$.convertToJson(content);
					}else{
						json.templates[key][contentType]=JSON.stringify(content);
					}
				});
				json.templates._propsToWatch = propertiesToWatch;
			}else{
				console.log("Please update syntax.txt file of "+component); //No I18N
			}
			try{
				JSON.parse($.getContent(path.join($.metaInfoPath,component,'meta.json')));
			}catch(e){
				console.log("ERROR in ",component+"\n",$.getContent(path.join($.metaInfoPath,component,'meta.json')));
				return;
			}
			let metaInfo = JSON.parse($.getContent(path.join($.metaInfoPath,component,'meta.json')));//No I18n
			let jsContent = $.getContent($.constructJsPath(component));  //No I18N
			if(jsContent){
				let parsedJs = $.parseJs(jsContent);
				let properties = parsedJs[0]||[];
				let subComponents = parsedJs[1]||[];
				json.subComponents = metaInfo._subComponents.concat(subComponents.filter(compName => !(metaInfo._subComponents.includes(compName))));
				properties.forEach((property)=>{
					if(Object.keys(property).length > 0 && !metaInfo._experimentalAttributes.includes(property._name)){
						json.properties[property._name]={};
						json.properties[property._name].type = property._type;  //No I18N
						json.properties[property._name].defaultValue = property._default;  //No I18N
						if(property._type === "array"){
							json.properties[property._name].heterogenousArray = metaInfo._heterogenousArray[property._name];
						}
						if(metaInfo._allowedValues[property._name]){
							let currProp = metaInfo._allowedValues[property._name];
							if(Array.isArray(currProp) && currProp.length > 0){
								if(currProp.length === 1 && typeof currProp[0] === "object" && !Array.isArray(currProp[0])){
									let tempObj = {};
									for(let subProp in currProp[0]){
										if(typeof currProp[0][subProp]==="string"){
											tempObj[subProp]={};
											$.setCustomValues(currProp[0][subProp],tempObj[subProp]);
										}else{
											tempObj[subProp]=currProp[0][subProp];
										}
									}
									json.properties[property._name].allowedValues = [tempObj];  
								}else{
									json.properties[property._name].allowedValues = currProp; 
								}
							}else{
								$.setCustomValues(currProp,json.properties[property._name]);
							}
						}
						if(metaInfo._objectData[property._name] && Object.keys(metaInfo._objectData[property._name]).length > 0){
							let obj = metaInfo._objectData[property._name];
							json.properties[property._name].objectData = {};  //No I18N
							for(var key in obj){
								if(Array.isArray(obj[key])){
									json.properties[property._name].objectData[key] = {};
									let type = "string",defaultValue=obj[key][0],allowedValues=obj[key];
									if(obj[key].length===2 && ["true","false"].every(val=>obj[key].includes(val))){
										type = "boolean";
										defaultValue = obj[key][0]==="true"?true:false;
										allowedValues = [defaultValue,!defaultValue];
									}
									json.properties[property._name].objectData[key].type = type;
									json.properties[property._name].objectData[key].defaultValue = defaultValue;
									json.properties[property._name].objectData[key].allowedValues = allowedValues;
								}else if(typeof(obj) === "object"){
									json.properties[property._name].objectData[key]={};
									$.setCustomValues(obj[key],json.properties[property._name].objectData[key]);
									var dataType = json.properties[property._name].objectData[key].type;
									if(!dataType){
										json.properties[property._name].objectData[key].type = "string";
									}
								}else{
									$.setCustomValues(obj,json.properties[property._name]);
								}
							}
						}
					}					
				});
			}
			json.methods = $.constructMethods({
							toInclude:metaInfo._methods,
							toExclude:metaInfo._excludeMethods,
							toImport:metaInfo._cloneMethodsFrom
						});
			json.dependencies = metaInfo._dependencies;
			json.utilityFunctions = metaInfo._utilityFunctions;
			outputJson[component] = json;
		});
		const outputJsonString = JSON.stringify(outputJson,null,'\t')
		if(array){
			return outputJsonString;
		}else{
			$.setContent(path.join(__dirname,'../ui-comp-property.json'),outputJsonString);
		}
	},
	dryrun:(comps)=>{
		if(comps.every($.checkForMetaFiles)){
			console.log(compiler.compile(comps));
		}
	},
	alter:(mode,props)=>{
		const metaJsons = $.allUiComponents.map(uicomponent => path.join($.metaInfoPath,uicomponent,'meta.json'))
		metaJsons.forEach($[mode].bind(null,props))
	}
};

var cmd = process.argv[2].replace('--','');
var comps = process.argv.slice(3);
switch(cmd){
	case 'dryrun':{
		compiler.dryrun(comps);
	}
	break;
	case 'alter':{
		compiler.alter(process.argv[3],process.argv.slice(4));
	}
	break;
	case 'prepublish':{
		compiler.compile();
	}
	break;
	case 'update':{
		compiler.update();
	}
}

module.exports = compiler;
