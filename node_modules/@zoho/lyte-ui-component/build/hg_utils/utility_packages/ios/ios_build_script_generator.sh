#!/bin/bash
main()
{
	curdir=`pwd`
	input=$1
	config_file=/tmp/$RANDOM.txt
	xcode_proj=/tmp/$RANDOM.txt
	xcscheme_file=/tmp/$RANDOM.txt
	selected_configuration=""
	selected_proj=""
	selected_scheme=""
	config_regex='[0-9]'
	RepoValidation
	ReadProject
	getScheme
	getConfiguration
	ScriptConfiguration
}
RepoValidation()
{
	if [[ ! -d ${input}/.git ]] && [[ ! -d ${input}/.hg ]]
	then
		echo -e "Not a valid GIT/HG project folder. \nKindly provide cloned repository path"
		exit 1
	fi
	reponame=`basename ${input}`
	module_name=`echo ${reponame} | tr '[a-z]' '[A-Z]'`
	if [[ -z ${reponame} ]]
	then
		echo "Repository name not available."
		exit 1
	fi
	AskTPBranch
}
AskTPBranch()
{
	echo -e "\nKindly read and select/provide the correct value to configure the build script\n\nAre you using Thirdparty Branch [Yes/No]:"
	read tp
	if [[ ${tp} != "Yes" ]] && [[ ${tp} != "No" ]]
	then
		echo -e "\nOops. Please provide either Yes or No.\n"
		AskTPBranch
	else
		GetTPBranch
	fi
}
GetTPBranch()
{
	if [[ ${tp} == "Yes" ]]
	then
		echo "Thirdparty Branch Name :"
		read tp_branch_name
		if [[ -z ${tp_branch_name} ]]
		then
			echo "TP Branch Name is empty, Kindly provide.."
			GetTPBranch
		fi
	else
		tp_branch_name="BASE"
	fi
}
ScriptConfiguration()
{
	base_folder=`echo ${selected_proj} | cut -d "/" -f1`
	ProductSpecification
	OrderSpecification
	CommonVariables
	iOSTask
	#cat /tmp/ant.properties
}
ProductSpecification()
{

echo "#\$Id: $
product_name="${module_name}"
product_version="1.0.0"
debug=on
optimize=off
deprecation=off" > /tmp/ant.properties

}
CommonVariables()
{
echo "
#---------------------------------------------------------------------------------------------------------------#
#---------------------------------------- Common Variables -----------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------#

build_dir=\${basedir}/${module_name}
source_basedir=\${basedir}/..
tp_pkg=\${build_dir}/thirdparty_packages
tp_src=\${build_dir}/thirdparty_sources
up_pkg=\${build_dir}/utility_packages
pkg_dir=\${build_dir}/pkg
output_dir=\${build_dir}/output

#--------------------------------------- Thirdparty files Checkout --------------------------------------------#

cmtp_hgroot=https://anonymous:anon@cmsuite.csez.zohocorpin.com/integ/components
cmtp_hgco_label="$tp_branch_name"
cmtp_hgclone_dir=\${build_dir}

#--------------------------------------- IOS APP Script Variables ---------------------------------------------#

ios_app_projects="${xcprojname}"

"${xcprojname}"_configuration=${selected_configuration//\"}
"${xcprojname}"_xcode_project_name="${selected_scheme}"
"${xcprojname}"_xcode_project_dir="${base_folder}"

" >> /tmp/ant.properties

echo -e "\n\n\n ======= Build Script ant.properties Configured Successfully!! ===========\n
File available under ${input}/build \n\n\n"

for config in `echo ${selected_configuration//\"} | tr '[,]' '[ ]'`
do
	echo ${xcprojname}_${config}_scheme_name=${selected_scheme} >> /tmp/ant.properties
	if [[ ! -d ${input}/build/profiles/${xcprojname}/${config} ]]
        then
		echo -e "\n\n\n ** Important Note:\nProfiles not available for ${config} under ${input}/build/profiles/${xcprojname}/${config} folder, kindly check-in before creating build from cmtools.\n
		Provide the value for following defined variable in build/ant.properties\n
		${xcprojname}_${config}_profile_dir=\n"
		echo -e "${xcprojname}_${config}_profile_dir=
#(example: ${xcprojname}_${config}_profile_dir=build/profiles/<ProjectName>/<Configuration>)\n" >> /tmp/ant.properties
	else
		echo "${xcprojname}_${config}_profile_dir=build/profiles/${xcprojname}/${config}"
        fi

done

echo "
xcode_version=
#(example: xcode_version=Xcode_11_3)

pod_version=
#(example: pod_version=1.9.0)

pod_file_dir=
#(example: pod_version=native)
#[Be sure podfile should be like available under: native/Podfile]

ios_machine_name=integ-ios-2
#(example: integ-ios-2)
" >> /tmp/ant.properties

echo "Kindly add if you need ant task in ant.properties before calling iosapp task.
Refer following page for ant task: https://cm-wiki.csez.zohocorpin.com/#/Build?id=ant-task \n\n
"

}
OrderSpecification()
{
echo -e "
#---------------------------------------------------------------------------------------------------------------#
#---------------------------------------- Target Order ---------------------------------------------------------#
#---------------------------------------------------------------------------------------------------------------#

targetfull_order=checkout,ios
targetwindows_order=\${targetfull}
targetlinux_order=\${targetfull}
targetppm_order=\${targetfull}

local_order=\${targetfull}

#-----------------------------------------------------------------------------------------------------------------#
#---------------------------------------- Target Invocation order ------------------------------------------------#
#-----------------------------------------------------------------------------------------------------------------#

checkout_order=hgclone:cmtp

ios_order=iosapp:createipa
" >> /tmp/ant.properties

}

iOSTask()
{
	echo "

#--------------------------------------- iOS app generation ------------------------------------------------------#

createipa_ios_src_dir=\${source_basedir}
createipa_ios_src_includes=${base_folder}/** build/profiles/**
createipa_ios_machine_name=\${ios_machine_name}
createipa_ios_login=macbuild
createipa_xcode_version=\${xcode_version}
createipa_pod_command=pod _\${pod_version}_ install

	" >> /tmp/ant.properties

echo -e "\n\n

** Must check and provide the value for below variables in ${input}/build/ant.properties file **

xcode_version=

pod_version=

pod_file_dir=\n\n"

if [[ ! -d ${input}/build ]]
then
	mkdir -p ${input}/build
fi
cd ${curdir}
cp -rvf /tmp/ant.properties ${input}/build/ant.properties

}
ReadProject()
{
	if [ -d ${input} ]
	then
		cd ${input}
		xcode_project_path=`find . -type d -name "*.xcodeproj" | sed 's/^.\///g'`

		echo "${xcode_project_path}" > ${xcode_proj}

		echo -e "\nAvailable XcodeProject(s):\n"

		declare -A xcode_array
		xcode_key=0

		while IFS= read -r line
		do
			xcode_key="`expr ${xcode_key} + 1`"
			echo "${xcode_key}. ${line}"
			xcode_value=`echo \"${line}\" | sed 's/ /\\ /g'`
			xcode_array["${xcode_key}"]="${xcode_value}"
		done < "${xcode_proj}"

		echo -e "\n\nSelect any one xcode project number to create the build script(example: 1):\n"
		read project

		if [[ $project =~ $config_regex ]]
		then

			IFS=',' read -ra ADDR <<< "${project}"

			for xproj in "${ADDR[@]}"
			do
				if [ -z "${selected_proj}" ]
				then
					xcproj="${xcode_array[${xproj}]}"
					selected_proj="${xcproj//\"}"
				else
					continue
				fi
			done

                        if [[ -z ${selected_proj} ]]
                        then
                                echo "Provided number not available in the list. Kindly select available one."
        	        	ReadProject
			else
				echo "Selected Project is: ${selected_proj}"
				xcprojname=`basename ${selected_proj} | cut -d "." -f1`
				echo -e "--------------------------------------------------------------------------------------------------------------------------------"
                        fi			
	        else
	                echo -e "\n\nOops, Kindly provide mapped number of Project..\n"
        	        ReadProject
		fi

	else
		echo ".xcodeproj not found under ${input} .. Kindly provide valid one.."
		exit 1
	fi
	cd -
}
getScheme()
{
	cd ${input}
	scheme_dir="${selected_proj}/xcshareddata/xcschemes"
	scheme_cnt=0
	if [[ -d ${scheme_dir} ]]
	then
		schemenames=`find "${scheme_dir}" -type f -name "*.xcscheme"`
                echo "${schemenames}" > ${xcscheme_file}

                echo -e "\nAvailable Scheme(s):\n"

                declare -A scheme_array
                scheme_key=0

                while IFS= read -r line
                do
                        scheme_key="`expr ${scheme_key} + 1`"
                        echo "${scheme_key}. ${line}"
                        scheme_value=`echo \"${line}\" | sed 's/ /\\ /g'`
                        scheme_array["${scheme_key}"]="${scheme_value}"
                done < "${xcscheme_file}"

                echo -e "\n\nSelect any one Scheme number to create the build script(example: 1):\n"
                read scheme

                if [[ $scheme =~ $config_regex ]]
                then

                        IFS=',' read -ra ADDR <<< "${scheme}"

                        for xcs in "${ADDR[@]}"
                        do
                                if [ -z "${selected_scheme}" ]
                                then
                                        preselected_scheme="${scheme_array[${xcs}]}"
                                else
                                        continue
                                fi
                        done
			selected_scheme=`echo ${preselected_scheme} | rev| cut -d "/" -f1 | rev | cut -d "." -f1`
			if [[ -z ${selected_scheme} ]]
			then
				echo "Provided number not available in the list. Kindly select available one."
				getScheme
			else
                        	echo "Selected Scheme is: ${selected_scheme}"
				echo -e "--------------------------------------------------------------------------------------------------------------------------------"
			fi
                else
                        echo -e "\n\nOops, Kindly provide mapped number of Scheme..\n"
                        getScheme
                fi
	else
		echo "There is no .xcscheme found under ${selected_proj}"
		exit 1
	fi
	cd -
}
getConfiguration()
{
	cd ${input}
	pbxproj_file="${selected_proj}/project.pbxproj"
	if [[ -f "${pbxproj_file}" ]]
	then
		#cat ${xcode_project_path} | grep -Pzo "buildConfigurations[\s\S]*?;\n"
		configurations=`sed -n '/buildConfigurations/,/);/p' "${pbxproj_file}" | sed -n '/*/,/*/p' | cut -d "*" -f2 | sed 's/^ //g' | sed 's/ $//g' | grep -v ");" | grep -v "buildConfigurations = (" | sort -u`
	else
		pwd
		ls ${pbxproj_file}
		echo "There is no project.pbxproj file under ${selected_proj}"
		exit 1
	fi	

	echo "${configurations}" > ${config_file}

	echo -e "\nAvailable configurations:\n"

	declare -A config_array
	config_key=0

        while IFS= read -r line
        do
		config_key="`expr ${config_key} + 1`"
		echo "${config_key}. ${line}"
		config_value=`echo \"${line}\" | sed 's/ /\\ /g'`
		config_array["${config_key}"]="${config_value}"
	done < "${config_file}"
	
	echo -e "\n\nSelect needed configuration number to create the build script(Provide the value as comma separated, example: 1,2):\n"
	read configuration

	if [[ $configuration =~ $config_regex ]]
	then

		IFS=',' read -ra ADDR <<< "${configuration}"
	
		for sconfig in "${ADDR[@]}"
		do
			if [ -z "${selected_configuration}" ]
			then
				selected_configuration="${config_array[${sconfig}]}"
			else
				selected_configuration="${selected_configuration},${config_array[${sconfig}]}"
			fi
		done
		if [[ -z ${selected_configuration} ]]
		then
			echo "Provided number not available in the list. Kindly select available one."			
			getConfiguration
		else
			echo "Selected Configuration is: ${selected_configuration}"
			echo -e "--------------------------------------------------------------------------------------------------------------------------------"
		fi
	else
		echo -e "\n\nOops, Kindly provide mapped number of configuration..\n"
		getConfiguration

	fi
	cd -

}
main $*
