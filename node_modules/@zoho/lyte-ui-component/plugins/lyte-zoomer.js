(function () {
    $L.zoomer = function (params) {
        let container = document.createElement("DIV"), controlKeyPressed = false,
            insideOutFlag = false, ignoreParentELems = [],
            prevFlagVal = undefined;
        let currentValue, currentCoord = {},
            previousCoord = { 
                x: 0,
                y: 0
            };
        $L(container).addClass("lyteZoomContainer");

        let controlKey, altControl = false, metaControl = false, shiftControl = false; 
        let windowWidth = window.innerWidth;

        //  params : controlKey,className
        function setControlKey() { 
            if (params && params.controlKey) {
                controlKey = params.controlKey; // altKey, metaKey, shiftKey
            } else { 
                controlKey = "altKey";
            }
            if (controlKey === "altKey") { altControl = true; }
            else if (controlKey === "shiftKey") { shiftControl = true; }
            else if (controlKey === "metaKey") { metaControl = true; }
        }
        function setContainerCSS() { 
            let maxWidth = windowWidth * (3 / 4);
            container.style.maxWidth = maxWidth + "px";

            if (params && params.className) { 
                $L(container).addClass(params.className)
            }
            $L("body")[0].appendChild(container);
        }
        function getIgnoreParentElems() { 
            ignoreParentELems = $L("[ignore-parent]:not([ignore-parent = 'false'])");
        }
        function resetContainer() { 
            $L(container).removeClass("showZoomContainer")
            container.style.removeProperty("top");
            container.style.removeProperty("right");
            container.style.removeProperty("left");
        } 

        setControlKey();
        setContainerCSS();
        getIgnoreParentElems();
        
        $L(document).mousemove(function (e) {
            getIgnoreParentElems();
            let windowScrollY = window.scrollY,
                windowScrollX = window.scrollX;

            if (altControl && e.altKey) { renderContainer(); }
            else if (shiftControl && e.shiftKey) { renderContainer(); }
            else if (metaControl && e.metaKey) { renderContainer(); }
          
            function renderContainer() {
                controlKeyPressed = true;
                let range, foundNodeObj;
                range = getRange(e.clientX, e.clientY);
                let checkNodeVal = checkIfOverText(range,e)
                if (checkNodeVal === undefined || checkNodeVal) {
                    foundNodeObj = $L(e.target).nodeFinder();
                } else {
                    return
                };
                let target, targetRect, targetTop, targetLeft, targetBottom, targetRight, targetHeight;
                for (let index = 0; index < ignoreParentELems.length; index++) {
                    if (e.target === ignoreParentELems[index]) { 
                        return;
                    }                   
                }
                try { 
                    target = foundNodeObj.finalTarget[0],
                    foundNodeObj.finalTargetContext = foundNodeObj.finalTargetContext.trim(),
                    targetRect = target.getBoundingClientRect(),
                    targetTop = targetRect.top,
                    targetLeft = targetRect.left,
                    targetBottom = targetRect.bottom,
                    targetRight = targetRect.right,
                    targetHeight = targetRect.height;
                    
                    let containerText = foundNodeObj.finalTargetContext;

                    if (foundNodeObj.finalTargetContext && foundNodeObj.finalTargetContext.length !== 0) { 
                        $L(container).addClass('showZoomContainer')

                        container.innerText = containerText;
                        
                        let containerRect = container.getBoundingClientRect(),
                            containerHeight = containerRect.height,
                            containerWidth = containerRect.width;
                        
                        if (window.innerHeight - targetBottom > containerHeight) {
                            container.style.top = targetBottom + windowScrollY + 5 + "px";
                        } else { 
                            container.style.top = (targetTop - 5 - containerHeight) + windowScrollY + "px"
                        }
                        if ((targetLeft + containerWidth) > windowWidth) {
                            container.style.removeProperty("left");
                            container.style.right = "0px";
                        } else { 
                            container.style.left = targetLeft + windowScrollX + "px";
                        }
                        // if (window.innerWidth - targetRight > containerWidth) {
                        //     container.style.left = targetLeft + windowScrollX + "px";
                        //     container.style.right = "none";
                        // } else { 
                        //     container.style.right = "0px";
                        //     container.style.left = "none";
                        // }
                    }  
                } catch (e) {
                    console.error(e)
                    }
            }
            function getRange(xPos, yPos) { 
                let range;
                if (checkBrowser() === "Firefox") { 
                    range = document.caretpositionFromPoint(xPos, yPos)
                } else { 
                    range = document.caretRangeFromPoint(xPos, yPos)
                }
                return range;
            }
            function changeCoords() { 
                previousCoord.x = currentCoord.x;
                previousCoord.y = currentCoord.y;
            }
            function changePrevFlag() {
                prevFlagVal = insideOutFlag;
            }
            function checkIfOverText(range, eve) { 
                if (range.commonAncestorContainer.nodeValue === null) { 
                    return true;
                }

                currentValue = range.startOffset;
                currentCoord.x = eve.clientX;
                currentCoord.y = eve.clientY;

                let Xdiff = Math.abs(previousCoord.x - currentCoord.x),
                    Ydiff = Math.abs(previousCoord.y - currentCoord.y);
                let fontSize = parseInt(window.getComputedStyle(range.commonAncestorContainer.parentNode).fontSize),
                    subtractValue = fontSize / 1.5;
                    window.minValue = 0, window.maxValue = range.commonAncestorContainer.nodeValue.length;
                
                    fontSize -= subtractValue;
                
                if (Ydiff > Xdiff) {
                    if (currentCoord.x === previousCoord.x && currentCoord.y < previousCoord.y) {
                        if (currentValue > minValue && currentValue < maxValue && range.commonAncestorContainer.parentNode === eve.target) {
                            window.direction = "up";
                            insideOutFlag = true;
                        } else {
                            insideOutFlag = false;
                            window.isOut = true;
                        }
                    } else if (currentCoord.x === previousCoord.x && currentCoord.y > previousCoord.y) { 
                        if (currentValue > minValue && currentValue < maxValue && range.commonAncestorContainer.parentNode === eve.target) {
                            window.direction = "down";
                            insideOutFlag = true;
                        } else {
                            insideOutFlag = false;
                            window.isOut = true;
                        }
                    }
                } else { 
                    if (currentCoord.x > previousCoord.x && currentCoord.y === previousCoord.y) {
                        if (currentValue > minValue && currentValue < maxValue && range.commonAncestorContainer.parentNode === eve.target) {
                            window.direction = "right";
                            insideOutFlag = true;
                        } else {
                            insideOutFlag = false;
                            window.isOut = true;
                        }
                    } else if (currentCoord.x < previousCoord.x && currentCoord.y === previousCoord.y) { 
                        if (currentValue > minValue && currentValue < maxValue && range.commonAncestorContainer.parentNode === eve.target) {
                            window.direction = "left";
                            insideOutFlag = true;
                        } else {
                            insideOutFlag = false;
                            window.isOut = true;
                        }
                    }
                }

                changeCoords();
                if (prevFlagVal === false && insideOutFlag === true) {
                    if (currentValue === minValue) {
                        let currentX = eve.clientX, currentY = eve.clientY,
                            rangeAtPoint = getRange(currentX + fontSize, currentY);
                        
                        if (rangeAtPoint.startOffset > minValue && rangeAtPoint.startOffset < maxValue && range.commonAncestorContainer.parentNode === rangeAtPoint.commonAncestorContainer.parentNode) {
                            changePrevFlag()
                            return true;
                        } else {
                            rangeAtPoint = getRange(currentX, currentY + fontSize);
                            if (rangeAtPoint.startOffset > minValue && rangeAtPoint.startOffset < maxValue && range.commonAncestorContainer.parentNode === rangeAtPoint.commonAncestorContainer.parentNode) {
                                changePrevFlag()
                                return true;
                            } else {
                                changePrevFlag()
                                return false;
                            }
                        }
                    } else if (currentValue === maxValue) {
                        let currentX = eve.clientX, currentY = eve.clientY,
                            rangeAtPoint = getRange(currentX - fontSize, currentY);
                        if (rangeAtPoint.startOffset > minValue && rangeAtPoint.startOffset < maxValue && range.commonAncestorContainer.parentNode === rangeAtPoint.commonAncestorContainer.parentNode) {
                            changePrevFlag()
                            return true;
                        } else {
                            rangeAtPoint = getRange(currentX, currentY - fontSize);
                            if (rangeAtPoint.startOffset > minValue && rangeAtPoint.startOffset < maxValue && range.commonAncestorContainer.parentNode === rangeAtPoint.commonAncestorContainer.parentNode) {
                                changePrevFlag()
                                return true;
                            } else {
                                changePrevFlag()
                                return false;
                            }
                        }
                    } else if (currentValue > minValue && currentValue < maxValue) {
                        changePrevFlag()
                        return true;
                    }
                    // console.log("going in")
                } else if (prevFlagVal === false && insideOutFlag === true) {
                    changePrevFlag()
                    return true;
                } else if (prevFlagVal === true && insideOutFlag === false) {
                    changePrevFlag()
                    return false;
                } else if (prevFlagVal === false && insideOutFlag === false) { 
                    resetContainer();
                    changePrevFlag();
                    return false;
                }
                changePrevFlag();
            }
            function checkBrowser(){ 
                var uA = window.navigator.userAgent;
                if ((window.isBrowser=uA.indexOf("OPR"))!=-1) {
                    return "Opera";
                }
                 else if ((isBrowser=uA.indexOf("Edg"))!=-1) {
                    return "Microsoft Edge";
                }
                 else if ((isBrowser=uA.indexOf("MSIE"))!=-1) {
                    return "Microsoft Internet Explorer";
                }
                 else if ((isBrowser=uA.indexOf("Chrome"))!=-1) {
                    return "Chrome";
                }
                 else if ((isBrowser=uA.indexOf("Safari"))!=-1) {
                    return "Safari";
                }
                else if ((isBrowser = uA.indexOf("Firefox")) != -1) {
                    return "Firefox";
                }
              }
       })
            
        $L(document).keyup(function (ev) {
            let keyName;
            if (controlKey === "altKey") { keyName = "Alt"; }
            else if (controlKey === "shiftKey") { keyName = "Shift"; }
            else if (controlKey === "metaKey") { keyName = "Meta"; }
          if (ev.key === keyName && controlKeyPressed) { 
              controlKeyPressed = false;
              insideOutFlag = false;
              window.isOut = false;
              resetContainer();
        }           
     })
    };
      
})();
