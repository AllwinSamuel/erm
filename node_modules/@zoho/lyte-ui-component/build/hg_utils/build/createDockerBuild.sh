
#!/bin/bash
#$Id$
#set -x
main()
{
    setBuildVariables $*
}
setBuildVariables()
{
    WORK_DIR=`pwd`
    CONF_FILE=$1
    ARG=$2
    BUILD_ID=$3
    PRD_TXT=$4
    MACHINE_TIME=$5
    GETTIME_TXT=$6
    CLASS_PATH=$7

    DOCKER_USER="root"
    . ${PRD_TXT}
    resolveTeamSpecificInfo
    if [ ${GROUP_ID} -ne 30 ]; then
    . ${CONF_FILE}
    fi

    #if [ `eval echo \\"${${ARG}_JAVA_HOME}\"` ]
    #then
    #    export JAVA_HOME=`eval echo \\${${ARG}_JAVA_HOME}`
    #    export PATH=$JAVA_HOME/bin:$PATH
    #fi
    PRODUCT_NAME=`echo $productname | tr [:lower:] [:upper:]`
    changeJDK
    getTimedetails
    getPackageDetails
    #userIDngroupIDChange
    echo "JAVA_HOME=\"${JAVA_HOME}\"" >> ${PRD_TXT}
    echo "ANT_HOME=\"${ANT_HOME}\"" >> ${PRD_TXT}
    doDockerBuild
}

resolveTeamSpecificInfo()
{
        if [ ! -z "${TEAM_SPECIFIC_INFO}" ]
        then
                for i in `echo "${TEAM_SPECIFIC_INFO}" | tr "," " "`
                do
                        export "$i"
                done
        fi
        if [ -n "${MULTIPLE_ENCODING_BRANCHES}" ]
        then
                for i in `echo "${MULTIPLE_ENCODING_BRANCHES}" | tr "," " "`
                do
                     if [ "$i" = "${ARG}"  ]
                     then
                         export JAVA_TOOL_OPTIONS="-Dfile.encoding=utf8 -Dsun.jnu.encoding=utf8"
                     fi
                done
        fi

}

getPackageDetails()
{

build_path=`echo $PATH | sed "s@/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:@@g"`
install_pkg=""

for i in `echo $build_path | tr ":" " "`
do
   case $i in
   `echo $i | grep "java"`)
        java_v=`echo ${i} | cut -d "/" -f4`
        install_pkg="java:$java_v $install_pkg"
      ;;

   `echo $i | grep "ant"`)
        ant_v=`echo ${i} | cut -d "/" -f4`
        install_pkg="ant:$ant_v $install_pkg"

      ;;

   `echo $i | grep "nvm"`)
        node_v=`echo ${i} | cut -d "/" -f7`
        install_pkg="node:$node_v $install_pkg"

      ;;
    `echo $i | grep "jflex"`)
        jflex_v=`echo ${i} | cut -d "/" -f4`
        install_pkg="jflex:$jflex_v $install_pkg"
      ;;

    `echo $i | grep "scalapbc"`)
        scalap_v=`echo ${i} | cut -d "/" -f4`
        install_pkg="scalapbc:$scalap_v $install_pkg"

      ;;

    `echo $i | grep "gradle"`)
        gradle_v=`echo ${i} | cut -d "/" -f4`
        install_pkg="gradle:$gradle_v $install_pkg"
    ;;


   *)

   esac


done
echo "INSTALLED_PACKAGE_DETAILS=\"${install_pkg}\"" >> ${PRD_TXT}


}

getTimedetails()
{
	mdate=""
        dockerdate=""
        #cd ${CLASS_PATH}
        getdocker_time=`/usr/java/jdk1.7.0_55/bin/java GetTime`
        echo "Docker Time=\"${getdocker_time}\"" >> ${GETTIME_TXT}
        echo "Build Machine Time=" $MACHINE_TIME >> ${GETTIME_TXT}
        #cd -
	mdate=`cat ${GETTIME_TXT} | grep -w "Build Machine Time" | cut -d "=" -f2`
        dockerdate=`cat ${GETTIME_TXT} | grep -w "Docker Time" | cut -d "=" -f2`

        echo $mdate
        echo $dockerdate

        getTime_diff "Machine and Docker time Difference" "$mdate" "$dockerdate"


}

getTime_diff()
{
    Message="$1"
    time1="$2"
    time2="$3"

    if [ `echo $time1 | cut -d " " -f3` = `echo $time2 | cut -d " " -f3` ]
    then
	diff1=`date -d "$time1" +%s`
        diff2=`date -d "$time2" +%s`
        time_diff=$(( diff2 - diff1 ))
        mins=$( expr $time_diff / 60 )
        secs=$( expr $time_diff % 60 )

        echo $mins minutes and $secs seconds differ
    fi
    if  [ `echo $mins` > 5 ]
    then
            mail -r "integration-team@zohocorp.com" -s "Machine time and docker container time ." "cm-notify@zohocorp.com"<<-EOF


            Build machine time and docker container time both are differ more than 5 mints .

EOF
    fi


}


changeJDK()
{
    jdk_val=`echo ${JAVA_HOME}| grep -E "(zulu|openjdk)"`
    if [ "${jdk_val}" = "" ]
    then
        exclude_file="${WORK_DIR}/hg_utils/resources/exclude_jdk_pdt.txt"
        if [ -f "${exclude_file}" ]
        then
            PDT_EXCLUDED=`cat ${exclude_file} | grep -w ${PRODUCT_NAME}`
        fi
        if [ "${PDT_EXCLUDED}" = "" ]
        then
            br_check=`echo ${ARG} | grep -i "_OPENJDK"`
            zoho_services=`grep -E "http://build/framework/saslite/|https://build.zohocorp.com/framework/saslite/" ${WORK_DIR}/ant.properties`
            if [ "${br_check}" != "" -o "${zoho_services}" != "" ]
            then
                 open_jdk_needed="YES"
            else
                 open_jdk_needed="NO"
            fi
            if [ "${open_jdk_needed}" = "YES" -a -d "/usr/java/zulujdk8.0_181" ]
            then
                export JAVA_HOME="/usr/java/zulujdk8.0_181"
                export PATH=$JAVA_HOME/bin:$PATH
            fi
        fi
    fi
}
userIDngroupIDChange()
{
    dockerCommandAvailable=`grep -irwl "sudo docker run\|docker run" ../ | grep -v "hg_utils"`
    if [ -n "${dockerCommandAvailable}" ]
    then
        for file in `grep -irwl "sudo docker run\|docker run" . | grep -v "hg_utils"`
        do
            perl -w -e "s@docker run @docker run --user 1001:1001 @g" -p -i "$file"
        done
    fi
}

getOsversion()
{
if [ -f /etc/redhat-release ]
then

centos5=`cat /etc/redhat-release | grep "CentOS release 5"`
centos6=`cat /etc/redhat-release | grep "CentOS release 6"`

under_usr=`ls /usr/local/bin`
echo "Global_install_linux_pkg=\"${under_usr}\"" >> ${WORK_DIR}/Linux_pkg_details.txt

if [ "${centos5}" != "" ]
then
        echo "centos 5"
        echo "Product_name=\"${PRODUCT_NAME}\"" >> ${WORK_DIR}/OS_details_5.txt


elif [ "${centos6}" != "" ]
then
        echo "centos 6"
        echo "Product_name=\"${PRODUCT_NAME}\"" >> ${WORK_DIR}/OS_details_6.txt

fi
fi
}

find_ant_duplicate_task()
{
	if [ -f "ant.properties" -a -f "hg_utils/utility_packages/ant_duplicate_task/find_ant_duplicate_task.xml" ]
	then
           cp -rf hg_utils/utility_packages/ant_duplicate_task/find_ant_duplicate_task.xml .
           ant ${BUILD_OPTS} -q -f find_ant_duplicate_task.xml > /dev/null 2>&1
	fi
}

doDockerBuild()
{
    if [ "${PRODUCT_NAME}" != "HG_UTILS" ]; then
    sed -i "s@https://build.zohocorp.com/zoho/lyte@http://build/zoho/lyte@g" `find ./ -type f -iname "package.json"`
    sed -i "s@cmtools.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" ${WORK_DIR}/../
    sed -i "s@integ-cm.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" ${WORK_DIR}/../
    fi
    getOsversion
    if [ "$DOCKER_USER" != "root" ]
    then
     	sudo chown -R ${DOCKER_USER}.${DOCKER_USER} ../ ../../logs

      if [ "${DOCKER_USER}" = "cstore" ]
      then
	    sudo cp -fv /root/.wgetrc /home/cstore/
	    sudo chown -R cstore.cstore /home/cstore/.wgetrc
        sudo chown -R cstore:cstore /home/cstore/.ssh
      fi
      if [ "${DOCKER_USER}" = "graphdb" ]
      then
	    sudo cp -fv /root/.wgetrc /home/graphdb/
	    sudo chown -R graphdb:graphdb /home/graphdb/.wgetrc
            sudo chown -R graphdb:graphdb /home/graphdb/.ssh
            sudo chown -R graphdb:graphdb /home/graphdb/.ssh/id_rsa
            sudo chown -R graphdb:graphdb /home/graphdb/.ssh/id_rsa.pub
      fi
    fi

    /usr/ant/apache-ant-1.10.12/bin/ant -f ${WORK_DIR}/pre_build.xml ${BUILD_OPTS} >> pre_build.log 2>&1

    execution_status=""
    if [ ! -z "${BUILD_FUNCTION}" -a "${PATCH_BUILD}" != "TRUE" ]
    then
        ${BUILD_FUNCTION}
        execution_status="$?"
    elif [ "${CHOOSE_BUILD_TYPE}" = "CLIENT" ]
    then
        if [ ! -z "${CLIENT_BUILD_FUNCTION}" ]
        then
            ${CLIENT_BUILD_FUNCTION}
            execution_status="$?"
        fi
    else
       if [ "${BINARY_ZIP_URL}" != "" ]
	then
		echo ${BINARY_ZIP_URL}
		ant -f ${WORK_DIR}/build_binary.xml -Durl=${BINARY_ZIP_URL} ${BUILD_OPTS}
		sed -ibak -e 's/calltarget://g' -e 's/calltask://g' -e 's/postbuild://g' -e '/^$/d' build.log

	else
		find_ant_duplicate_task
		sed -i -e "s@https://build.zohocorp.com/zoho/lyte@http://build/zoho/lyte@g" -e "s@http://build.zohocorp.com/zoho/lyte@http://build/zoho/lyte@g" -e "s@https://build.zohocorp.com/zoho/crux_components@http://build/zoho/crux_components@g" `find ../ -type f -iname "package.json"`
	        ant ${BUILD_OPTS}
        	execution_status="$?"
	fi
    fi
    if [ "${PRODUCT_NAME}" != "ZOHOBOOKS" -a "${PRODUCT_NAME}" != "COMPONENTS" -a "${PRODUCT_NAME}" != "ZOHOFINANCE_FRAMEWORK" -a "${PRODUCT_NAME}" != "ZOHOISSUING_SERVER" -a "${PRODUCT_NAME}" != "PAYROLL_SERVER" -a "${PRODUCT_NAME}" != "PRACTICE_SERVER" -a "${PRODUCT_NAME}" != "ZOHOSTART" -a "${PRODUCT_NAME}" != "TAXFILING_ENGINE" ]
    then
      java_file_avail_st="`find ${WORK_DIR}/../ -iname "*.java" | grep -Ev "utility_packages|hg_utils|node_modules|bower_components" | wc -l`"
      echo "JavaFileAvailabilityStatus command find ${WORK_DIR}/../ -iname "*.java" | grep -Ev "utility_packages\|hg_utils" | wc -l and result : ${java_file_avail_st}" >> post_build.log 2>&1

      if [ $execution_status -eq 0 -a $java_file_avail_st -gt 0 ]
      then
        BUILD_OPTS=`echo ${BUILD_OPTS} | sed "s@|@ @g"`
	if [ "${PRODUCT_NAME}" == "SASLITE" ]
	then

		SASLITE_BLD_OPTIONS=`echo ${BUILD_OPTS} | cut -d "%" -f1 | tr ":" " "`
        	cd ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build
	        ant -f ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/post_build.xml ${SASLITE_BLD_OPTIONS} >> post_build.log 2>&1
		sed -ibak -e 's/calltarget://g' -e 's/calltask://g' -e 's/postbuild://g' -e '/^$/d' post_build.log
        	cd -
	else

	POST_BUILD_OPTS=`echo $BUILD_OPTS | sed -e 's@\^@ @g'`

        if [ -f ${WORK_DIR}/post_build.xml ]
        then
          /usr/ant/apache-ant-1.10.12/bin/ant  -f ${WORK_DIR}/post_build.xml ${POST_BUILD_OPTS} >> post_build.log 2>&1
        elif [ -f ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/post_build.xml ]
          then
          /usr/ant/apache-ant-1.10.12/bin/ant  -f ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/post_build.xml ${POST_BUILD_OPTS} >> post_build.log 2>&1
        fi


        sed -ibak -e 's/calltarget://g' -e 's/calltask://g' -e 's/postbuild://g' -e '/^$/d' post_build.log
        POSTBUILD_STATUS=`grep -E "BUILD FAILED" post_build.log`
        POSTBUILD_NOTIFY_MAIL_ID="integration-team@zohocorp.com"
        POST_BUILD_LOG=`cat post_build.log`
        if [ -n "${POSTBUILD_STATUS}" ]
        then
          mail -r "integration-team@zohocorp.com" -s "Post build is failed in Branch ${ARG} of ${PRODUCT_NAME}_${BUILD_ID}" "${POSTBUILD_NOTIFY_MAIL_ID}"<<-EOF
          ${POST_BUILD_LOG}

          Post build process is failed .

EOF
        fi
 if [ "${PRODUCT_NAME}" = "DESK_CLIENT_APP" -a "${Diff_Report_Needed}" = "Yes" ]
 then
     echo "HashDiffReport Generation Tasks Started At $(date "+%Y-%m-%d %T")"
     LATEST_MILESTONE_BUILD_PATH="`echo ${LATEST_MILESTONE_URL} | sed -e "s@https://build.zohocorp.com@/zoho/build/downloads/dload@g"`"
     echo "LATEST_MILESTONE_BUILD_PATH IS ::: ${LATEST_MILESTONE_BUILD_PATH}"
     echo "WORK_DIR IS :::: ${WORK_DIR}"
     echo "BUILD_BASE_DIR IS :::: ${BUILD_BASE_DIR}"
     cp -r ${WORK_DIR}/../../conf/Diff_report_generation_script ${WORK_DIR}/
     cd ${WORK_DIR}/Diff_report_generation_script
     current_build_zip_path="`find ${WORK_DIR}/../ -maxdepth 4 -type f -iname "manifest.json" 2> /dev/null`"
     echo "CURRENT-BUILD-ZIP-PATH :::: ${current_build_zip_path}"
     node hashDiffReport.js ${current_build_zip_path} ${LATEST_MILESTONE_BUILD_PATH}/manifest.json hashdiffreport.html
     cd -
     echo "HashDiffReport Generation Tasks Ended At $(date "+%Y-%m-%d %T")"
 fi
fi
        exit 0
      else
       exit 1
      fi
    fi
}
main $*
