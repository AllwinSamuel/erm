const fs = require('fs');
const path = require('path');
const process = require('process');
const { spawn } = require("child_process");
var bowerJson = require('bower-json');

function createBowerComponentsDirectory(rootdir, directory){
        console.log(rootdir + "/" + directory);
	if(!fs.existsSync(rootdir + "/" + directory)){
		fs.mkdirSync(rootdir + "/" + directory, {recursive: true});
	}
}
function bowerInstall(packageNdversion){
const { spawn } = require('child_process');

const command = 'bower install --allow-root ' + packageNdversion;
const options = { shell: true };

// Spawn the process
const child = spawn(command, options);

// Capture stdout
child.stdout.on('data', (data) => {
  console.log(`stdout: ${data}`);
});

// Capture stderr
child.stderr.on('data', (data) => {
  console.error(`stderr: ${data}`);
});

// Handle process close event
child.on('close', (code) => {
  console.log(`child process exited with code ${code}`);
});

// Handle process error event
child.on('error', (err) => {
  console.error('Failed to start subprocess.', err);
});
}
function executeCommands(command, sub_command1, sub_command2){
	console.log("Current working directory : " + process.cwd());
	console.log("Executing the " + command + " " + sub_command1 + " " + sub_command2);
        const options = { shell: true };
	const exec = spawn( command, [ sub_command1, sub_command2 ], options );
	exec.stdout.on("data", data => {
		console.log(`stdout: ${data}`);
	});
	exec.stderr.on("data", data => {
		console.log(`stderr: ${data}`);
	});
	exec.on('error', (error) => {
		console.log(`Failed to start subprocess: ${error.message}`);
	});
	exec.on("close", code => {
		console.log(`child process exited with code ${code}`);
	});
}
function renameBowerConfigFile(dir, state){
        console.log('Directory is ::::: ' + dir);
        console.log('State is ::::: ' + state);
	if (state == "begin"){
		source = "bower.json"
		destination = "bower_orig.json"
	}else if (state == "end"){
		source = "bower_orig.json"
		destination = "bower.json"
	}
	console.log("Source File is :::: " + dir +  source);
	console.log("Destination File is :::: " + dir + destination);
	fs.rename(dir + source, dir + destination, (error) => {
		if(error){
			console.log(error);
		}else{
			console.log("File renamed Successfully!");
		}
	});
}
function parseJSON(dir, poductname){
	createBowerComponentsDirectory(dir, "bower_components");
	let repo_regex = /^(http[s]:\/\/[zb]*git.*)/g;
	let build_regex = /^(http[s]?:\/\/(build.*)\/)/g;
	bowerJson.read(dir + 'bower.json', function (err, json) {
		if (err) {
			console.error('There was an error reading the file');
			console.error(err.message);
			return;
		}
		if(productname != "ZOHO_MEETING_2_0"){
			renameBowerConfigFile(dir, "begin");
		}
		console.log("Current working directory : " + process.cwd());
		if (json.hasOwnProperty('dependencies')){
			for(const [dependency_name, dependency_value] of Object.entries(json['dependencies'])){
				console.log(dependency_value);
				if (build_regex.test(dependency_value) && !(/^\/\//g.test(dependency_name.trim()))){
					console.log(build_regex.test(dependency_value));
					let dependency_url = dependency_value.replace("http://build/", "/zoho/build/downloads/dload/").replace("https://build.zohocorp.com", "/zoho/build/downloads/dload/").replace('https://build/', '/zoho/build/downloads/dload/');
					console.log("Inside build_regex " + dependency_url);
					createBowerComponentsDirectory(dir, "bower_components/" + dependency_name.trim());
					console.log("unzip", "-oqd " + dir + "bower_components/" + dependency_name.trim(), dependency_url);
					executeCommands("unzip", "-oqd" + dir + "bower_components/" + dependency_name.trim(), dependency_url);
				}else if(repo_regex.test(dependency_value) && !(/^\/\//g.test(dependency_name.trim()))){
					console.log("Inside repo_regex " + dependency_value);
					console.log("bower install --allow-root " + dependency_value);
					//executeCommands("bower", "install --allow-root ", dependency_value);
					bowerInstall(dependency_value)
				}else{
					console.log("bower install --allow-root " + dependency_name + "@" + dependency_value);
					//executeCommands("bower", "install --allow-root ", dependency_name + "@" + dependency_value);
					bowerInstall(dependency_name + "@" + dependency_value)
				}
			}
		}
	});
}
const arguments = process.argv.slice(2)[0].split(",");
const directory = arguments[0];
const productname = arguments[1];
parseJSON(directory, productname);
console.log("parseJSONCompleted....")
renameBowerConfigFile(directory, "end");
console.log("JSON File Replacement Completed ....")
