#!/bin/sh
[ $1 ] || { echo "Usage: $0 <SOURCE FOLDER>"; exit 1; }
main()
{
    workdir=$(pwd)
    project_dir="$1"
    repoList="google jcenter mavenCentral gradlePluginPortal"
    repository_types="buildscript allprojects android pluginManagement dependencyResolutionManagement"
    if [ -d ${project_dir} ]
    then
        findGradlefile
    else
	    echo "${project_dir} not available.. Kindly check the provided project dir."
    fi
}
findGradlefile()
{
        gradlePropPath=$(find ${project_dir} -type f -name "gradle.properties")
	gradleFileList=$(find ${project_dir} -type f -name "*.gradle*")

        project_type_kts_cnt=0
        project_type_groovy_cnt=0
	for gprop in $(echo $gradlePropPath)
	do
	    grep -q "kotlin.code.style=official" ${gprop}
            if [ $? -eq 0 ]
	    then
                project_type_kts_cnt=$(expr $project_type_kts_cnt + 1)
		project_type="kts"
	    else
                project_type_groovy_cnt=$(expr $project_type_groovy_cnt + 1)
		project_type="groovy"
	    fi
	done

        if [ ${project_type_kts_cnt} -gt 0 ]
	then
            project_type="kts"
        elif [ ${project_type_groovy_cnt} -gt 0 ]
        then
            project_type="groovy"
	else
            project_type="groovy"
	fi

	for file in $(echo $gradleFileList)
	do
            if [ -f ${file} ]
	    then
		#findInRepo
	        #repoEntryChanges
	        gradlefilename=$(basename $file)
	        fileextension=${gradlefilename##*.}
		grep -q "forRepository" $file
		if [ $? -eq 0 ]; then
		   repoMethod="forRepository"
		else
		   repoMethod="repositories"
		fi
	        if [ ${fileextension} = "kts" ]
	        then
		    gradleChange "kts"
	        else
                    if [ "${project_type}" = "kts" ]
                    then
                        gradleChange "kts"
                    else
		        gradleChange "groovy"
                    fi
    	        fi
	    fi
	done
}

gradleChange()
{
repoMode="${1}"
sed -i ':a; N; $!ba; s/'${repoMethod}'\s*{/'${repoMethod}' {/g' $file

## New line will be added if mavenrepo entry found in single line ##
maven_match_cnt=0
grep -wn "${repoMethod} { maven" $file | grep -Pv "//.*https?://|/\*" | while read -r matchline;
do
    maven_match_start_line=$(echo ${matchline} | cut -d ":" -f1)
    if [ ${maven_match_cnt} -eq 0 ]
    then
       maven_start_line=${maven_match_start_line}
    else
       maven_start_line=$(expr ${maven_match_cnt} \* 1 + ${maven_match_start_line})
    fi
    sed -i "${maven_start_line}s/${repoMethod} {/&\n/" $file
    if [ $? -eq 0 ]
    then
       echo "------- LineNo: ${maven_start_line} New line added after ${repoMethod} function.   -------"
       maven_match_cnt=$(expr ${maven_match_cnt} + 1)
    fi
done

## Maven web cache repo URL will be added in begin of repositories or forRepository function. ##
for reptype in ${repository_types}
do
       sed -i ':a; N; $!ba; s/'${reptype}'\s*{/'${reptype}' {/g' $file
       grep -wn "${reptype} " $file | grep -v "//\|/\*" | while read -r line;
       do
       start_line=$(echo ${line} | cut -d ":" -f1)
       end_line=$(awk "/^}/ && NR>$start_line {print NR; exit}" "$file")
       publish_method_found=$(sed -n "${start_line},${end_line}p" $file | grep "publishing")
       repo_match_lineNumber=$(awk "NR >= $start_line && NR <= $end_line && !/^[[:space:]]*\/\// && /$repoMethod / {print NR}" "$file")
       if [ "${repo_match_lineNumber}" != "" ]
       then
	       grep_cnt=0
	       for repoline in ${repo_match_lineNumber}
	       do
                 commented_line_check=$(sed -n "${repoline}p" $file | grep "${repoMethod}" | grep -v "//\|/\*")
                 if [ "${commented_line_check}" != "" ]
		 then

	           if [ ${grep_cnt} -eq 0 ]
	           then
	             repo_start_line=${repoline}
	             repo_end_line=$(awk "/^}/ && NR>$repo_start_line {print NR; exit}" "$file")
                   else
		     repo_start_line=$(expr $grep_cnt \* 7 + ${repoline})
		     repo_end_line=$(awk "/^}/ && NR>$repo_start_line {print NR; exit}" "$file")
		   fi
		   repo_match_found=$(sed -n "${repo_start_line},${repo_end_line}p" $file | grep "zartifacts.csez.zohocorpin.com/repository/android-cache")
		   repo_startline_match=$(sed -n "${repo_start_line}p" $file | grep "maven")
	       
	           if [ "${repo_match_found}" = "" -a "${publish_method_found}" = "" -a "${repo_startline_match}" = "" ]
	           then
	             if [ "${repoMode}" = "kts" ]
		     then
          sed -i "${repo_start_line}s|^.*$|${repoMethod} {\n\
\         maven {\n\
\         url = uri(\"https://zartifacts.csez.zohocorpin.com/repository/android-cache/\")\n\
\         credentials {\n\
\             username = System.getProperty(\"org.gradle.nexusUser\")\n\
\             password = System.getProperty(\"org.gradle.nexusPassword\")\n\
\           }\n\
         }|" $file
		     else
          sed -i "${repo_start_line}s|^.*$|${repoMethod} {\n\
\         maven {\n\
\         url \"https://zartifacts.csez.zohocorpin.com/repository/android-cache/\"\n\
\         credentials {\n\
\             username System.getProperty(\"org.gradle.nexusUser\")\n\
\             password System.getProperty(\"org.gradle.nexusPassword\")\n\
\           }\n\
         }|" $file
		     fi
                     if [ $? -eq 0 ]
                     then
	                 echo "------- ${reptype}   ------"
                         echo "------- LineNo: ${repo_start_line} Maven Repository Dependency URL Cache entry added in $file   -------"
	                 grep_cnt=$(expr ${grep_cnt} + 1)
                     else
                         echo "Error: Maven Repository Dependency URL Cache entry failed in $file"
                     fi    
	           fi
                fi
         done

       fi
	      
       done
done

}
findInRepo()
{
## find whether the all repositories are available to replace by repoEntryChanges function #####
repo_match_cnt=0
for repotypes in ${repository_types}
do
	repo_match_entry=$(awk '/'${repotypes}' \s*{/,/}/ {print}' ${file})
	if [ "${repo_match_entry}" != "" ]
	then
		repo_match_cnt=$(expr ${repo_match_cnt} + 1 )
	fi
done
if [ ${repo_match_cnt} -ne 0 ]
then
	android_maven_match_repo="yes"
else
	android_maven_match_repo="no"
fi
}
repoEntryChanges()
{
    ## maven default defined repo entry will be commented ###
    if [ "${android_maven_match_repo}" = "yes" ]
    then
    sed -i ':a; N; $!ba; s/'${repos}'()\s*{/'${repos}'() {/g' $file
    for repos in $(echo $repoList)
    do
	    grep -wn "${repos}()" "${file}" | grep -v "//" | grep -v "{" | while read -r matchline;
	    do
                    gmatch_line_number=$(echo "${matchline}" | cut -d ":" -f1)
                    sed -i "${gmatch_line_number}s/^/\/\//" ${file}
		    echo "------- LineNo:${gmatch_line_number}  ${repos}() repo commented in $file   -------"
	    done

    done
    fi
	   
}
main $*
