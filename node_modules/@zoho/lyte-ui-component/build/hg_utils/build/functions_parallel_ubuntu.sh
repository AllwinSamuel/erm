#!/bin/bash
ERROR_NOTIFY_MAIL_ID="integration-team@zohocorp.com"
SYSADMIN_NOTIFI_MAIL_ID="kparthasarathy@zohocorp.com,kamalakannan@zohocorp.com"
IMAGE_CREATION_NOTIFY_MAIL_ID="cm-notify@zohocorp.com"
REPO_DIR="${HOME}/REPOSITORY"
LOGS_DIR="${WORK_DIR}/logs"
CUR_DATE="$(date +%b_%d_%Y)"
RAND_PATH="${CUR_DATE}/${PRODUCT_NAME}_${WH_BUILD_ID}"
LPRODUCTNAME="$(echo ${PRODUCT_NAME} | tr [A-Z] [a-z])"
BUILD_LOCATION=""
BUILD_STARTED="$(date "+%Y-%m-%d %T")"
TIMENOW="$(date "+%Y-%m-%d %T")"
REPORT_NEEDED="$(echo $REPORT_NEEDED | tr [:upper:] [:lower:])"
CM_SLAVE_API_PREFIX="https://cmtools-slave/api/v1"
if [ "${REPORT_NEEDED}" = "true" ]; then
	RAND_DIR="${HOME}/REPORTS/${RAND_PATH}"
else
	RAND_DIR="${WORK_DIR}/report/"
fi
build_info_file=${WORK_DIR}/${PRODUCT_NAME}.txt
echo "LOAD_AVERAGE=\"$(cat /proc/loadavg | cut -d ' ' -f1-3)\"" >>${build_info_file}
echo "BUILD_STARTED=\"${BUILD_STARTED}\"" >>${build_info_file}
labelcheck_log="${LOGS_DIR}/taggingvalidation.log"
conf_checkout_log="${LOGS_DIR}/conf_checkout.log"
diff_log="${LOGS_DIR}/diff.log"
commit_det_log="${LOGS_DIR}/commit_det.log"
REPORTS_MACHINE_NAME="integ-cm4"
REPORTS_LOGIN_NAME="build"
TP_EXCLUDED_PRODUCTS="TESTINTEG"
TP_EXCLUDED_PRODUCTS_SEARCH=$(echo ${TP_EXCLUDED_PRODUCTS} | grep -w "${PRODUCT_NAME}")
http_domain_name="http://build/"
https_domain_name="https://build.csez.zohocorpin.com/"
buildZohoCorpDomainName="https://build.zohocorp.com/"
cmtools_domain_name="https://cmtools-api.csez.zohocorpin.com/"
cmtoolsnewapi_domain_name="https://cmtools-api.csez.zohocorpin.com/"
cmsuite_domain_name="https://cmsuite.csez.zohocorpin.com/"
BUILD_SRC_DIFF_API="${cmtools_domain_name}/api/v1/repo/get_build_diff?"
ZAK_SHA256_HASH="fbf1c8a6c0aaaf6763975c3c4f9214742a87f20442ecc80518e962c9042f9f21"

if [ ! -z ${BUILD_RETRY} ]; then
	RETRY_COUNT=${BUILD_RETRY_COUNT}
	LAST_BUILD_LOG_FILE=${LOGS_DIR}/build_${RETRY_COUNT}.log
	CHECKOUT_RETRY_LOG_FILE=${LOGS_DIR}/checkout_retry_${RETRY_COUNT}.log
fi
BUILD_SRC_DIFF_API="${cmtools_domain_name}/api/v1/repo/get_build_diff?"

echo "" >${WORK_DIR}/${PRODUCT_NAME}_err.log

. ${HOME}/downloads/.env.conf

if [ ! -z ${TOOLS_REFERENCE_VALUE} ]; then
	PRIVATE_TOKEN=$(echo $TOOLS_REFERENCE_VALUE | sed "s@${GEN_REP_VALUE}@@g")
	echo ${build_info_file}
	sed -i "s@"XXX"@${build_info_file}@g" ${WORK_DIR}/hg_utils/build/clonehook.py

fi

getIDCbuildDetails() {
	echo "getIDCbuildDetails started at : $(date "+%Y-%m-%d %T")"
	if [ "${TEAM_SPECIFIC_INFO}" != "" ]; then
		resolveTeamSpecificInfo
		if [ "${COMPARE_IDC_BUILD}" = "YES" ]; then
			if [ "${PRODUCT_NAME}" = "ZOHOCHATWMS" ]; then
				BTYPE="us4_zohocorp"
			else
				BTYPE="us3_pre_main"
			fi
			IDC_BUILD_URL="https://sd.csez.zohocorpin.com/rest/getLatestDeployedBuild?product="${PRODUCT_NAME}"&bType="${BTYPE}"&authtoken=${sdauthtokenapi}"
			echo "curl -m 10 ${IDC_BUILD_URL}"
			EXEC_URL=$(curl -m 10 $IDC_BUILD_URL)
			GET_VAL=$(echo ${EXEC_URL} | cut -d "," -f2 | cut -d ":" -f4 | sed -e "s@\"@@g")
			GET_IDC_URL=$(echo $GET_VAL | sed -e 's@\/@@g' -e 's@\\\\@/@g' -e 's,:/,://,g' -e 's/\/[^\/]*$//')
			IDC_OUTPUT_URL="http:"$GET_IDC_URL
			echo $IDC_OUTPUT_URL
		fi
	fi
	fetchBuildDetails
	echo "getIDCbuildDetails ended at : " $(date "+%Y-%m-%d %T")

}

docker_pull() {

	if [ -n "${IMAGE_ORDER}" ]; then
		echo "docker_pull process started at : " $(date "+%Y-%m-%d %T")
		for image in $(echo ${IMAGE_ORDER} | tr "," " "); do
			sudo docker pull ${image}
			if [ $? -ne 0 ]; then
				echo "Problem in pulling docker image! -> ${image} "
			else
				echo "DockerImage -> ${image} pulled succesfully"
			fi
		done
		echo "docker_pull process ended at : " $(date "+%Y-%m-%d %T")
	fi

}
docker_save_tar() {
	if [ -n "${IMAGE_ORDER}" ]; then
		echo "docker_save_tar process started at : " $(date "+%Y-%m-%d %T")
		for image in $(echo ${IMAGE_ORDER} | tr "," " "); do
			image_name=$(echo $image | cut -d ":" -f1 | cut -d "/" -f2)
			sudo docker save $image -o $image_name.tar
		done
		echo "docker_save_tar process started at : " $(date "+%Y-%m-%d %T")
	fi
}

commitSASReadme() {
	if [ "${MILESTONE_NEEDED}" = "YES" -o "${BUILD}" = "CRON" -a "${BOTPOST_BRANCH}" != "" ]; then
		echo "In Readme Commit for Saslite"
		for rbranch in $(echo ${BOTPOST_BRANCH} | tr "," " "); do
			if [ "${rbranch}" = "${ARG}" ]; then
				python ${WORK_DIR}/hg_utils/build/readme_commit.py "${ARG}" "${SOURCE_BASE_DIR_REL}" "${BRANCH_LATEST_MILESTONES}"
			fi
		done
	fi
}

chatConnectPost() {
	if [ "${BUILD}" = "CI" -o "${BUILD}" = "WEBHOST" -o "${BUILD}" = "CRON" -a "${BOTPOST_BRANCH}" != "" ]; then
		##echo "In Bot Post for Saslite builds"
		for bbranch in $(echo ${BOTPOST_BRANCH} | tr "," " "); do
			if [ "${bbranch}" = "${ARG}" ]; then
				getReleaseNotes
				if [ "${ARG}" = "default" ]; then
					python ${WORK_DIR}/hg_utils/build/automation.py "${DLOAD_DIR}/${BUILD_DLOAD_DIR}" "${ARG}" "${DEFAULT_CONNECT_TOKEN}" "${DEFAULT_CLIQ_TOKEN}"
				else
					python ${WORK_DIR}/hg_utils/build/automation.py "${DLOAD_DIR}/${BUILD_DLOAD_DIR}" "${ARG}" "${NONDEFAULT_CONNECT_TOKEN}" "${NONDEFAULT_CLIQ_TOKEN}"
				fi
			fi
		done
	fi
}

moveBuild() {
	if [ "${BUILD}" = "CI" -a "${BUILD_MOVE_BRANCH}" != "" ]; then
		echo "In moveBuild Method for CI Builds of ${ARG} branch for Id ==> ${WH_BUILD_ID}"
		buildMoveInvoke
	elif [ "${BUILD}" = "WEBHOST" -a "${BUILD_MOVE_BRANCH}" != "" -a "${BUILD_LABEL}" != "${PREV_DBUILD_LBL}" ]; then
		echo "In moveBuild Method for WEBHOST Builds of ${ARG} branch for Id ==> ${WH_BUILD_ID}"
		buildMoveInvoke
	elif [ "${BUILD}" = "CRON" -o "${MILESTONE_NEEDED}" = "YES" ]; then
		echo "In moveBuild Method for cron build or Milestone as YES for ${ARG} branch for Id ==> ${WH_BUILD_ID}"
		buildMoveInvoke
	fi
}
buildMoveInvoke() {
	for mbranch in $(echo ${BUILD_MOVE_BRANCH} | tr "," " "); do
		echo "In buildMoveInvoke Method for ${mbranch} of ${PRODUCT_NAME} for Id ==> ${WH_BUILD_ID}"
		if [ "${mbranch}" = "${ARG}" ]; then
			getReleaseNotes
			echo "Commit Message =======> ${COMMIT_MESSAGE}"
			python ${WORK_DIR}/hg_utils/build/apiwrapper.py ${PRODUCT_NAME} "Move" "${WH_BUILD_ID}" "${COMMIT_MESSAGE}"
			break
		fi
	done
}

getTipVersionForHGModules() {
	cd ${SOURCE_BASE_DIR}
	SM_TIP_ST_TIME=$(date +%b_%d_%Y@%T)
	MODULE_PRD=${MODULE_NAME}
	export eval ${MODULE_PRD}_TIPVERSION=$(hg parent | grep changeset: | cut -d " " -f4 | cut -d ":" -f1)
	export eval ${MODULE_PRD}_CHANGESET_VAL=$(hg parent | grep changeset: | cut -d " " -f4 | cut -d ":" -f2)
	HG_CSET_VAL=$(eval echo \${${MODULE_PRD}_CHANGESET_VAL})
	HG_TIP_VER=$(eval echo \${${MODULE_PRD}_TIPVERSION})
	echo "${MODULE_NAME} TIP VERSION is : $(eval echo \${${MODULE_PRD}_TIPVERSION})"
	echo "${MODULE_NAME} CHANGESET VALUE is : $(eval echo \${${MODULE_PRD}_CHANGESET_VAL})"
	echo "TIP_CHANGESET_CLN=\"${HG_CSET_VAL}\"" >>${build_info_file}
	TIP_CHANGESET_CLN=${HG_CSET_VAL}
	echo "BUILD_STARTED=\"${BUILD_STARTED}\"" >>${build_info_file}

	SM_TIP_END_TIME=$(date +%b_%d_%Y@%T)
	if [ "${HG_CSET_VAL}" = "" ]; then
		EXIT_MESSAGE="Error Occured while getting ${MODULE_NAME} tip version .. Hence exiting .."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		updateBuildDetails
		exit 1
	fi
	time_cal "Getting Tip Version process for ${MODULE_NAME}" "${SM_TIP_ST_TIME}" "${SM_TIP_END_TIME}"
	echo "${MODULE_PRD}=${MODULE_LABEL} (${HG_TIP_VER}:${HG_CSET_VAL})<br><br>"
}

getTipVersionForGITModules() {
	cd ${SOURCE_BASE_DIR}
	echo "${MODULE_NAME} git Tip Version ( Before build started )"
	#MODULE_PRD=${MODULE_NAME}
	MODULE_PRD=$(echo "${MODULE_NAME}" | sed -e "s,-,_,g")
	git log -n 1
	export eval ${MODULE_PRD}_CHANGESET_VAL=$(git show | grep "^commit" | cut -d " " -f2)
	GIT_CSET_VAL=$(eval echo \${${MODULE_PRD}_CHANGESET_VAL})
	GIT_TIP_VER=$(eval echo \${${MODULE_PRD}_TIPVERSION})
	if [ "${GIT_CSET_VAL}" = "" ]; then
		sendErrorMail "Error Occured while getting ${MODULE_NAME} tip version" "Error Occured while getting ${MODULE_NAME} tip version"
	fi
	GIT_CSET_VAL_NEW=$(echo "${GIT_CSET_VAL}" | sed -e "s,_,-,g")
	echo "TIP_CHANGESET_CLN=\"${GIT_CSET_VAL_NEW}\"" >>${build_info_file}
	TIP_CHANGESET_CLN=${GIT_CSET_VAL}
	echo "${MODULE_PRD}=${MODULE_LABEL} (${GIT_TIP_VER}:${GIT_CSET_VAL})<br><br>"
}

common_clone_method_git() {
	git_rep_clone_val=$1
	clone_arg=$2
	echo ${git_rep_clone_val} | grep "repository.zoho.com"
	if [ $? -eq 0 -a ! -z ${ACCESS_VALUE} ]; then
		REP_PATH_VAL=$(echo ${git_rep_clone_val} | cut -d "/" -f3-)
		REP_PATH=$(echo $REP_PATH_VAL | sed -e 's/repository.zoho.com/zrepository.zoho.com/g')
	else
		REP_PATH=$(echo ${git_rep_clone_val} | cut -d "/" -f3-)
	fi
	echo ${git_rep_clone_val} | grep "repository.zoho.com"
	if [ $? -eq 0 -a ! -z ${ACCESS_VALUE} ]; then
		git -c http.sslVerify=false clone --recursive -b ${clone_arg} https://Zoho-oauthtoken:${ACCESS_VALUE}@${REP_PATH}
	else
		auth_git_rep_clone_val=$(echo $git_rep_clone_val | sed -e "s@https://@https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}\@@g")
		git clone --recursive -b ${clone_arg} ${auth_git_rep_clone_val}
		echo "Git repo clone ${clone_arg}"
	fi
	emp_check_mod=$(echo $git_rep_clone_val | awk -F/ '{print $NF}' | sed 's@\.git@@g')
	echo $emp_check_mod
	empty_srcdir_check "${clone_arg}" "${emp_check_mod}"

	if [ "$3" = "MAIN_SRC" ]; then
		mv ${WORK_DIR}/${MODULE_NAME} ${SOURCE_BASE_DIR}
	fi

}

common_clone_method_hg() {
	hg_rep_clone_val=$1
	hg_clone_arg=$2
	hg_clone_mod=$4

	echo ${hg_rep_clone_val} | grep "repository.zoho.com"
	if [ $? -eq 0 -a ! -z ${ACCESS_VALUE} ]; then
		REP_PATH_VAL=$(echo ${hg_rep_clone_val} | cut -d "/" -f3-)
		REP_PATH=$(echo $REP_PATH_VAL | sed -e 's/repository.zoho.com/zrepository.zoho.com/g')
	else
		REP_PATH=$(echo ${hg_rep_clone_val} | cut -d "/" -f3-)
	fi

	echo ${hg_rep_clone_val} | grep "repository.zoho.com"
	if [ $? -eq 0 ]; then
		if [ "${hg_clone_mod}" = "web_mon" ]; then
			hg share -U /zoho/build/REPOSITORY_ZREPO/web_mon ${WORK_DIR}/web_mon
			cd ${WORK_DIR}/web_mon
			hg pull -r ${hg_clone_arg}
			hg upd -r${hg_clone_arg} -C
			cd -

		elif [ "${PRODUCT_NAME}" = "WEBMONITOR" -o "${PRODUCT_NAME}" = "WEBFONTS" ]; then
			#hg clone  https://Zoho-oauthtoken:${ACCESS_VALUE}@${REP_PATH} -u ${hg_clone_arg}
			##hg share -U /zoho/build/REPOSITORY/${MODULE_NAME} ${SOURCE_BASE_DIR}
			hg share -U /zoho/build/REPOSITORY_ZREPO/${MODULE_NAME} ${SOURCE_BASE_DIR}
			cd ${SOURCE_BASE_DIR}
			hg pull -r ${hg_clone_arg}
			hg upd -r${hg_clone_arg} -C
			cd -
		else

			if [ ! -z "${ACCESS_VALUE}" ]; then
				echo "HG repo clone in zrepository (cloud repo)"
				if [ "${PRODUCT_NAME}" = "HG_UTILS" -a "${hg_clone_arg}" != "integ_build_branch" ]; then
					hg clone --insecure https://Zoho-oauthtoken:${ACCESS_VALUE}@${REP_PATH} -b ${hg_clone_arg} ${SOURCE_BASE_DIR}
				else
					hg clone --insecure https://Zoho-oauthtoken:${ACCESS_VALUE}@${REP_PATH} -b ${hg_clone_arg}
				fi

			fi
		fi

	else
		hg clone https://${REP_USERNAME}:${REP_PASSWORD}@${REP_PATH} -r ${hg_clone_arg}

		emp_check_mod=$(echo $hg_rep_clone_val | awk -F/ '{print $NF}')
		echo $emp_check_mod
		empty_srcdir_check "${hg_clone_arg}" "${emp_check_mod}"

	fi
	if [ "$3" = "MAIN_SRC" ]; then
		if [ "${PRODUCT_NAME}" != "HG_UTILS" -a "${PRODUCT_NAME}" != "WEBMONITOR" -a "${PRODUCT_NAME}" != "WEBFONTS" ]; then
			mv ${WORK_DIR}/${MODULE_NAME} ${SOURCE_BASE_DIR}
		fi
	fi

}

empty_srcdir_check() {

	src_build_log=${LOGS_DIR}/build.log
	clone_arg_name="$1"
	emp_check_mod="$2"
	if [ $clone_arg_name = "integ_build_branch" ]; then
		clone_src_dir="${CONF_DIR}/${emp_check_mod}"
	else
		clone_src_dir="${WORK_DIR}/${emp_check_mod}"
	fi

	echo $clone_src_dir
	if [ -d "${clone_src_dir}" ]; then
		empty_src_check=$(ls ${clone_src_dir})
		if [ -z "$empty_src_check" ]; then
			echo "Source checkout directory is empty"
			EXIT_ERROR_MESSAGE="${emp_check_mod} Source checkout directory is empty .. Hence exiting .."
			BUILDLOG_ERROR_MESSAGE="${emp_check_mod} Source directory is not available ..due to invalid branch $clone_arg_name provided in submodule .So build failed. "
			echo "$BUILDLOG_ERROR_MESSAGE" >>${src_build_log}
			echo "${EXIT_ERROR_MESSAGE}"
			echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_ERROR_MESSAGE}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_ERROR_MESSAGE}"
			export REASON_FOR_BUILD_FAILURE
			BUILD_STATUS="FAILURE"
			export BUILD_STATUS
			copyBuilderrorlogs
			BUILD_STATUS="FAILURE"
			export BUILD_STATUS
			updateBuildDetails
			exit 1

		fi
	else
		echo "Source directory is not available "
		EXIT_ERROR_MESSAGE="${emp_check_mod} Source directory is not available .. Hence exiting .."
		BUILDLOG_ERROR_MESSAGE="${emp_check_mod} Source directory is not available ..due to invalid branch $clone_arg_name provided in submodule .So build failed. "
		echo "$BUILDLOG_ERROR_MESSAGE" >>${src_build_log}
		echo "${EXIT_ERROR_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_ERROR_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_ERROR_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		copyBuilderrorlogs
		updateBuildDetails
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		exit 1
	fi

}

zrepo_wget() {

	clone_arg="$1"
	checkout_mod_name="$2"
	checkout_zrepo_id="$3"
	if [ "${BUILDBY}" = "integration-team" ]; then
		BUILDBY_ID="petchimuthu"
	else
		BUILDBY_ID="${BUILDBY}"
	fi

	if [ "${clone_arg}" = "integ_build_branch" ]; then
		dir_location="${CONF_DIR}"
	else
		dir_location="${WORK_DIR}"
	fi

	cd ${dir_location}
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		get_gitmod=$(curl -k -v -H 'Authorization:Zoho-oauthtoken '"${ACCESS_VALUE}" -H 'X-ZR-Email:'"${BUILDBY_ID}"'@zohocorp.com' 'https://repository.zoho.com/repos/'"${checkout_zrepo_id}"'/api/v1/filecontent?filePath=.gitmodules&revision='"${clone_arg}")
		zrepo_git=$(echo $get_gitmod | grep -E "does not exist|file is not present in the")
		if [ -z "${zrepo_git}" ]; then
			touch "${WORK_DIR}/${checkout_mod_name}_gitmod.txt"
		fi

	fi

	if [ ! -d "${checkout_mod_name}" -a ! -f "${WORK_DIR}/${checkout_mod_name}_gitmod.txt" ]; then
		CHANGE_API_PRD=$(cat ${WORK_DIR}/hg_utils/build/CHANGEFILES_API_USED_PRODUCTS.txt | grep -w "${PRODUCT_NAME}")
		if [ -n "${CHANGE_API_PRD}" -a "${clone_arg}" != "integ_build_branch" ]; then
			wget --header='Authorization:Zoho-oauthtoken '"$ACCESS_VALUE" --header='X-ZR-Email:'"${BUILDBY_ID}"'@zohocorp.com' https://repository.zoho.com/repos/"${checkout_zrepo_id}"/api/v1/archive/changefiles/"${clone_arg}"/"${checkout_mod_name}"-"${clone_arg}".zip --no-check-certificate --tries=2
		else
			wget --header='Authorization:Zoho-oauthtoken '"$ACCESS_VALUE" --header='X-ZR-Email:'"${BUILDBY_ID}"'@zohocorp.com' https://repository.zoho.com/repos/"${checkout_zrepo_id}"/api/v1/archive/"${clone_arg}"/"${checkout_mod_name}"-"${clone_arg}".zip --no-check-certificate --tries=2
		fi

		if [ -f "${checkout_mod_name}"-"${clone_arg}".zip ]; then
			ZREPO_SRC_ZIP=$(zip -T "${checkout_mod_name}"-"${clone_arg}".zip | grep "OK")
			ZREPO_SRC_ZIP_STATUS=$(echo $?)
			if [ ${ZREPO_SRC_ZIP_STATUS} -eq 0 ]; then
				echo "Source zip downloaded successfully ."
				unzip -q "${checkout_mod_name}"-"${clone_arg}".zip
				mv "${checkout_mod_name}"-"${clone_arg}" "${checkout_mod_name}"
			else
				rm -f "${checkout_mod_name}"-"${clone_arg}".zip
			fi
		fi

	fi
	cd -

}

getRepoSrc() {

	if [ "$1" = "clone" -a "${REPOSITORY_TYPE}" = "GIT" ]; then
		if [ "$2" = "integ_build_branch" ]; then
			cd ${CONF_DIR}
			common_clone_method_git ${CLONE_VALUE} $2 "INTEG_SRC"
			mv ${CONF_DIR}/${MODULE_NAME}/build/{.,}* .
			cd -

		else
			echo "subproduct So clone calling"
			cd ${WORK_DIR}
			common_clone_method_git ${CLONE_VALUE} ${ARG} "MAIN_SRC"
			cd ${SOURCE_BASE_DIR}
			git checkout ${TIP_CHANGESET}
			if [ -z ${TIP_CHANGESET} ]; then
				getTipVersionForGITModules
			fi
		fi

	elif [ "$1" = "clone" -a "${REPOSITORY_TYPE}" = "HG" ]; then
		if [ $2 = "integ_build_branch" ]; then
			cd ${CONF_DIR}
			common_clone_method_hg "${CLONE_VALUE}" "$2" "INTEG_SRC"
			mv ${CONF_DIR}/${MODULE_NAME}/build/{.,}* .
			cd -

		else

			echo "hg clone processes calling"
			cd ${WORK_DIR}
			common_clone_method_hg "${CLONE_VALUE}" "$ARG" "MAIN_SRC"
			if [ -z ${TIP_CHANGESET} ]; then
				getTipVersionForHGModules
			fi
		fi
	else
		if [ ! -d "${WORK_DIR}/Repo_Src" ]; then
			mkdir ${WORK_DIR}/Repo_Src
		fi
		cd ${WORK_DIR}/Repo_Src
		if [ "${REPOSITORY_TYPE}" = "HG" ]; then
			if [ ! -d "${WORK_DIR}/Repo_Src/${MODULE_NAME}" ]; then
				REP_PATH=$(echo ${CLONE_VALUE} | cut -d "/" -f3-)
				hg clone https://${REP_USERNAME}:${REP_PASSWORD}@${REP_PATH} -U -r ${TIP_CHANGESET}

			fi
			SOURCE_BASE_DIR_REL=${WORK_DIR}/Repo_Src/${MODULE_NAME}

			if [ -n "$*" ]; then
				echo ${SOURCE_BASE_DIR_REL}
				cd ${SOURCE_BASE_DIR_REL}
				hg_comment="$*"
				hg_cmd="hg ${hg_comment}"
				cmd_op=$(eval ${hg_cmd})

			fi

		elif [ "${REPOSITORY_TYPE}" = "GIT" ]; then
			if [ ! -d "${WORK_DIR}/Repo_Src/${MODULE_NAME}.git" ]; then
				auth_clone_val=$(echo $CLONE_VALUE | sed -e "s@https://@https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}\@@g")
				git clone -b ${ARG} --single-branch ${auth_clone_val} --bare
			fi
			SOURCE_BASE_DIR_REL=${WORK_DIR}/Repo_Src/${MODULE_NAME}.git
			echo ${SOURCE_BASE_DIR_REL}
			if [ -n "$*" ]; then
				echo "KK"
				echo "$*"
				echo ${SOURCE_BASE_DIR_REL}
				cd ${SOURCE_BASE_DIR_REL}
				git_comment="$*"
				git_cmd="git ${git_comment}"
				cmd_op=$(eval ${git_cmd})

			fi

		fi

	fi
	echo $cmd_op
	echo "getRepoSrc Calling"

}

getReleaseNotes() {
	cd ${SOURCE_BASE_DIR}
	diff_notes="${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/release_notes.txt"
	if [ -n "${ML_SRC_CHANGESET}" ]; then
		PREV_CSET_VAL=${ML_SRC_CHANGESET}
	else
		PREV_CSET_VAL=${PREV_SRC_CHANGESET}
	fi
	if [ "${REPOSITORY_TYPE}" = "HG" ]; then
		echo "Inside getReleaseNotes Method for Product Id ====> ${PRODUCT_ID}"
		if [ "${PRODUCT_NAME}" = "SAS_PROVISIONING" ]; then
			COMMIT_MESSAGE=$(cat ${BUILD_DIR}/milestone.tag | cut -d "=" -f2)
		elif [ "${PRODUCT_ID}" = "912" -o "${PRODUCT_ID}" = "516" -o "${PRODUCT_ID}" = "2351" -o "${PRODUCT_ID}" = "2359" -o "${PRODUCT_ID}" = "1919" -o "${PRODUCT_ID}" = "1891" -o "${PRODUCT_ID}" = "1998" -o "${PRODUCT_ID}" = "1712" -o "${PRODUCT_ID}" = "2789" -o "${PRODUCT_ID}" = "2795" ]; then
			#LATMILE_VAL=`echo $LATEST_MILESTONES | sed -e "s/$PRODUCT_NAME\_//"`
			LATMILE_VAL=$(echo $BRANCH_LATEST_MILESTONES | sed -e "s/.*_//")
			COMMIT_MESSAGE=$(expr $LATMILE_VAL + 1)
		else
			COMMIT_MESSAGE=$(hg log -r${CHANGESET_VALUE} --template '{desc}\n')
		fi
		hg diff -U 0 -r${PREV_CSET_VAL}:${CHANGESET_VALUE} product_package/blog/readme.txt | tail -n +5 | sed 's/^.//' >${diff_notes}
	elif [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		echo "Inside getReleaseNotes Method for Product Id ====> ${PRODUCT_ID}"
		if [ "${PRODUCT_ID}" = "728" -o "${PRODUCT_ID}" = "3088" -o "${PRODUCT_ID}" = "1237" -o "${PRODUCT_ID}" = "6303" ]; then

			if [ "${PRODUCT_ID}" = "1237" ]; then
				LATMILE_VAL=$(echo $BRANCH_LATEST_MILESTONES | sed -e "s/.*_M//")
				COMMIT_MESSAGE="M"$(expr $LATMILE_VAL + 1)
			else
				LATMILE_VAL=$(echo $BRANCH_LATEST_MILESTONES | sed -e "s/.*_//")
				COMMIT_MESSAGE=$(expr $LATMILE_VAL + 1)
			fi

		else
			COMMIT_MESSAGE=$(git show ${CHANGESET_VALUE} --oneline | head -1 | cut -d " " -f2-)
			git diff -U0 -r ${PREV_CSET_VAL} ${CHANGESET_VALUE} product_package/blog/readme.txt | tail -n +6 | sed 's/^.//' >${diff_notes}
		fi
	fi
	cd -
}

getAuthors() {
	if [ "${PRODUCT_NAME}" = "ZOHOPROJECTS" -a "${ARG}" = "default" ]; then
		IDC_CHANGESET_VAL=$(python apirequest ${PRODUCT_NAME} IDC_Changeset)
		if [ "${IDC_CHANGESET_VAL}" != "" ]; then
			if [ "${REPOSITORY_TYPE}" = "HG" ]; then
				cd ${REPO_DIR}/${MOD_NAME}
				if [ "${IDC_CHANGESET_VAL}" = "${CHANGESET_VALUE}" ]; then
					commit_authors=$(hg log -r${IDC_CHANGESET_VAL} --template '{author}')
				else
					commit_authors=$(hg log -b ${ARG} -r${IDC_CHANGESET_VAL}:${CHANGESET_VALUE} --template '{author}\n' | tail -n +2 | sort -u | grep -v "build" | tr "\n" ",")
				fi
				echo "${commit_authors}" >${OUTPUT_DLOAD_DIR}/push_users.txt
			fi
		else
			echo "IDC Changeset Value is empty."
		fi
	fi
}

fetchBuildDetails() {
	echo "fetchBuildDetails started at : " $(date "+%Y-%m-%d %T")

	logTime "Fetching build details from ConfigTool" "Started"
	if [ -n "${IDC_OUTPUT_URL}" ]; then
		python ${WORK_DIR}/hg_utils/build/getIDCDetails.py ${PRODUCT_NAME} ${IDC_OUTPUT_URL} "IDC" 1>${LOGS_DIR}/BUILD_DETAILS.conf 2>${LOGS_DIR}/api_query.log
	fi
	if [ "${BUILD}" = "CRON" ]; then

		if [ "${PRODUCT_NAME}" = "ZOHOCAMPAIGN" ]; then
			python ${WORK_DIR}/hg_utils/build/apiwrapper.py ${PRODUCT_NAME} ${ARG} ${BUILD} 1>${LOGS_DIR}/BUILD_DETAILS.conf 2>${LOGS_DIR}/api_query.log
			perl -w -e "s@^PREV_DBUILD_URL=.*@PREV_DBUILD_URL=\"${PREV_DBUILD_URL}\"@g" -p -i ${build_info_file}
			perl -w -e "s@^PREV_DBUILD_LBL=.*@PREV_DBUILD_LBL=\"${PREV_DBUILD_LBL}\"@g" -p -i ${build_info_file}
			perl -w -e "s@^PREV_SRC_CHANGESET=.*@PREV_SRC_CHANGESET=\"${PREV_SRC_CHANGESET}\"@g" -p -i ${build_info_file}
			perl -w -e "s@^PREV_TP_CHANGESET=.*@PREV_TP_CHANGESET=\"${PREV_TP_CHANGESET}\"@g" -p -i ${build_info_file}
		fi
	fi

	if [ "${BUILD}" = "CI" ]; then
		python ${WORK_DIR}/hg_utils/build/apiwrapper.py ${PRODUCT_NAME} ${ARG} ${BUILD} 1>${LOGS_DIR}/BUILD_DETAILS.conf 2>${LOGS_DIR}/api_query.log
	fi
	if [ $? -ne 0 ]; then
		if [ -n "${IDC_OUTPUT_URL}" ]; then
			python ${WORK_DIR}/hg_utils/build/getIDCDetails.py ${PRODUCT_NAME} ${IDC_OUTPUT_URL} "IDC" 1>${LOGS_DIR}/BUILD_DETAILS.conf 2>${LOGS_DIR}/api_query.log
		fi
		if [ "${BUILD}" = "CI" ]; then
			python ${WORK_DIR}/hg_utils/build/apiwrapper.py ${PRODUCT_NAME} ${ARG} ${BUILD} 1>${LOGS_DIR}/BUILD_DETAILS.conf 2>${LOGS_DIR}/api_query.log
		fi
		if [ $? -ne 0 ]; then
			echo "Error Occured while fetching build details from ConfigTool Api .. Hence exitting.."
			API_QUERY_ERRMSG=$(echo -e "Error Occured while fetching build details from ConfigTool Api. Hence quitting the build.\n\nProduct Name : ${PRODUCT_NAME}\nCheckout Label : ${ARG}\nStarted By : ${BUILDBY}\n\nPlease refer the below log:\n\n$(cat ${LOGS_DIR}/api_query.log | sed -e 's/\r//g')")
			sendErrorMail "Error Occured while fetching build details from ConfigTool Api : ${PRODUCT_NAME}" "${API_QUERY_ERRMSG}"
		fi
	fi
	CEPH_URL_MATCH=$(echo ${DOWNLOAD_URL} | grep -E "(${http_domain_name}|${buildZohoCorpDomainName})")
	if [ -n "${CEPH_URL_MATCH}" ]; then
		CEPH_COPY_NEEDED="yes"
	fi
	#CEPH_COPY_NEEDED="no"
	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		export IMAGE_NAME="integ-cm.csez.zohocorpin.com/ubuntu/android"
		sudo docker pull ${IMAGE_NAME}

	elif [ "${GROUP_ID}" -eq "1" -o "${GROUP_ID}" -eq "10" ]; then
		export IMAGE_NAME="integ-cm.csez.zohocorpin.com/me/centos7"
	elif [ "${GROUP_ID}" -eq "15" -o "${GROUP_ID}" -eq "20" ]; then
		export IMAGE_NAME="integ-cm.csez.zohocorpin.com/ubuntu/ios"
	else
		export IMAGE_NAME="integ-cm.csez.zohocorpin.com/me/centos7"
	fi
	logTime "Fetching build details from ConfigTool" "Ended"
	echo "fetchBuildDetails ended at : " $(date "+%Y-%m-%d %T")

}

getRepositoryType() {
	if [ "${REPOSITORY_TYPE}" = "" ]; then
		echo "Error occured while getting Source Type.. Hence Quitting the build.."
		REPOSITORY_TYPE_ERRMSG=$(echo -e "Error Occured while getting Source Type. Hence quitting the build.\nQuery is : select srctype from productdetails where productname = '${PRODUCT_NAME}'")
		sendErrorMail "Error Occured while getting Source Type" "${REPOSITORY_TYPE_ERRMSG}"
	elif [ "${CLONE_VALUE}" = "" ]; then
		echo "Error occured while getting Checkout/Clone Details.. Hence Quitting the build.."
		REPOSITORY_TYPE_ERRMSG=$(echo -e "Error occured while getting Checkout/Clone Details.. Hence Quitting the build..")
		sendErrorMail "Error occured while getting Checkout/Clone Details" "${REPOSITORY_TYPE_ERRMSG}"
	else
		if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
			CLONE_URL=${CLONE_VALUE}
		else
			echo "HG repo is called....."
			CLONE_URL=$(echo "${CLONE_VALUE}" | grep -E "bitbucket.org")
			if [ ! -n "${CLONE_URL}" ]; then
				REP_USERNAME="${HGREPO_USERNAME}"
				REP_PASSWORD="${HGREPO_PASSWORD}"
				CLONE_URL=$(echo "${CLONE_VALUE}" | sed -e "s,https\:\/\/,https:\/\/${REP_USERNAME}\:${REP_PASSWORD}\@,g")
			fi
		fi
	fi
}

get_conf_file() {
	logTime "Conf file checkout process" "Started"
	TEAMSPECIFIC_INTEG_CHECKOUT_FILE="build/build_script.sh"
	CVS_JAVA_HOME_TXT=${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/cvscheckout_java_home.txt

	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		if [ -d ${CONF_DIR} ]; then
			echo "${CONF_DIR}" directory exist ,so privious conf dir/file has been removed ...
			###checkAndCleanDir "${CONF_FILE}"
		else
			echo "${CONF_DIR}" directory not exist . ${CONF_DIR} created...
			mkdir ${CONF_DIR}
		fi
		cd ${CONF_DIR}

		git_source_wget ${CLONE_VALUE} "integ_build_branch"
		mv ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}/build/{.\[\!\.\],}* ${CONF_DIR}
		find "${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}/build/" -maxdepth 1 -type f ! -name ".*" -exec mv {} "${CONF_DIR}" \;
		PDT_CONF=$(echo ${CONF_FILENAME} | cut -d "/" -f2-)
		DOCKER_CONF="build/Dockerfile"
		BUILDMERGE_CONF="build/buildmergecheck.conf"

	else
		if [ -d ${CONF_DIR} ]; then
			echo "${CONF_DIR}" directory exist ,so privious conf dir/file has been removed ...
			rm -fv ${CONF_FILE}
		else
			echo "${CONF_DIR}" directory not exist . ${CONF_DIR} created...
			mkdir ${CONF_DIR}
		fi
		cd ${CONF_DIR}
		echo "hg source checkout"
		hg_source_wget ${CLONE_VALUE} "integ_build_branch"
		#mv ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}/build/{.\[\!\.\],}* ${CONF_DIR}
		cp -fv `find ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}/build/ -maxdepth 1 -type f` ${CONF_DIR}
		PDT_CONF=$(echo ${CONF_FILENAME} | cut -d "/" -f2-)
		DOCKER_CONF="build/Dockerfile"
		DEPENDENCY_SCRIPT_FILE="build/trigger_dependency_build.sh"
	fi
	if [ -n "${TEAMSPECIFIC_INTEG_CHECKOUT_FILE}" ]; then
		cp -f "${CONF_DIR}/${TEAMSPECIFIC_INTEG_CHECKOUT_FILE}" ${BUILD_DIR}/
	fi
	if [ -f ${CONF_FILE} ]; then
		echo "build conf file exist so build started ..."
	else
		echo "Conf file taken from previous build process started"
		if [ "${PREV_DBUILD_URL}" != "" ]; then

			cd ${CONF_DIR}
			PRE_CONF_BUILD_URL="${http_domain_name}"
			PRE_CONF_DL_DIR="/zoho/build/downloads/dload/"
			PRE_CONF_DLOAD_PATH=$(echo ${PREV_DBUILD_URL} | sed "s@${PRE_CONF_BUILD_URL}@$PRE_CONF_DL_DIR@g")
			echo $PRE_CONF_DLOAD_PATH
			cp ${PRE_CONF_DLOAD_PATH}/logs/${MODULE_NAME}.conf .
			sed -i 's/^BUILD_OPTS=\(.*\)./ /g; s/^BUILD_FUNCTION=\(.*\)./ /g; s/^CHOOSE_BUILD_TYPE=\(.*\)./ /g; s/^BUILD_TASKS=\(.*\)./ /g' ${MODULE_NAME}.conf
			cd -
			mail -r "integration-team@zohocorp.com" -s "conf file taken from previous build url in ${PRODUCT_NAME}" "integration-team@zohocorp.com" <<-EOF
				                                Product name = ${PRODUCT_NAME}
								Branch Name = ${ARG}
								Build Id = ${WH_BUILD_ID}

				                        Note: @Build owners please create integ_build_branch and checkin respective conf file.
			EOF

			echo "Conf file taken from previous build process ended"

		else
			if [ "${BRANCH_LATEST_MILESTONE_URL}" != "" ]; then
				cd ${CONF_DIR}
				ML_PRE_CONF_BUILD_URL="${http_domain_name}"
				ML_PRE_CONF_DL_DIR="/zoho/build/downloads/dload/"
				ML_PRE_CONF_DLOAD_PATH=$(echo ${BRANCH_LATEST_MILESTONE_URL} | sed "s@${ML_PRE_CONF_BUILD_URL}@${ML_PRE_CONF_DL_DIR}@g")
				echo ${ML_PRE_CONF_DLOAD_PATH}
				cp ${ML_PRE_CONF_DLOAD_PATH}/logs/${MODULE_NAME}.conf .
				sed -i 's/^BUILD_OPTS=\(.*\)./ /g; s/^BUILD_FUNCTION=\(.*\)./ /g; s/^CHOOSE_BUILD_TYPE=\(.*\)./ /g; s/^BUILD_TASKS=\(.*\)./ /g' ${MODULE_NAME}.conf
				cd -
				mail -r "integration-team@zohocorp.com" -s "conf file taken from previous build url in ${PRODUCT_NAME}" "integration-team@zohocorp.com" <<-EOF
					                                         Product name = ${PRODUCT_NAME}
					                                 Branch Name = ${ARG}
						                                Build Id = ${WH_BUILD_ID}

					                         Note: @Build owners please create integ_build_branch and checkin respective conf file.
				EOF

				echo "Conf file taken from previous build process ended"

			else
				echo "build conf file not exist ... so build is stopped ..."
				sendErrorMail "${CONF_FILENAME} file does not exist" "${CONF_FILENAME} file does not exist .. Hence quitting the build."
			fi
		fi
	fi
	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		change_android_home
	fi
	export CONF_FILE
	cd -
	sed -i 's/-rvf/-rf/g; s/-rfv/-rf/g; s/-vrf/-rf/g' ${CONF_FILE}
	logTime "Conf file checkout process" "Ended"
}

change_android_home() {
	grep "/etc/ansible_downloads/android-sdk-linux/android-sdk-linux_x86/tools" ${CONF_FILE}
	if [ $? -eq 0 ]; then
		sed -i "s@/etc/ansible_downloads/android-sdk-linux/android-sdk-linux_x86/tools@/etc/ansible_downloads/android/android-sdk-linux_x86@g" ${CONF_FILE}
	fi
}

hg_subsource_wget() {
	http_path=$(echo $1 | cut -d "=" -f2 | cut -d "/" -f1 | sed -e "s@https:@https://build:@g")
	if [ $3 != "" ]; then
		REPO_MODULE_NAME=$3
	else
		echo "Sub module name does not exists"
		EXIT_MESSAGE="Sub module name not avilable .. Hence exiting .."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		updateBuildDetails
		exit 1
	fi

	if [ $4 != "" ]; then
		CLONE_ARG=$4
	else
		CLONE_ARG=$2
	fi
	SUB_CLONE_VAL=$1
	sub_zrepo_id="$5"
	sub_zrepo_id="$5"
	if [ "${REPO_MODULE_NAME}" = "web_mon" ]; then
		common_clone_method_hg ${SUB_CLONE_VAL} ${SUBMODULE_LABEL} "SUB_SRC" "${REPO_MODULE_NAME}"
	else

		echo $SUB_CLONE_VAL | grep "repository.zoho.com"
		if [ $? -eq 0 ]; then
			cd "${WORK_DIR}"
			zrepo_wget "${CLONE_ARG}" "${SUBMODULE_MODNAME}" "${sub_zrepo_id}"
			if [ ! -f "${SUBMODULE_MODNAME}-${CLONE_ARG}.zip" ]; then
				common_clone_method_hg ${SUB_CLONE_VAL} ${SUBMODULE_LABEL} "SUB_SRC"
			fi

			echo "SUB Repo avilable under zrepositry so clone method calling added."
			cd -
		else
			hg_source_wget_common $1
		fi
	fi
}

git_subsource_wget() {
	api_value="$(echo $1 | sed "s@\(.*\).csez.zohocorpin.com/@@g" | sed -e "s@\.git@@g" | sed -e "s@\/@%2F@g" | sed -e "s@\.@%2E@g")"
	if [ "$3" != "" ]; then
		REPO_MODULE_NAME=$3
	else
		echo "Sub Module name does not exists"
		EXIT_MESSAGE="Sub module name not avilable .. Hence exiting .."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		updateBuildDetails
		exit 1

	fi
	echo $api_value
	if [ "$4" != "" ]; then
		CLONE_ARG=$4
	else
		CLONE_ARG=$2
	fi

	SUB_CLONE_VAL="$1"
	echo $SUB_CLONE_VAL | grep "repository.zoho.com"
	if [ $? -eq 0 ]; then
		sub_zrepo_id="$5"
		cd "${WORK_DIR}"
		zrepo_wget "${CLONE_ARG}" "${SUBMODULE_MODNAME}" "${sub_zrepo_id}"
		if [ ! -f "${WORK_DIR}/${SUBMODULE_MODNAME}-${CLONE_ARG}.zip" -o -f "${WORK_DIR}/${checkout_mod_name}_gitmod.txt" ]; then
			common_clone_method_git ${SUB_CLONE_VAL} ${SUBMODULE_LABEL} "SUB_SRC"
		fi

		echo "SUB Repo avilable under zrepositry so clone method calling added."
		cd -
	else
		git_source_wget_common ${SUB_CLONE_VAL} ${SUBMODULE_LABEL} ${REPO_MODULE_NAME}
	fi
}

hg_source_wget() {
	http_path=$(echo $1 | cut -d "=" -f2 | cut -d "/" -f1 | sed -e "s@https:@https://build:@g")
	if [ "$3" != "" ]; then
		REPO_MODULE_NAME=$3
	else
		REPO_MODULE_NAME=$MODULE_NAME
	fi

	if [ "$2" != "integ_build_branch" ]; then
		if [ "${TIP_CHANGESET}" != "" ]; then
			CLONE_ARG=${TIP_CHANGESET}
		else
			CLONE_ARG=$2
		fi
	elif [ "$2" = "integ_build_branch" ]; then
		CLONE_ARG=$2

	fi
	hg_source_wget_common $1

}

hg_source_wget_common() {
	echo $1 | grep "repository.zoho.com"
	if [ $? -eq 0 ]; then
		echo "Repo avilable under zrepositry so clone method calling added."
		if [ ${CLONE_ARG} = "integ_build_branch" ]; then
			if [ "${PRODUCT_NAME}" = "HG_UTILS" ]; then
				getRepoSrc "clone" "integ_build_branch"
			else
				zrepo_wget "integ_build_branch" "${MODULE_NAME}" "${ZREPO_ID}"
				cp -r "${CONF_DIR}"/"${MODULE_NAME}"/build/** "${CONF_DIR}"/
			fi

			if [ ! -f ${MODULE_NAME}-${CLONE_ARG}.zip -a "${PRODUCT_NAME}" != "HG_UTILS" ]; then
				getRepoSrc "clone" "integ_build_branch"
			fi

		else
			if [ "${PRODUCT_NAME}" = "HG_UTILS" -o "${PRODUCT_NAME}" = "WEBMONITOR" -o "${PRODUCT_NAME}" = "WEBFONTS" ]; then
				getRepoSrc "clone"
			else
				zrepo_wget "${CLONE_ARG}" "${MODULE_NAME}" "${ZREPO_ID}"
				mv "${WORK_DIR}"/"${MODULE_NAME}" "${SOURCE_BASE_DIR}"
			fi

			if [ ! -f ${MODULE_NAME}-${CLONE_ARG}.zip -a "${PRODUCT_NAME}" != "HG_UTILS" -a "${PRODUCT_NAME}" != "WEBMONITOR" -a "${PRODUCT_NAME}" != "WEBFONTS" ]; then
				getRepoSrc "clone"
			fi

		fi

	elif [ "${PRODUCT_NAME}" = "SASLITE" ]; then
		if [ ${CLONE_ARG} = "integ_build_branch" ]; then
			getRepoSrc "clone" "integ_build_branch"
		else
			getRepoSrc "clone"
		fi

	else

		url_path=$(echo $1 | sed -e "s@https://@\@@g")
		repo_clone_val=$(echo $http_path${HGREPO_PASSWORD}${url_path})
		ends_val="$repo_clone_val/archive/$CLONE_ARG.zip --no-check-certificate"
		echo $CLONE_ARG
		wget $ends_val
		wget_path=$(pwd)
		echo $wget_path
		SRC_ZIP=$(zip -T $CLONE_ARG.zip | grep "OK")
		SRC_ZIP_STATUS=$(echo $?)
		if [ ${SRC_ZIP_STATUS} -eq 0 ]; then
			echo "Source zip downloaded successfully ."
			unzip -q $CLONE_ARG.zip -d ${REPO_MODULE_NAME}_SRC
			if [ ! -d ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME} ]; then

				mv ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}-${CLONE_ARG} ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}
				echo "source moving from ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}-${CLONE_ARG} to ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}"
				echo "${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}-${CLONE_ARG}"
				echo "${REPO_MODULE_NAME}"
			fi
			rm -rf ${SOURCE_BASE_DIR}/$CLONE_ARG.zip

		else
			echo "Source zip download failed . So clone proccess called"

			getRepoSrc "clone"
			src_corrupt_SendMail
		fi
	fi
}

git_source_wget() {
	api_value=$(echo $1 | sed "s@\(.*\).csez.zohocorpin.com/@@g" | sed -e "s@\.git@@g" | sed -e "s@\/@%2F@g" | sed -e "s@\.@%2E@g")
	if [ "$3" != "" ]; then
		REPO_MODULE_NAME=$3
	else
		REPO_MODULE_NAME=$MODULE_NAME
	fi

	echo $api_value
	if [ "$2" != "integ_build_branch" ]; then
		if [ ${TIP_CHANGESET} != "" ]; then
			CLONE_ARG=${TIP_CHANGESET}
		else
			CLONE_ARG=$2

		fi
	elif [ "$2" = "integ_build_branch" ]; then
		CLONE_ARG=$2

	fi

	git_source_wget_common $1
}

git_source_wget_common() {

	if [ "$2" != "" ]; then
		CLONE_ARG="$2"
		REPO_MODULE_NAME="$3"
	fi

	echo $1 | grep "repository.zoho.com"
	if [ $? -eq 0 ]; then
		if [ ${CLONE_ARG} = "integ_build_branch" ]; then
			echo "Repo avilable under zrepositry so clone method calling added."
			zrepo_wget "integ_build_branch" "${MODULE_NAME}" "${ZREPO_ID}"
			cp -r "${CONF_DIR}"/"${MODULE_NAME}"/build/** "${CONF_DIR}"/

			if [ ! -f ${MODULE_NAME}-${CLONE_ARG}.zip ]; then
				getRepoSrc "clone" "integ_build_branch"

			fi
		fi

	else
		pre_api=$(echo $1 | cut -d "=" -f2 | cut -d "/" -f3)
		api_val="'https://'${pre_api}'/api/v4/projects/'${api_value}'/repository/archive.zip?sha='${CLONE_ARG}'&private_token=XXXXXXXXX'"
		echo "$api_val"
		curl -k -X GET 'https://'${pre_api}'/api/v4/projects/'${api_value}'/repository/archive.zip?sha='${CLONE_ARG}'&private_token='${GIT_WGET_PRIVATE_TOKEN} >${REPO_MODULE_NAME}.zip
		if [ "${CLONE_ARG}" = "integ_build_branch" ]; then
			zip -T ${REPO_MODULE_NAME}.zip | grep "OK"
			if [ $? -ne 0 ]; then
				echo "Integ_build branch source zip download failed . So retry master branch source zip wget process added."
				rm -rf ${REPO_MODULE_NAME}.zip
				CLONE_ARG_INTEG="master"
				curl -k -X GET 'https://'${pre_api}'/api/v4/projects/'${api_value}'/repository/archive.zip?sha='${CLONE_ARG_INTEG}'&private_token='${GIT_WGET_PRIVATE_TOKEN} >${REPO_MODULE_NAME}.zip
				zip -T ${REPO_MODULE_NAME}.zip | grep "OK"
				if [ $? -ne 0 ]; then
					echo "Source zip download failed . So clone proccess called"
					getRepoSrc "clone" "integ_build_branch"
				fi

			fi
		fi
		SRC_ZIP=$(zip -T ${REPO_MODULE_NAME}.zip | grep "OK")
		SRC_ZIP_STATUS=$(echo $?)
		if [ ${SRC_ZIP_STATUS} -eq 0 ]; then
			echo "Source zip downloaded successfully ."
			unzip -q ${REPO_MODULE_NAME}.zip -d ${REPO_MODULE_NAME}_SRC
			cd ${REPO_MODULE_NAME}_SRC
			ORG_PATH=$(find -maxdepth 1 -type d | sed -e "s@\./@@g" | grep -v "^\.")
			cd -
			#ORG_PATH=`find -maxdepth 1 -type d | sed -e "s@\./@@g" | grep -Ev "conf|hg_utils|logs|_DBUILD" | sed -e "s@\.@@g"`
			if [ ! -d "${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}" ]; then

				mv ${REPO_MODULE_NAME}_SRC/${ORG_PATH} ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}
			fi
			rm -rf ${SOURCE_BASE_DIR}/${REPO_MODULE_NAME}.zip
		else
			echo "Source zip download failed . So clone proccess called"
			getRepoSrc "clone"
			empty_srcdir_check "${CLONE_ARG}" "${REPO_MODULE_NAME}"
			src_corrupt_SendMail
		fi
	fi
}

src_corrupt_SendMail() {
	local MAIL_SUBJECT="Wget source zip corrupted ,So clone  process running."
	MAIL_ID="integration-team@zohocorp.com"
	mail -r "integration-team@zohocorp.com" -s "${MAIL_SUBJECT}" ${MAIL_ID} <<-EOF
		        Dear Team,

		         Product Name : ${PRODUCT_NAME}
			        Branch Name  : ${ARG}
			        Build Id     : ${WH_BUILD_ID}
				Repository URL : ${CLONE_VALUE}


		        Thanks,
		        Integration-Team
	EOF
}

updateExactSrc() {
	zrepo_cln_val=$(echo $CLONE_VALUE | grep "repository.zoho.com")

	if [ "${REPOSITORY_TYPE}" = "HG" ]; then
		hg_grp_nam=$(echo $CLONE_VALUE | cut -d "/" -f4)
		if [ "$hg_grp_nam" = "zoho" -o "$hg_grp_nam" = "iphone" ]; then
			CLONE_VALUE_CLN=$(echo ${CLONE_VALUE} | sed -e "s@/$hg_grp_nam/@/zohoclone/@g")
		elif [ "$hg_grp_nam" = "android" -o "$hg_grp_nam" = "fw" -o "hg_grp_nam" = "integ" ]; then
			CLONE_VALUE_CLN=$(echo ${CLONE_VALUE} | sed -e "s@/$hg_grp_nam/@/meclone/@g")
		elif [ ${PRODUCT_NAME} != "APPMANAGER" -a "$hg_grp_nam" = "me" ]; then
			CLONE_VALUE_CLN=$(echo ${CLONE_VALUE} | sed -e "s@/$hg_grp_nam/@/meclone/@g")
		else
			CLONE_VALUE_CLN=$CLONE_VALUE
		fi
	else
		CLONE_VALUE_CLN=$CLONE_VALUE
	fi

	mkdir -p ${WORK_DIR}
	cd ${WORK_DIR}
	$1 ${CLONE_VALUE_CLN} ${ARG}
	if [ "${PRODUCT_NAME}" = "SUPPORTCENTER" ]; then
		SRC_CLONED_DIR="${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}"
		SRC_DEST_DIR="${WORK_DIR}/supportcenter_repo"
	#mv -fv ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME} ${WORK_DIR}/supportcenter_repo
	elif [ "${zrepo_cln_val}" ]; then
		SRC_CLONED_DIR="${WORK_DIR}"/"${MODULE_NAME}"
		SRC_DEST_DIR="${SOURCE_BASE_DIR}"
		#mv "${WORK_DIR}"/"${MODULE_NAME}" "${SOURCE_BASE_DIR}"
	else
		SRC_CLONED_DIR="${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME}"
		SRC_DEST_DIR="${SOURCE_BASE_DIR}"
	#mv ${REPO_MODULE_NAME}_SRC/${REPO_MODULE_NAME} ${SOURCE_BASE_DIR}
	fi

	if [ "${BUILD_RETRY}" = "SOURCE" ]; then
		copySrcOnRetry ${SRC_CLONED_DIR} ${SRC_DEST_DIR}
	else
		if [ "${PRODUCT_NAME}" != "HG_UTILS" ]; then
			mv ${SRC_CLONED_DIR} ${SRC_DEST_DIR}
		fi
	fi

	echo "final source copy under ${SOURCE_BASE_DIR}"
}

copySrcOnRetry() {
	RETRY_SRC_CLONED_DIR=$1
	RETRY_SRC_DEST_DIR=$2
	RETRY_SRC_LIST_FILE="${TIP_CHANGESET}_file_list.txt"
	if [ -f "${RETRY_SRC_LIST_FILE}" -a -s "${RETRY_SRC_LIST_FILE}" ]; then
		echo "[BUILD RETRY INFO] : Retry build Source copy started .. SRC_DIR:: ${RETRY_SRC_CLONED_DIR} and DEST_DIR:: ${RETRY_SRC_DEST_DIR}"
		for retry_flist in $(cat ${RETRY_SRC_LIST_FILE}); do
			cp -rvf ${RETRY_SRC_CLONED_DIR}/${retry_flist} ${RETRY_SRC_DEST_DIR}/${retry_flist}
			if [ $? -ne 0 ]; then
				echo "[BUILD RETRY INFO] : The following file ${RETRY_SRC_CLONED_DIR}/${retry_flist} not copied .."
			fi
		done
		replaceUrls "pre"
		if [ -d "${RETRY_SRC_CLONED_DIR}" ]; then
			rm -rf ${RETRY_SRC_CLONED_DIR}
			echo "${RETRY_SRC_CLONED_DIR} removed after source movement of build retry function."
		fi
		echo "[BUILD RETRY INFO] : Retry build Source copy ended .."
	else
		echo "[BUILD RETRY INFO] : There is no file available in latest commit of ${TIP_CHANGESET}. Build started without src changes.."
	fi
}

get_tplabel() {
	TEMP_PORT=$(echo ${WH_BUILD_ID} | awk '{print substr($0, length($0)-2)}')
	TEMP_PORT=$(expr 8000 + ${TEMP_PORT})
	BUILD_OPTS="${BUILD_OPTS} -Dbuild_id=${WH_BUILD_ID} -Dproduct_id=${PRODUCT_ID} -Dtemp_port=${TEMP_PORT} -Dproduct_name=${PRODUCT_NAME} -Dbranch_name=${ARG} -Dpdt_name=${PRODUCT_NAME} -Dbuild_lbl=${LABEL} -Dceph_copy_needed=${CEPH_COPY_NEEDED} -Dlyte_username=build -Dlyte_server=integ-hm18 -Dstarted_by=${BUILDBY}"

	if [ ! -z "$sub_list" ]; then
		BUILD_OPTS="${BUILD_OPTS} $sub_list"
	fi

	if [ "${PRODUCT_NAME}" = "COMPONENTS" ]; then
		BUILD_OPTS="${BUILD_OPTS}"
	else
		BUILD_OPTS="${BUILD_OPTS} -Dsec_js_zip="yes""
	fi

	if [ ! -z ${lyte_imagename} ]; then
		if [ ! -z ${lyte_loc_needed} -a ! -z ${lyte_npminstall_needed} ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dlinux_lyte_needed=yes -Dlyte_imagename=${lyte_imagename} -Dlyte_loc_needed=yes -Dlyte_npminstall_needed=yes"

		elif [ ! -z ${lyte_loc_needed} ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dlinux_lyte_needed=yes -Dlyte_imagename=${lyte_imagename} -Dlyte_loc_needed=yes"

		else
			BUILD_OPTS="${BUILD_OPTS} -Dlinux_lyte_needed=yes -Dlyte_imagename=${lyte_imagename}"
		fi
	else
		BUILD_OPTS="${BUILD_OPTS} -Dlinux_lyte_needed=no"

	fi

	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		BUILD_OPTS="${BUILD_OPTS} -Dandroid_ext_dep_web_cache_enabled=true"
	fi

}

clean() {
	logTime "Clean process " "Started"
	log_Files="${checkout_log} ${tagging_log} ${removal_log} ${patch_output} ${reports_log} ${EMPTY_FILES_LOG} ${KEY_WORDS_LOGS} ${HOME}/logs/${PRODUCT_NAME}.txt ${diff_log} ${labelcheck_log} ${HOME}/logs/changeset.txt ${HOME}/logs/hgclone.txt ${HOME}/logs/branch_checkout.log ${commit_det_log}"
	for files in ${log_Files}; do
		if [ -f "${files}" ]; then
			echo "${files} removed..."
			checkAndCleanDir "${files}"
		else
			echo "${files} is not present..."
		fi
	done
	if [ "${SOURCE_BASE_DIR}" != "${HOME}" -a "${SOURCE_BASE_DIR}" != "${HOME}/" -a "${SOURCE_BASE_DIR}" != " " -a "${SOURCE_BASE_DIR}" != "${HOME}/dload" ]; then
		echo ${SOURCE_BASE_DIR} | grep -i milestone >/dev/null
		if [ $? -eq 0 ]; then
			sendErrorMail "Source Base Dir contains milestone" "Source Base Dir contains milestone."
		elif [ -d "${SOURCE_BASE_DIR}" ]; then
			checkAndCleanDir "${SOURCE_BASE_DIR}" >${removal_log} 2>&1
			echo "Source Base Dir ${SOURCE_BASE_DIR} removed.."
		else
			echo "Source Base Dir ${SOURCE_BASE_DIR} is not present.."
		fi
	else
		echo "Either Source Base Dir is empty or Value of Source Base Dir contains dload. Source Base Dir cannot be removed. Hence exiting the build"
		sendErrorMail "Source Base Dir is empty" "Either Source Base Dir is empty or Value of Source Base Dir contains dload. Source Base Dir cannot be removed. Hence exiting the build."
	fi
	if [ -d "${WORK_DIR}/BRANCH_BUILD" ]; then
		cd ${WORK_DIR}/BRANCH_BUILD
		if [ -d "${WORK_DIR}/BRANCH_BUILD/HEAD" ]; then
			echo "${WORK_DIR}/BRANCH_BUILD/HEAD source removing"
			checkAndCleanDir "HEAD"
		fi
		if [ "${REVIEWED_LABEL_NAMES}" != "" ]; then
			echo "${WORK_DIR}/BRANCH_BUILD/${REVIEWED_LABEL_NAMES} source removing"
			cd "${WORK_DIR}/BRANCH_BUILD"
			checkAndCleanDir "${REVIEWED_LABEL_NAMES}"
		fi
	fi
	logTime "Clean process " "Ended"
}

getPreviousDailyBuildLabel_new() {
	if [ "${BUILD}" != "WEBHOST" -a "${BUILD}" != "CI" -a -z "${DAILY_BUILD_STATUS}" ]; then
		if [ -n "${PREV_DBUILD_LBL}" ]; then
			if [ ${PREV_DBUILD_LBL} != ${TIP_CHANGESET} ]; then
				DIFF_CONTENT="True"
			fi

			echo "DAILY BUILD STATUS : ${DAILY_BUILD_STATUS}"
			if [ -z "${DIFF_CONTENT}" -a -z "${DAILY_BUILD_STATUS}" ]; then
				echo "NOTIFICATION STATUS : ${NOTIFICATION_STATUS}"
				if [ -z "${NOTIFICATION_STATUS}" ]; then
					echo "There are no differences between ${PREV_DBUILD_LBL} and ${ARG} sources ..."
					echo "Hence quitting the build ..."
					mail -r "integration-team@zohocorp.com" -s "DailyBuild for ${PRODUCT_NAME} - ${ARG} build" "${SUCCESS_MAIL_ID}" <<-EOF
						                                        Dear Team,

						                                        There are no differences between ${PREV_DBUILD_LBL} and ${ARG} sources !!!

						                                        Hence quitting daily build !!!

						                                        Previous build url : ${PREV_DBUILD_URL}

						                                        Thanks & Regards,
						                                        Integration Team
					EOF
				fi
				echo "There are no differences between ${PREV_DBUILD_LBL} and ${ARG} sources. Hence quitting."
				EXIT_ERROR_MESSAGE="There are no differences between ${PREV_DBUILD_LBL} and ${ARG} sources. Hence quitting."
				echo "${EXIT_ERROR_MESSAGE}"
				echo "REASON_FOR_BUILD_FAILURE=\"Build_Failure_Due_to_no_diff:${EXIT_ERROR_MESSAGE}\"" >>${build_info_file}
				REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_ERROR_MESSAGE}"
				export REASON_FOR_BUILD_FAILURE
				BUILD_STATUS="FAILURE"
				export BUILD_STATUS
				copyBuilderrorlogs
				updateBuildDetails
				exit 1

			fi
		else
			mail -r "integration-team@zohocorp.com" -s "Previous DailyBuildLabel is empty for ${PRODUCT_NAME}" ${SUCCESS_MAIL_ID} <<-EOF
				                        Dear Team,

				                        Previous DailyBuildLabel is empty for ${PRODUCT_NAME}. Kindly check the same.

				                        Thanks,
				                        Integration-Team
			EOF
		fi
	fi
}

getBuildNumber() {
	TODAY=$(date +%b_%d_%Y)
	if [ -f ${BLD_NO_FILE} ]; then
		echo "${BLD_NO_FILE} file already avialable"
	else
		echo "10000" >${BLD_NO_FILE}
	fi
	BLD_NO=$(cat ${BLD_NO_FILE})
	BUILD_NUMBER=$(expr ${BLD_NO} + 1)
}

resolveWebHost() {
	case ${BUILD} in
	"WEBHOST" | "webhost")
		echo "Webhosted build"
		DL_DIR=${DLOAD_DIRECTORY}/webhost
		BASE_URL="${DOWNLOAD_URL}/webhost"
		BLD_TYPE="webhost/"
		;;
	"CI" | "ci")
		echo "CI build"
		DL_DIR=${DLOAD_DIRECTORY}/ci
		BASE_URL="${DOWNLOAD_URL}/ci"
		BLD_TYPE="ci/"
		;;
	*)
		echo "Cron Build"
		DL_DIR=${DLOAD_DIRECTORY}
		BASE_URL="${DOWNLOAD_URL}"
		BLD_TYPE=""
		;;
	esac
	if [ "${CUSTOMER_NAME}" != "DEFAULT" -a "${CUSTOMER_NAME}" != "" ]; then
		customer_dirname=$(echo ${CUSTOMER_NAME} | tr [A-Z] [a-z])
		DL_DIR="${DL_DIR}/${customer_dirname}"
		BASE_URL="${BASE_URL}/${customer_dirname}"
		BLD_TYPE="${BLD_TYPE}${customer_dirname}/"
	fi
	if [ "${CHOOSE_BUILD_TYPE}" = "CLIENT" ]; then
		echo "CLIENT BUILD HERE ...."
		DL_DIR="${DL_DIR}/client"
		BASE_URL="${BASE_URL}/client"
		BLD_TYPE="${BLD_TYPE}/client/"
	fi
}

resolveVariables() {
	DLOAD_DIR=${DL_DIR}/${ARG}
	URL="${BASE_URL}/${ARG}"
	if [ "${BUILD}" = "CI" ]; then
		ERROR_DIR=${DL_DIR}/${ARG}/ErrorLogs
	else
		ERROR_DIR=${DL_DIR}/${ARG}/ErrorLogs
	fi
	case ${ARG} in
	"HEAD")
		echo "Normal Build"
		LABEL_DIR="HEAD"
		LABEL_VAR="${PRODUCT_NAME}"
		;;
	"master")
		echo "master branch Build"
		LABEL_DIR="${ARG}"
		LABEL_VAR="${PRODUCT_NAME}"
		;;
	"${REVIEWED_LABEL}")
		echo "HEAD REVIEWED BUILD"
		LABEL_DIR="${ARG}"
		LABEL_VAR="${ARG}"
		;;
	"${REVIEWED_BRANCH_LABEL_NAME}")
		echo "REVIEWED BRANCH BUILD"
		LABEL_DIR="${REVIEWED_BRANCH_NAME}"
		LABEL_VAR="${REVIEWED_BRANCH_NAME}"
		;;
	"${CONFIGURED_REVIEWED_BRANCH_LABEL_NAME}")
		echo "CONFIGURED REVIEWED BRANCH BUILD"
		LABEL_DIR="${CONFIGURED_REVIEWED_BRANCH_NAME}"
		LABEL_VAR="${CONFIGURED_REVIEWED_BRANCH_NAME}"
		;;
	*)
		echo "BRANCH BUILD"
		LABEL_DIR="${ARG}"
		LABEL_VAR="${ARG}"
		;;
	esac
	if [ "${CUSTOMER_NAME}" != "DEFAULT" -a "${CUSTOMER_NAME}" != "" ]; then
		LABEL_DIR="${CUSTOMER_NAME}/${LABEL_DIR}"
		customer_sts_flag=$(echo "${LABEL_VAR}" | grep -w "${CUSTOMER_NAME}")
		if [ "${customer_sts_flag}" = "${LABEL_VAR}" ]; then
			echo "${ARG} build is a ${CUSTOMER_NAME} based build. So, No need to append ${CUSTOMER_NAME} tag"
		else
			echo "${ARG} build is not a ${CUSTOMER_NAME} based build."
			echo "${CUSTOMER_NAME} will be appended with Build Tag"
			LABEL_VAR=${LABEL_VAR}_${CUSTOMER_NAME}
			echo "Updated Build Tag : ${LABEL_VAR}"
		fi
	fi
}

resolveTarget() {
	TARGET_SUFIX=$(echo "${BUILD_TYPE}" | sed -e "s/BUILD//" | tr "[A-Z]" "[a-z]")
	TARGET=$(echo "target${TARGET_SUFIX}")
	echo "Target name : ${TARGET}"
}

resolveBuildDependency() {
	echo "resolveBuildDependency started at : " $(date "+%Y-%m-%d %T")
	reports_value=`echo $REPORT_NEEDED | tr [:upper:] [:lower:]`
        sec_reports_value=`echo $SECURITY_REPORTS_NEEDED | tr [:upper:] [:lower:]`
	if [ "${TEAMSPECIFIC_DEPENDENCY_TRIGGER}" != "YES" ]; then
		if [ -z ${CUSTOM_DEPENDENCY_BUILD_TRIGGER} ]; then
			if [ "${SPI_BUILDS}" != "NA" ]; then
				DEPENDENCY_BUILDS="${DEP_BUILDS},${SPI_BUILDS}"
			else
				DEPENDENCY_BUILDS="${DEP_BUILDS}"
			fi
			for dep_bld in $(echo ${DEPENDENCY_BUILDS} | tr "," " "); do
				dep_name=$(echo ${dep_bld} | cut -d "=" -f1 | cut -d ":" -f1)
				dep_prdId=$(echo ${dep_bld} | cut -d "=" -f1 | cut -d ":" -f2)
				dep_val=$(echo ${dep_bld} | cut -d "=" -f2)
				depBldUrl=$(echo ${dep_val} | grep "http://\|https://")
				depUrlOut=$(echo $?)
                                if [ "${dep_val}" != "DEFAULT" -a "${dep_val}" != "Default" -a "${dep_val}" != "http://" -a "${dep_val}" != "https://" -a -n "${dep_val}" ]
				then
					if [ ${depUrlOut} -ne 0 ]; then
						if [ "${SEQUENTIAL_BUILD}" = "YES" ]; then
							export ${dep_name}_BRANCH=${dep_val}
						else
							echo $depUrlOut
							echo "$dep_name does not have the value Default or http://, So triggering the dep build"
							echo "The dependency product of ${dep_name} build is started, once it got success the main build will started"
							curl -k -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs" -d "product_id=${dep_prdId}&checkout_label=${dep_val}&build_type=${BUILD_TYPE}&report_need=$reports_value&security_report_needed=$sec_reports_value&status=Start&started_from=Webhost&comment=${WH_BUILD_ID}&started_by_user=${BUILDBY}&success_mail=${SUCCESS_MAIL_ID}&error_mail=${ERROR_MAIL_ID}&instant_response=true" &
							echo "${dep_name}::" >> ${WORK_DIR}/dependency.txt
							export DEP_BUILD="STARTED"
               						checkDependentBuildStatus ${dep_name} ${dep_prdId}
						fi
					else
						echo "$dep_name  have the value http://"
						export ${dep_name}=${dep_val}
						if [ -n "${prev_dep_build}" ]; then
							previousDepBldId=$prev_dep_build,\"${dep_prdId}\":\"${dep_val}\"
							prev_dep_build=$(echo $previousDepBldId | sed "s/^,/{/g" | sed "s/$/}/g" | sed "s/},/,/g")
							export prev_dep_build
							echo ${prev_dep_build}
						else
							prev_dep_build="{\"${dep_prdId}\":\"${dep_val}\"}"
							echo "${dep_name} : ${dep_val}"
						fi
					fi
				else
					echo "$dep_name have the value Default"
					export ${dep_name}=${dep_val}
					echo "${dep_name} : ${dep_val}"
				fi
			done

			if [ "${BUILD_TASKS}" != "JAVA_JSP" ]; then
				getStartedDepBuildID
			fi
		fi
	else
		source ${CONF_DIR}/trigger_dependency_build.sh
		StartZMHierarchyBuilds
		wait
		getParallelTriggeredBuildStatus
		breakPrimaryBuild
	fi

	if [ "${CUSTOM_DEPENDENCY_BUILD_TRIGGER}" = "YES" -a "${BUILD_TASKS}" != "JAVA_JSP" ]; then
		echo "CUSTOM_DEPENDENCY_BUILD_TRIGGER started at : " $(date "+%Y-%m-%d %T")
		source ${WORK_DIR}/hg_utils/build/trigger_custom_dep_build.sh
		TriggerDepBuilds
		wait
		getParallelTriggeredBuildStatus
		breakPrimaryBuild
		echo "CUSTOM_DEPENDENCY_BUILD_TRIGGER ended at : " $(date "+%Y-%m-%d %T")

	fi
	echo "resolveBuildDependency started at : " $(date "+%Y-%m-%d %T")

}

getStartedDepBuildID() {
	touch ${WORK_DIR}/submodule_details.txt
	dep_sub_products=""
	if [ -n "${SUB_PRODUCT_DETAILS}" ]; then
		for subprd in $(echo ${SUB_PRODUCT_DETAILS} | tr "," "\n"); do
			DEP_SUBPRD_LBL=$(echo $subprd | cut -d "=" -f2 | cut -d ":" -f1)
			DEP_SUBPRD_ID=$(echo $subprd | cut -d "=" -f2 | cut -d ":" -f5)
			dep_sub_products=$dep_sub_products,\"${DEP_SUBPRD_ID}\":\"${DEP_SUBPRD_LBL}\"
			dep_sub_products=$(echo $dep_sub_products | sed "s/^,/{/g" | sed "s/$/}/g" | sed "s/},/,/g")
			export dep_sub_products
			echo ${dep_sub_products}
		done
	fi
	if [ "${SEQUENTIAL_BUILD}" = "YES" ]; then
		for seqlist in $(echo ${SEQ_BUILD_ORDER} | tr "," " "); do
			dpprd=$(echo $seqlist | cut -d "=" -f1 | cut -d ":" -f1)
			dpprdId=$(echo $seqlist | cut -d "=" -f1 | cut -d ":" -f2)
			#dpprdLabel=`echo $seqlist | cut -d "=" -f1 | cut -d ":" -f3`
			dpprdLabel=$(eval echo \${${dpprd}_BRANCH})
			export dpprd dpprdId dpprdLabel
			if [ -n "${dpprdLabel}" ]; then
				if [ -z ${prev_dep_build} ]; then
					if [ -z ${dep_sub_products} ]; then
						curl -k -X POST -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data '{ "product_id":"'"${dpprdId}"'", "checkout_label":"'"${dpprdLabel}"'", "build_type":"'"${BUILD_TYPE}"'", "report_need":"'"${reports_value}"'", "security_report_needed":"'"${sec_reports_value}"'", "status":"Start", "started_from":"Webhost", "comment":"'"${WH_BUILD_ID}"'", "started_by_user":"'"${BUILDBY}"'", "success_mail":"'"${SUCCESS_MAIL_ID}"'","error_mail":"'"${ERROR_MAIL_ID}"'", "static_version":"'"${STATIC_DIRNAME}"'", "dependency_builds":"'${prev_dep_build}'", "subproduct_labels":"'${dep_sub_products}'" }' ${cmtools_domain_name}/api/v1/buildlogs &
						echo "${dpprd}::" >> ${WORK_DIR}/dependency.txt
					else
						curl -k -X POST -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data '{ "product_id":"'"${dpprdId}"'", "checkout_label":"'"${dpprdLabel}"'", "build_type":"'"${BUILD_TYPE}"'", "report_need":"'"${reports_value}"'", "security_report_needed":"'"${sec_reports_value}"'", "status":"Start", "started_from":"Webhost", "comment":"'"${WH_BUILD_ID}"'", "started_by_user":"'"${BUILDBY}"'", "success_mail":"'"${SUCCESS_MAIL_ID}"'","error_mail":"'"${ERROR_MAIL_ID}"'", "static_version":"'"${STATIC_DIRNAME}"'", "dependency_builds":"'${prev_dep_build}'", "subproduct_labels":'${dep_sub_products}' }' ${cmtools_domain_name}/api/v1/buildlogs &
						echo "${dpprd}::" >> ${WORK_DIR}/dependency.txt
					fi
				else
					if [ -z ${dep_sub_products} ]; then
						curl -k -X POST -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data '{ "product_id":"'"${dpprdId}"'", "checkout_label":"'"${dpprdLabel}"'", "build_type":"'"${BUILD_TYPE}"'", "report_need":"'"${reports_value}"'", "security_report_needed":"'"${sec_reports_value}"'", "status":"Start", "started_from":"Webhost", "comment":"'"${WH_BUILD_ID}"'", "started_by_user":"'"${BUILDBY}"'", "success_mail":"'"${SUCCESS_MAIL_ID}"'","error_mail":"'"${ERROR_MAIL_ID}"'", "static_version":"'"${STATIC_DIRNAME}"'", "dependency_builds":'${prev_dep_build}', "subproduct_labels":"'${dep_sub_products}'" }' ${cmtools_domain_name}/api/v1/buildlogs &
						echo "${dpprd}::" >> ${WORK_DIR}/dependency.txt
					else
						curl -k -X POST -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data '{ "product_id":"'"${dpprdId}"'", "checkout_label":"'"${dpprdLabel}"'", "build_type":"'"${BUILD_TYPE}"'", "report_need":"'"${reports_value}"'", "security_report_needed":"'"${sec_reports_value}"'", "status":"Start", "started_from":"Webhost", "comment":"'"${WH_BUILD_ID}"'", "started_by_user":"'"${BUILDBY}"'", "success_mail":"'"${SUCCESS_MAIL_ID}"'","error_mail":"'"${ERROR_MAIL_ID}"'", "static_version":"'"${STATIC_DIRNAME}"'", "dependency_builds":'${prev_dep_build}', "subproduct_labels":'${dep_sub_products}' }' ${cmtools_domain_name}/api/v1/buildlogs &
						echo "${dpprd}::" >> ${WORK_DIR}/dependency.txt
					fi
				fi
				export DEP_BUILD="STARTED"
				#getStartedDepBuildID

				# sleep 30
				# STARTED_BUILDID=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?comment=${WH_BUILD_ID}")
				# if [ -z "${STARTED_BUILDID}" ]; then
				# 	sleep 30
				# 	STARTED_BUILDID=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?comment=${WH_BUILD_ID}")
				# fi
				# MULTI_BLDID=$(echo $STARTED_BUILDID | grep ",")
				# MULTIBLD_EXISTS=$(echo $?)
				# if [ ${MULTIBLD_EXISTS} -eq 0 ]; then
				# 	for depbldId in $(echo $STARTED_BUILDID | tr "," " " | sed -e "s@\"@@g"); do
				# 		checkDependentBuildStatus ${dpprd} ${dpprdId}
				# 	done
				# else
				# 	STARTED_BUILDID=$(echo $STARTED_BUILDID | sed -e "s@\"@@g")
				# 	checkDependentBuildStatus ${STARTED_BUILDID} ${dpprd}
				# fi
				checkDependentBuildStatus ${dpprd} ${dpprdId}
			fi
		done
	fi

	if [ "${DEP_BUILD}" = "STARTED" ]; then
		if [ -z ${SEQUENTIAL_BUILD} ]; then
			echo "Inside non-parallel build checking ---------->"
			#checkDependentBuildStatus ${dep_name} ${depbldId}
			# sleep 30
			# STARTED_BUILDID=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?comment=${WH_BUILD_ID}")
			# MULTI_BLDID=$(echo $STARTED_BUILDID | grep ",")
			# MULTIBLD_EXISTS=$(echo $?)
			# if [ ${MULTIBLD_EXISTS} -eq 0 ]; then
			# 	for depbldId in $(echo $STARTED_BUILDID | tr "," " " | sed -e "s@\"@@g"); do
			# 		checkDependentBuildStatus ${depbldId} ${dep_name}
			# 	done
			# else
			# 	STARTED_BUILDID=$(echo $STARTED_BUILDID | sed -e "s@\"@@g")
			# 	checkDependentBuildStatus ${STARTED_BUILDID} ${dep_name}
			# fi
		fi
	fi
	breakPrimaryBuild
}

getParallelTriggeredBuildStatus() {
	if [ -f "${WORK_DIR}/paralleltriggered_builds.txt" ]; then
		for bldlist in $(cat ${WORK_DIR}/paralleltriggered_builds.txt | tr "\n" " "); do
			parallel_bldPrdName=$(echo $bldlist | cut -d ":" -f1)
			parallel_bldPrdId=$(echo $bldlist | cut -d ":" -f2)
			checkDependentBuildStatus ${parallel_bldPrdName} ${parallel_bldPrdId}
			# STARTED_BUILDID=$(curl -k -X GET -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?comment=${WH_BUILD_ID}&product_id=$parallel_bldPrdId")
			# MULTI_BLDID=$(echo $STARTED_BUILDID | tr "," " " | sed -e "s@\"@@g")

			# checkDependentBuildStatus ${MULTI_BLDID} ${parallel_bldPrdName}
		done
	fi
}

breakPrimaryBuild() {
	if [ -f ${LOGS_DIR}/dependency_buildstatus.txt ]; then
		failedprds=""
		for failedprd in $(cat ${LOGS_DIR}/dependency_buildstatus.txt | tr "\n" " "); do
			FPRD=$(echo $failedprd | cut -d "=" -f1)
			failedprds=$failedprds+$FPRD
			failedprds=$(echo $failedprds | sed -e "s@+@ @g")
		done
		echo "The ${failedprds} dependency product builds got failed"
		export BUILD_STATUS="FAILURE"
		EXIT_MESSAGE="The ${failedprds} dependency product builds got failed"
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		updateBuildDetails
		exit 1
	fi
}

log_message() {
    message="${1}"
    LOG_TYPE="INFO"
    if [ -n "${2}" ]; then
        LOG_TYPE="${2}"
    fi
    timestamp="$(date +"%Y-%m-%d %T")"
    echo "${LOG_TYPE} [${timestamp}] :::: `echo ${message} | fold -s -w 170 | awk 'NR==1 {print} NR>1 {print "\t\t\t\t" $0}'`"
}

fetchDependencyUrlFromFile(){
	DEP_PRD_NAME="${1}"
	DEP_PRD_ID="${2}"
        depen_file="dependency.txt"
        dep_file_path="${WORK_DIR}/${depen_file}"
        if [ -f "${dep_file_path}" -a -n "${DEP_PRD_NAME}" ];then
                if grep -q "${DEP_PRD_NAME}" ${dep_file_path}; then
                        dep_details="`grep -w "${DEP_PRD_NAME}" ${dep_file_path}`"
                        dep_bld_status="`echo "${dep_details}" | cut -d ":" -f2`"
                        dep_bld_url="`echo "${dep_details}" | cut -d ":" -f3-`"
                        export ${DEP_PRD_NAME}_dep_bld_url="`echo "${dep_details}" | cut -d ":" -f3-`"
					if [ -n "${dep_bld_status}" ]; then
						if [[ "${dep_bld_status}" =~ .*"Stopped".* ]] || [[ "${dep_bld_status}" = "FAILURE" ]]; then
							log_message "Dependency Product(${DEP_PRD_NAME}) Build has failed which message/link is ${dep_bld_url}. Hence quitting the build."
							export BUILD_STATUS="FAILURE"
							copyBuilderrorlogs
							echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >> ${build_info_file}
							REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
							export REASON_FOR_BUILD_FAILURE
							invokePostBuildAPI
							updateBuildDetails
							dep_bld_url=""
							exit 1
							break;
                                                elif [ "${dep_bld_status}" = "SUCCESS" ]; then
                                                        log_message "Dependency Product(${DEP_PRD_NAME}) Build got succeeded which build link is ${dep_bld_url}"
                                                        log_message "${DEP_PRD_NAME}=${dep_bld_url}"
                                                        dep_bld_url="`echo ${dep_bld_url%/}`"
							log_message "Dependency Build URL after removed the trailing slash ${dep_bld_url}"
                                                        depen_BldUrl="`curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?dep_Successbld=${dep_bld_url}"`"
						        log_message "DepenBuildUrl :::: ${depen_BldUrl}"
                                                        if [ "${depen_BldUrl}" =~ .*"<html>".* ]; then
                                                            depen_BldUrl="`curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?dep_Successbld=${dep_bld_url}"`"
						            log_message "DepenBuildUrl1 :::: ${depen_BldUrl}"
                                                        fi
						        log_message "DepenBuildUrl after retry :::: ${depen_BldUrl}"
                                                        depBldZip="`echo ${depen_BldUrl} | jq ".BLD_URL" | sed 's/\"//g'`"
						        log_message "DepenBuildUrl's DependencyBuildZip :::: ${depBldZip}"
                                                        if [ -n "${depBldZip}" ]; then
                                                            depurlzip="${depBldZip}"
                                                        else
                                                            depurlzip="${dep_bld_url}"
                                                        fi
						        log_message "DependencyBuildUrl Along with BinaryName :::: ${depurlzip}"
                                                        export ${DEP_PRD_NAME}=${depurlzip}

                                                        DEPENDENCY_BUILDS=`echo ${DEPENDENCY_BUILDS} | sed "s@${DEP_PRD_NAME}:[0-9]=*[^,]*,@${DEP_PRD_NAME}:${DEP_PRD_ID}=${depurlzip},@g"`
                                                        export ${DEP_PRD_NAME}=${depurlzip}
                                                        log_message "DEPENDENCY BUILDS ::: ${DEPENDENCY_BUILDS}"
                                                        export DEPENDENCY_BUILDS
                                                        previousBldId=$prev_dep_build,\"${DEP_PRD_ID}\":\"${depurlzip}\"
                                                        prev_dep_build=`echo $previousBldId | sed "s/^,/{/g" | sed "s/$/}/g" | sed "s/},/,/g"`
                                                        export prev_dep_build
                                                        echo ${DEP_PRD_ID}:${depbldId}=${depurlzip} >> ${WORK_DIR}/submodule_details.txt
							dep_bld_url=""
                                                        break;
                                                fi
					fi
                fi
        fi
}

checkDependentBuildStatus()
{
	echo -e "${1} VALUE IS :::: ${!1}"
        sleep_timeout_settings="30"
        DEP_URL=`eval echo \\${${1}_dep_bld_url}`
	while [ -z "${DEP_URL}" ]; do
                fetchDependencyUrlFromFile ${1} ${2}
                DEP_URL=`eval echo \\${${1}_dep_bld_url}`
		if [ -z "${DEP_URL}" ]; then
                        log_message "The dependency build(${1}) has not completed yet. Retrying to fetch the status with the specified sleep timeout(${sleep_timeout_settings}) settings." "INFO"
                        sleep ${sleep_timeout_settings}
		else
			break;
	        fi
        done
}

### TeamSpecific method invocation use. #######
getDependentBuildStatus_OLD() {
	echo "getDependentBuildStatus started at : " $(date "+%Y-%m-%d %T")
	sec_build_prdName=$1
	sec_prod_id=$2
	primary_build_id=$3
	primary_prod_id=$4
	pre_lyte_build_changeset=$5

	echo "getModifiedsource_api calling"
	API="${cmtools_domain_name}/api/v1/repo/get_build_diff?"
	PARAMS="repo_link=${CLONE_VALUE}&revision1=${pre_lyte_build_changeset}&revision2=${TIP_CHANGESET}&files_only=true"
	PARAMS_VAL="repo_link=${CLONE_VALUE}&revision1=${pre_lyte_build_changeset}&revision2=${TIP_CHANGESET}&files_only=true"
	mod_src_files=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${API}${PARAMS}")

	echo "${API}${PARAMS_VAL}"
	modified_src_files=$(echo $mod_src_files | cut -d ":" -f2 | sed 's/[\[\]//' | sed 's/[\"]\]/"/' | sed 's/[\}\]//')
	echo $modified_src_files
	lyte_webapps=$(echo $modified_src_files | grep -Ew "(webapps/zohocrm/CRMClient|webapps/zohocrm/css/style|webapps/zohocrm/css/lessconfig|webapps/zohocrm/CRMOrganization)")
	if [ ! -z $lyte_webapps ]; then
		echo "Get_Dep_Build_changeset:" "${pre_lyte_build_changeset}"
		getDeptip_changeset_val=$(echo ${getDeptip_changeset} | cut -d "=" f2)
		echo "Get_Dep_Repo_changset:" "${getDeptip_changeset_val}"
		if [ "${pre_lyte_build_changeset}" != "${getDeptip_changeset_val}" ]; then
			LYTE_IMAGE=$(cat ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/ant.properties | grep "lyte_cli_image_path" | cut -d "=" -f2)
			echo ${LYTE_IMAGE}

			TRIGER_BUILD="YES"
		else
			echo "Previous build and repo current tip changeset source are doesn't contain crmClient so build not triggered."
		fi

	fi

	echo "TRIGER_BUILD=" "${TRIGER_BUILD}"

	if [ "${TRIGER_BUILD}" = "YES" ]; then

		LYTE_IMAGE=$(cat ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/ant.properties | grep "lyte_cli_image_path" | cut -d "=" -f2)
		echo ${LYTE_IMAGE}
		echo "[$(date "+%Y-%m-%d %T")] :: INFO :: ZOHOCRM_LYTE Curl Command Started..."
		curl -k -X POST -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data '{ "product_id":"4752", "checkout_label":"main", "build_type":"FULLBUILD", "report_need":"false", "status":"Start", "started_from":"Webhost", "comment":"'"${WH_BUILD_ID}"'", "started_by_user":"'"${BUILDBY}"'", "success_mail":"'"${SUCCESS_MAIL_ID}"'","error_mail":"'"${ERROR_MAIL_ID}"'", "static_version":"NA", "dependency_builds":"", "customize_info":"LYTE_IMAGE_NAME='"${LYTE_IMAGE}"'","subproduct_labels":{"'"${primary_prod_id}"'":"'"${ARG}"'"}, "instant_response":"true" }' ${cmtools_domain_name}/api/v1/buildlogs
		echo "[$(date "+%Y-%m-%d %T")] :: INFO :: ZOHOCRM_LYTE Curl Command Ended..."
                echo "ZOHOCRM_LYTE::" >> ${WORK_DIR}/dependency.txt

		sleep 10

		SEC_STARTED_BUILDID=$(curl -k -X GET -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "https://cmtools-api.csez.zohocorpin.com/api/v1/buildlogs?comment=${primary_build_id}&product_id=$sec_prod_id")
		SEC_MULTI_BLDID=$(echo $SEC_STARTED_BUILDID | tr "," " " | sed -e "s@\"@@g")
		SEC_MULTIBLD_EXISTS=$(echo $?)

		checkDependentBuildStatus $SEC_MULTI_BLDID $sec_build_prdName
	fi
	echo "getDependentBuildStatus ended at : " $(date "+%Y-%m-%d %T")
}

checkDependentBuildStatusOLD() {
	depbldId=$1
	dep_PrdName=$2
	#previousBldId=""
	DEPBLD_STATUS=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?secondary_buildId=${depbldId}")
	stat=$(echo $DEPBLD_STATUS | sed -e "s@\"@@g")

	holdBuildProcess $stat

	echo "Build Status at the starting of check status method for ${depbldId} is =====> ${stat}"

	if [ $stat != "Success" -o $stat != "Failure" ]; then
		DEPBLD_STATUS=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?secondary_buildId=${depbldId}")
		stat=$(echo $DEPBLD_STATUS | sed -e "s@\"@@g")
	fi

	holdBuildProcess $stat
	dependency_bldstat=$(echo $stat | grep "Started")

	echo "Inside checkDependentBuildStatus method and values of BldId----->DepPrdName----->BuildStatus=====>${depbldId}------>${dep_PrdName}----->${stat}"

	#if [ -n "${dependency_bldstat}" ]
	#then
	bld_cnt=0
	echo "Build Status before starting of while loop for ${depbldId} is =====> ${stat}"
	while [ $stat != "Success" -o $stat != "Failure" ]; do
		DEPBLD_STATUS=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?secondary_buildId=${depbldId}")
		stat=$(echo $DEPBLD_STATUS | sed -e "s@\"@@g")
		holdBuildProcess $stat
		echo "Build Status inside the while loop for ${depbldId} is =====> ${stat}"
		if [ -z "${stat}" ]; then
			echo "Build Status is empty inside the while loop for ${depbldId} so retrying to get the status"
			sleep 10
			DEPBLD_STATUS=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?secondary_buildId=${depbldId}")
			stat=$(echo $DEPBLD_STATUS | sed -e "s@\"@@g")
			echo "Once empty status received inside the while loop, after retrying for ${depbldId} is =====> ${stat}"

			bld_cnt=$(expr $bld_cnt + 1)
			if [ "$bld_cnt" -eq 3 ]; then
				echo $bld_cnt
				echo "${dep_PrdName}=CmTools Submodule DB updation Failed." >>${LOGS_DIR}/dependency_buildstatus.txt
				echo "FAILURE"
				export BUILD_STATUS="FAILURE"
				copyBuilderrorlogs
				EXIT_MESSAGE="The ${depbldId} dependency product builds got failed"
				echo "${EXIT_MESSAGE}"
				echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
				REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
				export REASON_FOR_BUILD_FAILURE
				updateBuildDetails
				exit 1
				break
			fi

		fi
		if [ $stat = "Failure" ]; then
			depend_BldUrl=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?dep_Successbld=${depbldId}")
			DEP_BLD_URL=$(echo $depend_BldUrl | cut -d "," -f3 | cut -d ":" -f2- | sed -e "s@}@@g" | sed -e "s@\"@@g")
                        DEP_PRD_NAME=$(echo $depend_BldUrl | cut -d "," -f2 | cut -d ":" -f2- | sed -e "s@}@@g" | sed -e "s@\"@@g")
			DEP_BLD_URL_VAL=$(echo ${DEP_BLD_URL} | grep ".zip")
			echo $DEP_BLD_URL_VAL
			if [ -z $DEP_BLD_URL_VAL ]; then
				FAILED_URL="$DEP_BLD_URL"

			else
				FAILED_URL=$(dirname $DEP_BLD_URL)

			fi

			mkdir -p ${BUILD_DIR}
			echo "Dependency builds failed and its details are mentioned below" >>${BUILD_DIR}/build.log
			echo $DEP_PRD_NAME=$FAILED_URL >>${BUILD_DIR}/build.log
			echo "${DEP_PRD_NAME}=FAILURE" >>${LOGS_DIR}/dependency_buildstatus.txt
			echo "FAILURE"
			export BUILD_STATUS="FAILURE"
			copyBuilderrorlogs
			EXIT_MESSAGE="The ${DEP_PRD_NAME} dependency product builds got failed"
			echo "${EXIT_MESSAGE}"
			echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
			export REASON_FOR_BUILD_FAILURE
			invokePostBuildAPI
			updateBuildDetails
			exit 1
			break
		elif [ $stat = "Stopped" ]; then
			echo "${dep_PrdName}=Stopped" >>${LOGS_DIR}/dependency_buildstatus.txt
			echo "Stopped"
			export BUILD_STATUS="FAILURE"
			copyBuilderrorlogs
			EXIT_MESSAGE="The ${depbldId} dependency product builds got failed"
			echo "${EXIT_MESSAGE}"
			echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
			export REASON_FOR_BUILD_FAILURE
			updateBuildDetails
			exit 1
			break
		elif [ $stat = "Success" ]; then
			depend_BldUrl=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/buildlogs?dep_Successbld=${depbldId}")
			DEP_PRD_ID=$(echo $depend_BldUrl | cut -d "," -f1 | cut -d ":" -f2 | sed -e "s@\"@@g")
			DEP_PRD_NAME=$(echo $depend_BldUrl | cut -d "," -f2 | cut -d ":" -f2 | sed -e "s@\"@@g")
			DEP_BLD_URL=$(echo $depend_BldUrl | cut -d "," -f3 | cut -d ":" -f2- | sed -e "s@}@@g" | sed -e "s@\"@@g")
			export ${DEP_PRD_NAME}=${DEP_BLD_URL}
			#DEPENDENCY_BUILDS=`echo ${DEPENDENCY_BUILDS} | sed "s@${DEP_PRD_NAME}=\([^,]*\),@${DEP_PRD_NAME}=${DEP_BLD_URL},@g"`
			DEPENDENCY_BUILDS=$(echo ${DEPENDENCY_BUILDS} | sed "s@${DEP_PRD_NAME}:[0-9]=*[^,]*,@${DEP_PRD_NAME}:${DEP_PRD_ID}=${DEP_BLD_URL},@g")
			export DEPENDENCY_BUILDS
			previousBldId=$prev_dep_build,\"${DEP_PRD_ID}\":\"${DEP_BLD_URL}\"
			prev_dep_build=$(echo $previousBldId | sed "s/^,/{/g" | sed "s/$/}/g" | sed "s/},/,/g")
			export prev_dep_build
			echo ${prev_dep_build}
			echo ${DEP_PRD_ID}:${depbldId}=${DEP_BLD_URL} >>${WORK_DIR}/submodule_details.txt
			break
			#continue;
		fi
	done
	#fi
}

holdBuildProcess() {
	fetched_bldstat=$1
	sleep 30
	hostResolveErr=$(echo $fetched_bldstat | grep "Could not resolve host: cmtools.csez.zohocorpin.com; Unknown error")
	if [ -n "${hostResolveErr}" ]; then
		echo "Inside if condition for Host Resolve Error status and hostResolveErr value is =====>${hostResolveErr}"
		sleep 30
	fi
}

replaceUrls() {
	process_stage=$1
	changed_urls=$(cat ${WORK_DIR}/hg_utils/build/url_replace.txt | tr "\n" " ")
	for i_url in $(echo ${changed_urls}); do
		if [ "${i_url}" != "" ]; then
			old_pdt_url=$(echo ${i_url} | cut -d "@" -f1)
			new_pdt_url=$(echo ${i_url} | cut -d "@" -f2)
			if [ "${process_stage}" = "pre" ]; then
				pdt_name=$(basename ${old_pdt_url})
				ant_prop_files=$(find ${SOURCE_BASE_DIR} -iname "ant.properties" | tr "\n" " ")
				if [ "${ant_prop_files}" != "" ]; then
					perl -w -e "s@integ-ci.csez.zohocorpin.com@zoho-build3@g" -p -i ${ant_prop_files}
					perl -w -e "s@zoho-build3.csez.zohocorpin.com@zoho-build3@g" -p -i ${ant_prop_files}
					perl -w -e "s@${old_pdt_url}@${new_pdt_url}@g" -p -i ${ant_prop_files}
					perl -w -e "s@http://integ-ci/products/${pdt_name}@http://zoho-build3/products/${pdt_name}@g" -p -i ${ant_prop_files}
					perl -w -e "s@${old_pdt_url}@${new_pdt_url}@g" -p -i ${ant_prop_files}
					perl -w -e "s@integ-ci/products/zohobooks@build/zoho/zohobooks@g" -p -i ${ant_prop_files}
				fi
				perl -w -e "s@${old_pdt_url}@${new_pdt_url}@g" -p -i ${WORK_DIR}/${PRODUCT_NAME}.txt
				perl -w -e "s@http://integ-ci/products/${pdt_name}@http://zoho-build3/products/${pdt_name}@g" -p -i ${WORK_DIR}/${PRODUCT_NAME}.txt
				perl -w -e "s@${old_pdt_url}@${new_pdt_url}@g" -p -i ${WORK_DIR}/${PRODUCT_NAME}.txt
			elif [ "${process_stage}" = "post" ]; then
				perl -w -e "s@${new_pdt_url}@${old_pdt_url}@g" -p -i ${BUILD_DIR}/urls.html
			fi
		fi
	done

}

replaceLinkToValidUrl() {

	echo "replaceLinkToValidUrl started at : " $(date "+%Y-%m-%d %T")
	if [ "${PRODUCT_NAME}" = "ZOHOPROJECTS" ]; then
		LAT_URL1=$(cat ${BUILD_DIR}/ant.properties | grep "^[\s]*\(.*\)=[\s]*\(http://.*\)" | grep "/latest/")
	else
		LAT_URL1=$(cat ${BUILD_DIR}/ant.properties | grep "^[\s]*\(.*\)=[\s]*\(http://.*\)" | grep "/latest/")
	fi
	LAT_URL2=$(cat ${BUILD_DIR}/ant.properties | grep "^[\s]*\(.*\)=[\s]*\(https://.*\)" | grep "/latest/")
	LAT_URL="${LAT_URL1} ${LAT_URL2}"

	if [ -n "${LAT_URL}" ]; then
		for bldurl in $(echo $LAT_URL | tr " " "\n"); do
			antVariable=$(echo $bldurl | cut -d "=" -f1)
			urlPath=$(echo $bldurl | cut -d "=" -f2)
			local_path=$(echo $urlPath | sed "s@${http_domain_name}@/zoho/build/downloads/dload/@g" | sed "s@${https_domain_name}@/zoho/build/downloads/dload/@g")
			origPath=$(readlink -f ${local_path})
			if [ -n "${origPath}" ]; then
				origUrl=$(echo ${origPath} | sed "s@/zoho/build/downloads/dload/@${http_domain_name}@g")
				echo "Dependency url ${bldurl} to be replaced as ====> ${antVariable}=${origUrl}"
				sed -i "s@${bldurl}@${antVariable}=${origUrl}@g" $BUILD_DIR/ant.properties
			fi
		done
	fi

	LAT_URL_HTTP=$(cat ${BUILD_DIR}/ant.properties | grep "^[\s]*\(.*\)=[\s]*\(https://.*\)")
	LAT_URL_CSEZ="${LAT_URL_HTTP}"

	if [ -n "${LAT_URL_CSEZ}" ]; then
		for bldurlcsez in $(echo $LAT_URL_CSEZ | tr " " "\n"); do
			antVariable_https=$(echo $bldurlcsez | cut -d "=" -f1)
			urlPath_https=$(echo $bldurlcsez | cut -d "=" -f2)
			origUrl_http=$(echo ${urlPath_https} | sed "s@${https_domain_name}@${http_domain_name}@g")
			sed -i "s@${bldurlcsez}@${antVariable_https}=${origUrl_http}@g" $BUILD_DIR/ant.properties
		done
	fi
	echo "replaceLinkToValidUrl ended at : " $(date "+%Y-%m-%d %T")

}

appendDependencyUrls() {
	mv ${WORK_DIR}/submodule_details.txt ${LOGS_DIR}/
	replaceLinkToValidUrl
	replaceUrls "pre"
	DEP_BLD_OPTS=""
	if [ ${PRODUCT_NAME} != "SDPLIVE" ]; then
                sed -i "s@http://build/@https://build.zohocorp.com/@g" ${BUILD_DIR}/ant.properties
        sed -i "s@https://build/@https://build.zohocorp.com/@g" ${BUILD_DIR}/ant.properties
        sed -i "s@https://build.csez.zohocorpin.com/@https://build.zohocorp.com/@g" ${BUILD_DIR}/ant.properties
        sed -i "s@http://build.csez.zohocorpin.com/@https://build.zohocorp.com/@g" ${BUILD_DIR}/ant.properties
		cat ${BUILD_DIR}/ant.properties | grep "^[\\s]*\(.*\)=[\\s]*\(http\(.*\)://.*\)" | grep -v "^[[:space:]]*#" | grep -Ev "_tok|_value|_hgroot" >${BUILD_DIR}/temp_dependency_details.txt
		sed -i "s@http://build/@https://build.zohocorp.com/@g" ${BUILD_DIR}/temp_dependency_details.txt
		sed -i "s@https://build/@https://build.zohocorp.com/@g" ${BUILD_DIR}/temp_dependency_details.txt
		sed -i "s@https://build.csez.zohocorpin.com/@https://build.zohocorp.com/@g" ${BUILD_DIR}/temp_dependency_details.txt
		echo "Dependency Builds list in appendDependencyUrls beginning ====> ${DEPENDENCY_BUILDS}"
		for dep_bld in $(echo ${DEPENDENCY_BUILDS} | tr "," " "); do
			dep_bld="$(echo ${dep_bld} | sed -e "s@http://build/@https://build.zohocorp.com/@g")"
			dep_name=$(echo ${dep_bld} | cut -d "=" -f1 | cut -d ":" -f1)
			dep_val=$(echo ${dep_bld} | cut -d "=" -f2)
			export ${dep_name}="${dep_val}"
			if [ "${dep_val}" != "" -a "${dep_val}" != "NA" -a "${dep_val}" != "DEFAULT" ]; then
				dep_prod_url=$(echo ${dep_val} | sed 's@\(.*\)webhost\(.*\)@\1@g' | sed 's@\(.*\)milestones\(.*\)@\1@g' | grep "http:\|https:")
				dep_prod_param=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "${dep_prod_url}" | grep -Ev "grid_server.zip|appserver_container.zip" | cut -d "=" -f1)
				if [ -n "${dep_prod_url}" -a -z "${dep_prod_param}" ]; then
					#dep_prod_url=`echo ${dep_val} | grep -o "http://[a-zA-Z0-9_-]*\/[a-zA-Z0-9_-]*\/[a-zA-Z0-9_-]*\/" | grep "http:"`
					dep_prod_url=$(echo ${dep_val} | cut -d '/' -f1-5 | grep -E "(http://|https://)")
					dep_prod_param=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "${dep_prod_url}" | grep -Ev "grid_server.zip|appserver_container.zip" | cut -d "=" -f1)
					echo "dep_prod_url:::: ${dep_prod_url}"
					echo "dep_prod_param:::: ${dep_prod_param}"
				fi
				if [ -n "${dep_prod_url}" -a -n "${dep_prod_param}" ]; then
					for i in $(echo ${dep_prod_param}); do
						dep_prod_dirname=$(dirname ${dep_val})
						dep_prod_val=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "^${i}=\(.*\)" | grep "zip$")
						excluded_dep_param_search=$(echo ${EXCLUDED_DEP_PARAMS} | grep -w "$i")
						if [ -n "${dep_prod_val}" -a -z "${excluded_dep_param_search}" ]; then
							dep_prod_basename=$(basename ${dep_prod_val})
							if [ "${dep_prod_basename}" = "ZohoMickeyLite.zip" ]; then
								dep_prod_basename="mickeylite/${dep_prod_basename}"
							elif [ "${dep_prod_basename}" = "ZohoMickeyLiteClient.zip" ]; then
								dep_prod_basename="mickeylite_client/${dep_prod_basename}"
							fi
							if [ "${dep_name}" = "ZOHOWMS_API" ]; then

								DEP_BLD_OPTS="${DEP_BLD_OPTS} -D${i}=${dep_val}"
								BUILD_OPTS="${BUILD_OPTS} -D${i}_download_url=${dep_val} -D${i}=${dep_val}"
							else
								DEP_BLD_OPTS="${DEP_BLD_OPTS} -D${i}=${dep_prod_dirname}/${dep_prod_basename}"
								BUILD_OPTS="${BUILD_OPTS} -D${i}_download_url=${dep_prod_dirname}/${dep_prod_basename} -D${i}=${dep_prod_dirname}/${dep_prod_basename}"
							fi
						fi
					done
				fi
			fi
		done

		BRANCH_CHK=$(echo $ARG | grep -E "RB_BRANCH$|RB_BRANCH_REVIEWED$|ZOHOCRM_REVIEWED|HF_BRANCH|HF_BRANCH_REVIEWED$")
		if [ "${PRODUCT_NAME}" = "ZOHOCRM" -a "${BUILD_TASKS}" != "JAVA_JSP" ]; then
			if [ ! -z ${BRANCH_CHK} ]; then
				for sasurl in $(echo ${ALLOWED_SAS_BUILDS} | tr "," " "); do
					URL_MATCH=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "${sasurl}")
					if [ ! -z ${URL_MATCH} ]; then
						SAS_URL=$(echo $URL_MATCH | cut -d "=" -f2)
						BUILD_OPTS="${BUILD_OPTS} -Dsaslite_path=${SAS_URL}"
						break
					fi
				done
				if [ -z ${URL_MATCH} ]; then
					mail -r "integration-team@zohocorp.com" -s "Saslite build url mismatch error for ${ARG}" "${ERROR_MAIL_ID}" <<-EOF

						                                Saslite url mentioned is not mathced with available builds.

						                                Branch Name : ${ARG}

						                                Build-Id : ${WH_BUILD_ID}
					EOF
					BUILD_STATUS="FAILURE"
					export BUILD_STATUS
					EXIT_MESSAGE="Saslite url mentioned is not mathced with available builds... Hence exiting .."
					echo "${EXIT_MESSAGE}"
					echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
					REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
					export REASON_FOR_BUILD_FAILURE
					copyBuilderrorlogs
					updateBuildDetails
					postbuildteamspecific
					exit 1
				fi

				for logsurl in $(echo ${ALLOWED_LOGS_BUILDS} | tr "," " "); do
					LOGSURL_MATCH=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "${logsurl}")
					if [ ! -z ${LOGSURL_MATCH} ]; then
						LOGS_URL=$(echo $LOGSURL_MATCH | cut -d "=" -f2)
						BUILD_OPTS="${BUILD_OPTS} -Dcentrallogs_url=${LOGS_URL}"
						break
					fi
				done
				if [ -z ${LOGSURL_MATCH} ]; then
					echo "Zohologserver url mentioned is not mathced with available builds."

					mail -r "integration-team@zohocorp.com" -s "Zohologserver build url mismatch error for ${ARG}" "${ERROR_MAIL_ID}" <<-EOF

						                           Zohologserver url mentioned is not mathced with available builds.

						                           Branch Name : ${ARG}

						                           Build-Id : ${WH_BUILD_ID}
					EOF
					BUILD_STATUS="FAILURE"
					export BUILD_STATUS
					EXIT_MESSAGE="Zohologserver url mentioned is not matched with available builds... Hence exiting .."
					echo "${EXIT_MESSAGE}"
					echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
					REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
					export REASON_FOR_BUILD_FAILURE
					copyBuilderrorlogs
					updateBuildDetails
					postbuildteamspecific
					exit 1
				fi

				for storeurl in $(echo ${ALLOWED_STORE_BUILDS} | tr "," " "); do
					STOREURL_MATCH=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "${storeurl}")
					if [ ! -z ${STOREURL_MATCH} ]; then
						STORE_URL=$(echo $STOREURL_MATCH | cut -d "=" -f2)
						BUILD_OPTS="${BUILD_OPTS} -Dzohostore_url=${STORE_URL}"
						break
					fi
				done
				if [ -z ${STOREURL_MATCH} ]; then
					mail -r "integration-team@zohocorp.com" -s "Storehandler build url mismatch error for ${ARG}" "${ERROR_MAIL_ID}" <<-EOF

						                           Storehandler url mentioned is not mathced with available builds.

						                           Branch Name : ${ARG}

						                           Build-Id : ${WH_BUILD_ID}
					EOF
					BUILD_STATUS="FAILURE"
					export BUILD_STATUS
					EXIT_MESSAGE="Storehandler url mentioned is not matched with available builds... Hence exiting .."
					echo "${EXIT_MESSAGE}"
					echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
					REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
					export REASON_FOR_BUILD_FAILURE
					copyBuilderrorlogs
					updateBuildDetails
					postbuildteamspecific
					exit 1
				fi

				for securityurl in $(echo ${ALLOWED_SECURITY_BUILDS} | tr "," " "); do
					SECURITYURL_MATCH=$(cat ${BUILD_DIR}/temp_dependency_details.txt | grep "${securityurl}")
					if [ ! -z ${SECURITYURL_MATCH} ]; then
						SECURITY_URL=$(echo $SECURITYURL_MATCH | cut -d "=" -f2)
						BUILD_OPTS="${BUILD_OPTS} -Dzohosecurity_url=${SECURITY_URL}"
						break
					fi
				done
				if [ -z ${SECURITYURL_MATCH} ]; then
					mail -r "integration-team@zohocorp.com" -s "Zohosecurity build url mismatch error for ${ARG}" "${ERROR_MAIL_ID}" <<-EOF

						                           Zohosecurity url mentioned is not mathced with available builds.

						                           Branch Name : ${ARG}

						                           Build-Id : ${WH_BUILD_ID}
					EOF
					BUILD_STATUS="FAILURE"
					export BUILD_STATUS
					EXIT_MESSAGE="Zohosecurity url mentioned is not matched with available builds... Hence exiting .."
					echo "${EXIT_MESSAGE}"
					echo "REASON_FOR_BUILD_FAILURE=\"Dependency_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
					REASON_FOR_BUILD_FAILURE="Dependency_Build_Failure:${EXIT_MESSAGE}"
					export REASON_FOR_BUILD_FAILURE
					copyBuilderrorlogs
					updateBuildDetails
					postbuildteamspecific
					exit 1
				fi
			fi
		fi

		if [ "${PRODUCT_NAME}" = "ZOHOLOGSERVER" ]; then
			DEP_BLD_OPTS=""
		fi
		BUILD_OPTS="${DEP_BLD_OPTS} ${BUILD_OPTS} -Dpdt_name=${PRODUCT_NAME} -Dday=${TODAY} -Ddate=${BUILD_DLOAD_DIR} -Derror_mail_ids=${ERROR_MAIL_ID} -Dsuccess_mail_ids=${SUCCESS_MAIL_ID}"
		if [ "${STATIC_DIRNAME}" != "" -a "${STATIC_DIRNAME}" != "NA" ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dstatic_dir=${STATIC_DIRNAME}"
		fi
		if [ "${PREV_DBUILD_URL}" != "" -a "${PREV_DBUILD_URL}" != "NA" ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dprev_build=${PREV_DBUILD_URL}"
		fi
		if [ "${PATCH_BUILD}" = "TRUE" ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dtarget=patchbuild"
			if [ "${PREV_DBUILD_URL}" != "" -a "${PREV_DBUILD_URL}" != "NA" ]; then
                        	BUILD_OPTS="${BUILD_OPTS} -Dpatchbuild_binary_name=`basename ${PREV_DBUILD_URL}`"
                	fi
		fi
		CPF_WIN_ZIP_NAME="Jetty_standalone_windows64_WITHOUT_JRE.zip"
		CPF_WIN_RELEASE_ZIP_NAME="Jetty_standalone_windows64_WITHOUT_JRE_RELEASE.zip"
		TEMP_PORT=$(echo ${WH_BUILD_ID} | awk '{print substr($0, length($0)-2)}')
		TEMP_PORT=$(expr 8000 + ${TEMP_PORT})
		BUILD_OPTS="${BUILD_OPTS} -Dbuild_id=${WH_BUILD_ID} -Dtemp_port=${TEMP_PORT} -Dproduct_name=${PRODUCT_NAME} -Dbranch_name=${ARG} -Dceph_copy_needed=${CEPH_COPY_NEEDED} -Dservername=${SERVER_NAME} -Dpre_build_url=${PREV_DBUILD_URL} -Dlast_milestone_url=${LATEST_MILESTONE_URL} "

		#winexebranch=`cat ${WORK_DIR}/hg_utils/build/winexetask.txt | grep -w ${ARG}`
		if [ "${PRODUCT_NAME}" != "LOG360" -a "${PRODUCT_NAME}" != "AD360" -a "${PRODUCT_NAME}" != "ZOHOSYNC" -a -z "${winexetask_excluded_product}" -a "${winexetask_excluded_product}" != "yes" ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dwinexetask_needed=yes "
		fi

		if [ "${RELEASE_BUILD}" = "YES" ]; then
			CPF_WIN_URL=${CPF_WIN_URL}/${CPF_WIN_RELEASE_ZIP_NAME}
			BUILD_OPTS="${BUILD_OPTS} -Drelease_branch_build=yes -Dcpf_build_url=${CPF_WIN_URL} "
		else
			CPF_WIN_URL=${CPF_WIN_URL}/${CPF_WIN_ZIP_NAME}
			BUILD_OPTS="${BUILD_OPTS} -Dcpf_build_url=${CPF_WIN_URL} "
		fi

		if [ "${BINARY_ZIP_URL}" != "" ]; then
			BUILD_OPTS="${BUILD_OPTS} -Dbinary_build=yes"
		fi

	fi
    
    if [ -f "${BUILD_DIR}/ant.properties" ]
    then
        BUILD_OPTS="${BUILD_OPTS} -Dant_project=yes"
    fi

	echo "CMTP checkout updateValidTPUrl started at : $(date +%b_%d_%Y@%T)"
	updateValidTPUrl
	echo "CMTP checkout updateValidTPUrl ended at : $(date +%b_%d_%Y@%T)"
	get_patch_pre_buildurl
	selected_builds
	echo "BUILD_OPTS after appendDependencyUrls invocation --> ${BUILD_OPTS}"
	cp -r ${BUILD_DIR}/temp_dependency_details.txt ${BUILD_DIR}/temp_dependency_details_ref.txt
	echo ${BUILD_OPTS} >>${BUILD_DIR}/temp_dependency_details_opts.txt
	earBlock_method
}

selected_builds() {
	concat=""
	for dep_bld_url in $(echo $DEP_BUILDS | tr ',' ' '); do

		dep_build_url_all=$(echo $dep_bld_url | cut -d "=" -f2 | grep -w "zip")
		if [ ! -z $dep_build_url_all ]; then
			concat=$concat${dep_build_url_all}
		fi

	done
	selected_builds=$(echo $concat | sed -e 's@.zip@.zip,@g')
	echo $selected_builds
	BUILD_OPTS="${BUILD_OPTS} -Dselected_builds=$selected_builds"

}
patch_precheck() {

	echo $depBldUrl_patch
	prd_name_txt=${PRODUCT_NAME}.txt
	url_end_val=$(echo $depBldUrl_patch | rev | cut -f1 -d'/' | rev)
	replace_patch_url=$(echo $depBldUrl_patch | sed -e "s@${url_end_val}@logs/${prd_name_txt}@g")
	PRE_BUILD_URL="${http_domain_name}"
	HTTPS_PRE_BUILD_URL="https://build.zohocorp.com/"
	PRE_DL_DIR="/zoho/build/downloads/dload/"
	PRE_DLOAD_PATH=$(echo ${replace_patch_url} | sed "s@${PRE_BUILD_URL}@${PRE_DL_DIR}@g" | sed -e "s@${HTTPS_PRE_BUILD_URL}@${PRE_DL_DIR}@g")
	if [ -f $PRE_DLOAD_PATH ]; then
		PRE_BUILD_CHANGESET=$(cat $PRE_DLOAD_PATH | grep "TIP_CHANGESET" | cut -d "=" -f2 | sed -e "s@\"@@g")
		if [ "${STATIC_DIRNAME}" = "NA" ]; then
			PATCHBASE_STATIC_CHANGESET=$(cat $PRE_DLOAD_PATH | grep "NEW_STATIC_DIRNAME" | cut -d "=" -f2 | sed -e "s@\"@@g")
			STATIC_DIRNAME=${PATCHBASE_STATIC_CHANGESET}

		fi

	else
		PRE_BUILD_CHANGESET=""
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		EXIT_MESSAGE="Selected patch build url is not available... Hence exiting .."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		updateBuildDetails
		exit 1
	fi
	PREV_DBUILD_URL=${depBldUrl_patch}
	PREV_SRC_CHANGESET=${PRE_BUILD_CHANGESET}

}

earBlock_method() {
	ear_path=$(cat ${BUILD_DIR}/ant.properties | grep "/zoho/ear/" | grep -iEv "#")
	if [ -n "$ear_path" ]; then

		ear_url=$(echo $ear_path | cut -d "=" -f2 | sed 's@"@ @g' | sed 's@<br>@ @g')
		DL_DIR="/zoho/build/downloads/dload/"
		pre_val="${http_domain_name}"
		DLOAD_PATH=$(echo $ear_url | sed "s@$pre_val@$DL_DIR@g")
		get_zip=$(echo $DLOAD_PATH | rev | cut -d'/' -f1 | rev)
		replace_file=$(echo $DLOAD_PATH | sed "s@$get_zip@restrictedMilestones.txt@g")
		echo $DLOAD_PATH/restrictedMilestones.txt
		echo $replace_file
		if [ -f "replace_file" ]; then

			earblocklist=$(cat $replace_file | grep "EARMilestoneBlockList")
			saslist=$(cat $replace_file | grep "SASMilestoneList")
			earwarnlist=$(cat $replace_file | grep "EARMilestoneWarningList")
			earwarn_mes=$(cat $replace_file | grep "EARWarningMsg")

			getval_earsaslist=$(echo $saslist | cut -d "=" -f2 | sed 's@"@ @g')
			getval_earblock_list=$(echo $earblocklist | cut -d "=" -f2 | sed 's@"@ @g')
			getval_earwarnlist=$(echo $earwarnlist | cut -d "=" -f2 | sed 's@"@ @g')
			getval_message=$(echo $earwarn_mes | cut -d "=" -f2)

			sas_ant=$(cat ${BUILD_DIR}/ant.properties | grep -r "/framework/saslite/" | grep -iEv "#" | cut -d "=" -f2 | grep -i "channel")
			if [ $? -eq 0 ]; then
				sas_url=$(echo $sas_ant | sed "s@${http_domain_name}@/zoho/build/downloads/dload/@g")
				sas_path=$(readlink $sas_url)
			else
				sas_path=$(cat ${BUILD_DIR}/ant.properties | grep -r "/framework/saslite/" | grep -iEv "#" | cut -d "=" -f2)
			fi
			echo $sas_path >${WORK_DIR}/ear_block.txt
			ear_path=$(cat ${BUILD_DIR}/ant.properties | grep "/zoho/ear/" | grep -iEv "#" | cut -d "=" -f2)
			echo $ear_path >>${WORK_DIR}/ear_block.txt
			for i in $(echo $getval_earsaslist | tr "," " "); do
				grep -w $i ${WORK_DIR}/ear_block.txt
				if [ $? -eq 0 ]; then
					for j in $(echo $getval_earblock_list | tr "," " "); do
						grep -iw $j ${WORK_DIR}/ear_block.txt
						if [ $? -eq 0 ]; then
							echo "Exit the build"
							EXIT_ERROR_MESSAGE="As per EAR Team requested, we have blocked this build. SASLite build used is incompatible with the EAR Build Used. Check and move to latest EAR Build."
							echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_ERROR_MESSAGE}\"" >>${build_info_file}
							REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_ERROR_MESSAGE}"
							export REASON_FOR_BUILD_FAILURE
							echo ${EXIT_ERROR_MESSAGE}
							BUILD_STATUS="FAILURE"
							export BUILD_STATUS
							copyBuilderrorlogs
							updateBuildDetails
							exit 1

						fi
					done
					echo $getval_earwarnlist
					echo "warn list"
					for k in $(echo $getval_earwarnlist | tr "," " "); do
						echo "$k"
						warnlist=$(cat ${BUILD_DIR}/ant.properties | grep -w $k | grep -iEv "#")
						if [ ! -z "$warnlist" ]; then
							echo "sent notify mail"
							earnotify_method "$getval_message"
						fi
					done

				fi

			done

		fi
	else
		echo "ear not used."
	fi
}

earnotify_method() {

	REASON=$1

	mail -r "integration-team@zohocorp.com" -s "EAR dependency build warning mail" "${ERROR_MAIL_ID}" <<-EOF
		        Dear Team,

		                $REASON

		        Thanks & Regards,
		        Integration Team
	EOF

}

gettip_components_api() {
	cmtp_branchname_space=$(echo "$cmtp_branchname" | sed 's/[[:space:]]//g')
	get_src_tip_tp=$(curl -k -X GET "${cmsuite_domain_name}/components/restgettipforbranch/?branch_name=${cmtp_branchname_space}&PRIVATE_TOKEN=${CMSUITE_PRIVATE_TOKEN}")

	#for DATA in "${get_src_tip_tp[@]}" ; do
	#        VALUES+=("${DATA##*:}")
	#done
	#tprepo_source_tip=`echo ${VALUES[@]}  | sed -e "s@\"@@g"  | sed -e "s@}@@g"`
	tprepo_source_tip="$(echo ${get_src_tip_tp} | sed -e "s@{@@g" -e "s@}@@g" | cut -d "," -f2 | cut -d ":" -f2 | sed -e 's|["'\'']||g' | tr -d ' ')"

	tp_components_path=$(echo $cmtp_url | sed "s@tp_components.zip@logs/COMPONENTS.txt@g")
	echo "Tp_build_txt_path: " $tp_components_path

	tp_comp_url=$(echo $tp_components_path | sed "s@http://build/@/zoho/build/downloads/dload/@g")
	TP_CHANGESET_VAL_LATEST=$(cat $tp_comp_url | grep "BUILD_LABEL" | cut -d "=" -f2 | sed -e 's@"@@g')
        TP_CSET_LABEL=${TP_CHANGESET_VAL_LATEST}
        TP_CHANGESET_VAL=${TP_CHANGESET_VAL_LATEST}
        echo "${cmtp_branchname_space}=${TP_CHANGESET_VAL}" >>${BUILD_DIR}/changeset.txt


	echo "Build_tp_changeset:" $TP_CHANGESET_VAL_LATEST

	echo "Repo_tp_changeset:" ${tprepo_source_tip}
	echo "${cmsuite_domain_name}/components/restgettipforbranch/?branch_name=${cmtp_branchname_space}&PRIVATE_TOKEN=XXXX"

}

updateValidTPUrl() {
        echo "INFO :::: Inside updateValidTPUrl."
	cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -w "cmtp_hgco_label" | tail -n 1 | cut -d "=" -f2)
	echo "INFO :::: CMTP BRANCHNAME VALUE IS - ${cmtp_branchname}"
	if [ -z $cmtp_branchname ]; then
		cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -iEv "eco_msg" | grep -w "cmtp_co_label" | tail -n 1 | cut -d "=" -f2)
	        echo "INFO :::: Not Set CMTP BRANCHNAME. Hence, taking the value of cmtp_co_label from eco tasks, VALUE IS - ${cmtp_branchname}"

	fi

	if [ -z $cmtp_branchname ]; then
		cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -w "peoplecmtp_hgco_label" | tail -n 1 | cut -d "=" -f2)
	fi
	if [ "${TPBRANCH_REVIEWED_CHECKOUT}" = "Yes" ]; then
		cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -w "cmtp_co_label_reviewed" | tail -n 1 | cut -d "=" -f2)
	        echo "INFO :::: Inside TPBranchReviewedCheckout Label CMTP BRANCHNAME VALUE IS - ${cmtp_branchname}"
	else
		revcheck="$(echo ${ARG} | grep -e "_REVIEWED")"
		if [ -n "${revcheck}" ]; then
			cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -w "cmtp_hgco_label_reviewed" | tail -n 1 | cut -d "=" -f2)
			if [ -z $cmtp_branchname ]; then

				cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -iEv "eco_msg" | grep -w "cmtp_co_label_reviewed" | tail -n 1 | cut -d "=" -f2)
				if [ -z $cmtp_branchname ]; then
					cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -w "cmtp_hgco_label" | tail -n 1 | cut -d "=" -f2)
					if [ -z $cmtp_branchname ]; then
						cmtp_branchname=$(cat ${BUILD_DIR}/ant.properties | grep -iEv "eco_msg" | grep -w "cmtp_co_label" | tail -n 1 | cut -d "=" -f2)
					fi

				fi
			fi
		fi
	fi

	#if [ -n "${cmtp_hgco_label_reviewed}" ]
	#then
	#	echo "Branch contains REVIEWED and cmtp_hgco_label_reviewed have REVIEWED. So, the hgclone tasks implemented instead of build download for TP Branch."
	#fi
	#	else
	cmtp_branchname_trim=$(echo ${cmtp_branchname} | sed -e 's/^[[:space:]]*//')
        if [ "${TP_DOWNLOAD_URL}" != "" ]
        then
                    TP_DOWNLOAD_URL="${TP_DOWNLOAD_URL%/}"
                    tp_product_name=$(echo "$TP_DOWNLOAD_URL" | awk -F'/' '{print $NF}')
                    cmtp_url="${TP_DOWNLOAD_URL}/${cmtp_branchname_trim}/latest/tp_components.zip"
                    cmtp_replace=`echo $cmtp_url | sed -e "s@${http_domain_name}@/zoho/build/downloads/dload/@g" -e "s@${buildZohoCorpDomainName}@/zoho/build/downloads/dload/@g"`
                    cmtp_readlink=$(readlink -f $cmtp_replace)
                    if [ "${cmtp_readlink}" != "" ]; then
                        tp_product_uname=$(echo $tp_product_name | tr "a-z" "A-Z")
                        tp_product_dir_path=$(dirname ${cmtp_readlink})
                        tp_prd_txt_file_path="${tp_product_dir_path}/logs/${tp_product_uname}.txt"
                        if [ -f ${tp_prd_txt_file_path} ]; then
                                TP_CHANGESET_VAL_LATEST=$(cat ${tp_prd_txt_file_path} | grep "BUILD_LABEL" | cut -d "=" -f2 | sed -e 's@"@@g')
                                if [ -z "${TP_CHANGESET_VAL_LATEST}" ]; then
                                    TP_CHANGESET_VAL_LATEST="NA"
                                    echo "New TP Product ChangeSet not available .."
                                else
                                    TP_CSET_LABEL=${TP_CHANGESET_VAL_LATEST}
                                    TP_CHANGESET_VAL=${TP_CHANGESET_VAL_LATEST}
                                    echo "${cmtp_branchname_trim}=${TP_CHANGESET_VAL}" >>${BUILD_DIR}/changeset.txt
                 
                                    echo "New TP Product ChangeSet: ${TP_CHANGESET_VAL_LATEST}"
                                fi
                        else
                                TP_CHANGESET_VAL_LATEST="NA"
                                echo "New TP Product ChangeSet not available .."
                        fi
                        cmtpurlpath=`echo $cmtp_readlink | sed "s@/zoho/build/downloads/dload/@@g"`
                        cmtpurlpath_new="${buildZohoCorpDomainName}${cmtpurlpath}"
                        BUILD_OPTS="${BUILD_OPTS} -Dcmtp_hgroot=$cmtpurlpath_new"
                    else
                        cmtpurlpath_new="NA"
                    fi
        else

	echo "INFO :::: CMTPBranchNameTrim Value is :::: ${cmtp_branchname_trim} ....."
	cmtp_url="${http_domain_name}/tp/components/latest/${cmtp_branchname_trim}/tp_components.zip"

	echo "INFO ::: CMTP URL VALUE IS : ${cmtp_url}"
	tmp_cmtp_replace=$(echo $cmtp_url | sed -e "s@${http_domain_name}@/zoho/build/downloads/dload/@g" -e "s@${buildZohoCorpDomainName}@/zoho/build/downloads/dload/@g")
	echo "INFO :::: Temp Cmtp Replace Value is : ${tmp_cmtp_replace}"
	tmp_cmtp_readlink=$(readlink -f $tmp_cmtp_replace)
	 
	echo "INFO :::: Final CMTPBranchName IS : ${cmtp_branchname}"

	gettip_components_api

	if [ "${tprepo_source_tip}" != "${TP_CHANGESET_VAL_LATEST}" -a "${cmtp_branchname}" != "BASE" -a "${cmtp_branchname}" != "HG_UTILS_BUILD_BRANCH" ]; then
		tp_branch_status=$(cat ${WORK_DIR}/hg_utils/build/COMPONENTS_BASE_BRANCH_DETAILS.txt | grep -w "${tprepo_source_tip}:${cmtp_branchname}")
		if [ $? -ne 0 ]; then
			echo "components build not available or tp changeset value differ for latest build and components repository."

			curl -k -X POST -H "Content-Type: application/json" -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data '{ "product_id":"1023", "checkout_label":"'"${cmtp_branchname}"'", "build_type":"full", "report_need":"false", "status":"Start", "started_from":"Ci", "comment":"'"${WH_BUILD_ID}"'", "started_by_user":"integration-team", "success_mail":"cm-notify@zohocorp.com","error_mail":"cm-erroraudit@zohocorp.com" }' ${cmtools_domain_name}/api/v1/buildlogs &
                        echo "COMPONENTS::" >> ${WORK_DIR}/dependency.txt
			wait
			tpcomponent_common

		fi
	else
		tpcomponent_common
	fi

	build_http_url="http://"
	build_https_url="https://"
	cmtpurlpath_new=$(echo $cmtpurlpath | sed "s@${http_domain_name}@${buildZohoCorpDomainName}@g")
        fi

	echo $cmtpurlpath_new

	if [ ${cmtpurlpath_new} != "" -a "${cmtpurlpath_new}" != "NA" ]; then
	wget -S --spider $cmtpurlpath_new --no-check-certificate

	#wget -S --spider $cmtpurlpath
	#if [ $? -eq 0 ]; then
	#	BUILD_OPTS="${BUILD_OPTS} -Dcmtp_hgroot=$cmtpurlpath_new"
	#fi
	if [ $? -eq 0 ]
                then
                      if [ "${TP_TIP_URL}" != "" ]
                      then
                         BUILD_OPTS="${BUILD_OPTS} -Dcmtp_hgroot=${TP_TIP_URL}"
                      else
                         BUILD_OPTS="${BUILD_OPTS} -Dcmtp_hgroot=$cmtpurlpath_new"
                      fi
          fi
	fi

	#	fi
}

tpcomponent_common() {
	echo "CMTP_URL :::::::: ${cmtp_url}"
	cmtp_replace=$(echo $cmtp_url | sed "s@${http_domain_name}@/zoho/build/downloads/dload/@g")
	cmtp_readlink=$(readlink -f $cmtp_replace)
	echo "CMTP READLINK ::::::::::::: ${cmtp_readlink}"
	cmtpurlpath=$(echo $cmtp_readlink | sed "s@/zoho/build/downloads/@@g")
	echo "CMTP URLPATH ::::::::::::: ${cmtpurlpath}"
	webhost_check=$(echo $cmtpurlpath | cut -d "/" -f1)
	if [ "${webhost_check}" = "webhost" ]; then
		cmtpurlpath=$(echo $cmtpurlpath | sed "s@webhost/tp/components/@@g")
		cmtpurlpath="${http_domain_name}/tp/components/webhost/${cmtpurlpath}"
	else
		ci_check=$(echo $cmtpurlpath | cut -d "/" -f4)
		if [ "${ci_check}" = "ci" ]; then
			cmtpurlpath=$(echo $cmtpurlpath | sed "s@dload/@${http_domain_name}@g")
		fi
	fi

}

mickeyPrechecktxt() {

	echo "mickeyPrechecktxt started at : $(date +%b_%d_%Y@%T)"

	catbuildopt=$(cat ${BUILD_DIR}/temp_dependency_details_opts.txt)
	for bopt in $(echo "$catbuildopt" | sed -e "s@-D@ @g" | sed -e "s@|@ @g"); do
		buildmatchlist="$(echo $bopt | egrep "mickeylite|saslite")"
		echo $buildmatchlist >>${BUILD_DIR}/buildmatchlist.txt
	done

	sed '/grid_server.zip$/d' ${BUILD_DIR}/temp_dependency_details_ref.txt | sed '/appserver_container.zip$/d' >${BUILD_DIR}/temp_dependency_details_ref_main.txt

	if [ -f ${BUILD_DIR}/buildmatchlist.txt -a -s ${BUILD_DIR}/buildmatchlist.txt ]; then

		sed -i -e '/^$/d' ${BUILD_DIR}/buildmatchlist.txt
		matchlist=$(cat ${BUILD_DIR}/buildmatchlist.txt)

		for j in $(echo $matchlist); do
			PDT_val=$(echo ${j} | cut -d "=" -f2)
			dep_prod_url=$(echo ${PDT_val} | sed 's@\(.*\)webhost\(.*\)@\1@g' | sed 's@\(.*\)milestones\(.*\)@\1@g' | grep "http:")
			perl -w -e "s@.*=$dep_prod_url(.*)@${j}@g" -p -i "${BUILD_DIR}/temp_dependency_details_ref_main.txt"
		done

		ref_matchlist=$(cat ${BUILD_DIR}/temp_dependency_details_ref_main.txt)
		for j in $(echo $ref_matchlist); do
			PDT_val=$(echo ${j} | cut -d "=" -f2)

			echo $PDT_val | grep "saslite"
			if [ $? -eq 0 ]; then
				$(echo $PDT_val | grep ".zip")
				if [ $? -eq 1 ]; then
					j=$j/sas.zip
				fi
			fi
			echo $PDT_val | grep "mickeylite"
			if [ $? -eq 0 ]; then
				$(echo $PDT_val | grep ".zip")
				if [ $? -eq 1 ]; then
					j=$j/ZohoMickeyLite.zip
				fi
			fi

			dep_prod_url=$(echo ${PDT_val} | sed 's@\(.*\)webhost\(.*\)@\1@g' | sed 's@\(.*\)milestones\(.*\)@\1@g' | grep "http:")
			perl -w -e "s@.*=$dep_prod_url(.*)@${j}@g" -p -i "${BUILD_DIR}/temp_dependency_details_ref_main.txt"
		done
	fi
	echo "mickeyPrechecktxt ended at : $(date +%b_%d_%Y@%T)"

}

invalidDependencyUrlCheck() {

	echo "invalidDependencyUrlCheck started at : $(date +%b_%d_%Y@%T)"
	invalid_check=$(grep -r "js.zohostatic.com" ${BUILD_DIR}/ant.properties | grep -v "#")
	if [ "${PRODUCT_NAME}" = "ONEZOHO" -a "${invalid_check}" != "" ]; then
		mail -r "integration-team@zohocorp.com" -s "Invalid Dependency build url present in ${ARG} build" "${ERROR_MAIL_ID}" <<-EOF

			            Dependency build url js.zohostatic.com is not allowed. Hence quitting the build.

			            Branch Name : ${ARG}

			            Build-Id : ${WH_BUILD_ID}
		EOF
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		EXIT_MESSAGE="Invalid Dependency build url present in ${ARG} "
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		BUILD_STATUS="FAILURE"
		export BUILD_STATUS
		updateBuildDetails
		exit 1
	fi

	echo "invalidDependencyUrlCheck ended at : $(date +%b_%d_%Y@%T)"

}

resolveErrorLogsDir() {
	if [ "${BUILD}" != "CI" ]; then
		ERR_DL_DIR=${BUILD_DLOAD_DIR}
		ERROR_URL=${BASE_URL}/${ARG}/ErrorLogs/${ERR_DL_DIR}
	else

		ERR_DL_DIR=${BUILD_DLOAD_DIR}
		ERROR_URL=${BASE_URL}/${ARG}/ErrorLogs/${ERR_DL_DIR}
	fi
	ERROR_DLOAD_DIR=${ERROR_DIR}/${ERR_DL_DIR}
}
resolveBuildDloadDir() {
	if [ "${BUILD}" = "CI" -a -z "${BUILD_DLOAD_DIR}" ]; then
		CI_DL_DIR=${BUILD_CHANGESET}
		BUILD_DLOAD_DIR=${TODAY}/${CI_DL_DIR}
		echo "${BUILD_DLOAD_DIR}"
	fi
	echo "BUILD FOUND = ${BUILD_FOUND}"
}
resolveTeamSpecificInfo() {
	if [ ! -z "${TEAM_SPECIFIC_INFO}" ]; then
		for i in $(echo "${TEAM_SPECIFIC_INFO}" | tr "," " "); do
			export "$i"
		done
	fi
	if [ ! -z "${PATCH_BUILD_CHANGESET}" -a "${PATCH_BUILD_CHANGESET}" != "NA" ]; then
		export TIP_CHANGESET=${PATCH_BUILD_CHANGESET}
		sed -i "s@TIP_CHANGESET=\(.*\)@TIP_CHANGESET=\"${TIP_CHANGESET}\"@g" ${build_info_file}

	fi

}

getModifiedFilesOnRetry() {
	RETRY_TIP_CSET=$1
	RETRY_PARAMS="repo_link=${CLONE_VALUE}&revision1=${TIP_CHANGESET}&revision2=${RETRY_TIP_CSET}&files_only=true"
	#echo "INFO:: PARAM used to get modified files On Retry :: ${RETRY_PARAMS}"
	MODIFIED_FILES_ON_RETRY=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${BUILD_SRC_DIFF_API}${RETRY_PARAMS}")
	MODIFIED_FILE_LIST_ON_RETRY=$(echo $MODIFIED_FILES_ON_RETRY | cut -d ":" -f2 | sed 's/[\[\]//' | sed 's/[\"]\]/"/' | sed 's/[\}\]//' | tr "," "\n" | sed 's/"//g')
	if [ "${MODIFIED_FILE_LIST_ON_RETRY}" != "" ]; then
		echo "${MODIFIED_FILE_LIST_ON_RETRY}" >${WORK_DIR}/${RETRY_TIP_CSET}_file_list.txt
	fi
}
resolvTipChangesetOnRetry() {
	NEW_TIP_CSET_ON_RETRY=$1
	sed -i "s@TIP_CHANGESET=\(.*\)@TIP_CHANGESET=\"${NEW_TIP_CSET_ON_RETRY}\"@g" ${build_info_file}
	export TIP_CHANGESET=${NEW_TIP_CSET_ON_RETRY}
	export CLONE_ARG=${NEW_TIP_CSET_ON_RETRY}
}
writeDownloadPath() {
	echo "write DownloadPath started at : " $(date "+%Y-%m-%d %T")

	if [ "${CUSTOMER_NAME}" != "DEFAULT" -a "${CUSTOMER_NAME}" != "" ]; then
		echo "${customer_dirname}/${ARG}/${BUILD_DLOAD_DIR}" >${WORK_DIR}/${PRODUCT_NAME}_bdir.out
	else
		echo "${ARG}/${BUILD_DLOAD_DIR}" >${WORK_DIR}/${PRODUCT_NAME}_bdir.out
	fi
	BUILD_LOCATION="${BLD_TYPE}${ARG}/${BUILD_DLOAD_DIR}"
	echo "write DownloadPath ended at : " $(date "+%Y-%m-%d %T")
}

writeErrorDirPath() {
	if [ "${CUSTOMER_NAME}" != "DEFAULT" -a "${CUSTOMER_NAME}" != "" ]; then
		echo "${customer_dirname}/${ARG}/ErrorLogs/${ERR_DL_DIR}" >${WORK_DIR}/${PRODUCT_NAME}_err.log
	else
		echo "${ARG}/ErrorLogs/${ERR_DL_DIR}" >${WORK_DIR}/${PRODUCT_NAME}_err.log
	fi
	if [ "${BUILD}" = "CI" ]; then
		BUILD_LOCATION="${BLD_TYPE}${ARG}/ErrorLogs/${ERR_DL_DIR}"
	else
		BUILD_LOCATION="${BLD_TYPE}${ARG}/ErrorLogs/${ERR_DL_DIR}"
	fi

}
setBuildLabel() {
	LABEL=${LABEL_VAR}_${BUILD_DLOAD_DIR}
}
resolvebuild_type() {
	logTime "Resolved Build Type process" "Started"
	for reviewedname in ${REVIEWED_LABEL_NAMES}; do
		if [ "${ARG}" = "${reviewedname}" ]; then
			export REVIEWED_LABEL="${ARG}"
		fi
	done
	local count=1
	for reviewedbranchname in ${REVIEWED_BRANCH_LABEL_NAMES}; do
		echo "${ARG} ${reviewedbranchname}"
		if [ "${ARG}" = "${reviewedbranchname}" ]; then
			reqcount=${count}
			export REVIEWED_BRANCH_LABEL_NAME="${ARG}"
			export REVIEWED_BASE_NAME=$(echo ${REVIEWED_BASE_NAMES} | cut -d " " -f${reqcount})
			export REVIEWED_BRANCH_NAME=$(echo ${REVIEWED_BRANCH_NAMES} | cut -d " " -f${reqcount})
		fi
		count=$(expr $count + 1)
	done
	local count=1
	for customerbranchname in ${CUSTOMERS_BRANCH_LABEL_NAMES}; do
		echo "${ARG} ${customerbranchname}"
		if [ "${ARG}" = "${customerbranchname}" ]; then
			reqcount=${count}
			export CUSTOMER_BRANCH_LABEL_NAME="${ARG}"
			export CUSTOMER_BASE_NAME=$(echo ${CUSTOMERS_BASE_NAMES} | cut -d " " -f${reqcount})
		fi
		count=$(expr $count + 1)
	done
	local count=1
	for configuredbranchname in ${CONFIGURED_BRANCH_NAMES}; do
		if [ "${ARG}" = "${configuredbranchname}" ]; then
			reqcount=${count}
			export CONFIGURED_BRANCH_NAME="${ARG}"
			export CONFIGURED_BASE_NAME=$(echo ${CONFIGURED_BASE_NAMES} | cut -d " " -f${reqcount})
			export CONFIGURED_BRANCH_BASE_NAME=$(echo ${CONFIGURED_BRANCH_BASE_NAMES} | cut -d " " -f${reqcount})
		fi
		count=$(expr $count + 1)
	done
	local count=1
	for configuredreviewedbranchname in ${CONFIGURED_REVIEWED_BRANCH_LABEL_NAMES}; do
		if [ "${ARG}" = "${configuredreviewedbranchname}" ]; then
			reqcount=${count}
			export CONFIGURED_REVIEWED_BRANCH_LABEL_NAME="${ARG}"
			export CONFIGURED_REVIEWED_BASE_NAME=$(echo ${CONFIGURED_REVIEWED_BASE_NAMES} | cut -d " " -f${reqcount})
			export CONFIGURED_REVIEWED_BRANCH_BASE_NAME=$(echo ${CONFIGURED_REVIEWED_BRANCH_BASE_NAMES} | cut -d " " -f${reqcount})
			export CONFIGURED_REVIEWED_BRANCH_NAME=$(echo ${CONFIGURED_REVIEWED_BRANCH_NAMES} | cut -d " " -f${reqcount})
		fi
		count=$(expr $count + 1)
	done
	logTime "Resolved Build Type process" "Ended"
}

triggerCIBuildNotify() {
	CMLOGURL="${cmtools_domain_name}/#/products/${PRODUCT_ID}/logs/${WH_BUILD_ID}"
	mail -r "integration-team@zohocorp.com" -s "CI Build Status of ${PRODUCT_NAME} in ${ARG} (${CHANGESET_VALUE})" "${SUCCESS_MAIL_ID}" <<-EOF
		                Dear Team,

		                The CI build for latest commit in ${ARG} (${CHANGESET_VALUE}) branch is triggered and its status can be checked in the below mentioned URL:

		                Build url : ${CMLOGURL}

		                Kindly get back to us for further support in this regard.

		                Thanks & Regards,
		                Integration Team
	EOF
}

tipchangeset_Notification() {
	echo $CLONE_VALUE | grep "repository.zoho.com"
	if [ $? -ne 0 ]; then

		if [ -z "${TIP_CHANGESET}" ]; then

			echo "tipchangeset_Notification"
			SRC_CHANGESET_ERR_SUBJECT="${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}) Build Source Changeset(TIP_CHANGESET) is missing."
			SRC_CHANGESET_MAIL_ID="integration-team@zohocorp.com"
			mail -r "integration-team@zohocorp.com" -s "${SRC_CHANGESET_ERR_SUBJECT}" "${SRC_CHANGESET_MAIL_ID}" <<-EOF
				            Dear Team,

				                The build Source Changeset is missing in prod.txt.

				                Please check and fix as soon as possible.

				                Thanks & Regards,
				                Integration Team
			EOF

		fi
	fi
}

source_checkout() {
	changeAccessValue
	tipchangeset_Notification

        MAIL_PRD=`cat ${WORK_DIR}/hg_utils/build/reports_products.txt | grep -E "ZM|ZOHOMAIL" | grep -w "${PRODUCT_NAME}"`
        if [ -n "${MAIL_PRD}" ]; then
                CHECKIDC_CHANGESET="YES"
        fi
        if [ -n "${CHECKIDC_CHANGESET}" -a "${CHECKIDC_CHANGESET}" = "YES" ]; then
            source ${WORK_DIR}/hg_utils/build/idc_changeset_check.sh
            checkIDCChangesMerged &
        fi
	#unabletocopyclear >> ${LOGS_DIR}/unabletocopy.log 2>&1
	if [ "${PRODUCT_NAME}" = "COMPONENTS" ]; then
		if [ "${ARG}" = "default" ]; then
			sendErrorMail "Components repository default branch build not required." "Hence quitting the build."
			EXIT_MESSAGE="Components repository default branch build not required." "Hence quitting the build."
			echo "${EXIT_MESSAGE}"
			echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
			export REASON_FOR_BUILD_FAILURE
			copyBuilderrorlogs
			BUILD_STATUS="FAILURE"
			export BUILD_STATUS
			updateBuildDetails
			exit 1
		fi
	fi

	if [ -z ${BUILD_RETRY} ]; then
		getPreviousDailyBuildLabel_new

		echo "src wget calling"
		if [ "${LABEL_TYPE}" = "MILESTONE" ]; then
			echo "Milestone ($ARG) Build"
			checkout >${checkout_log} 2>&1
		else
			case ${ARG} in
			"HEAD" | "${REVIEWED_LABEL}")
				echo "${ARG} Normal Build"
				checkout >${checkout_log} 2>&1
				;;
			"${REVIEWED_BRANCH_LABEL_NAME}")
				echo "${ARG} Branch Reviewed Build"
				reviewedbranchCheckout >${checkout_log} 2>&1
				;;
			"${CUSTOMER_BRANCH_LABEL_NAME}")
				echo "${ARG} Customer Branch Build"
				customerbranchCheckout >${checkout_log} 2>&1
				;;
			"${CONFIGURED_BRANCH_NAME}")
				echo "${ARG} Configured branch Build"
				configuredbranchCheckout >${checkout_log} 2>&1
				;;
			"${CONFIGURED_REVIEWED_BRANCH_LABEL_NAME}")
				echo "${ARG} Configured branch reviewed Build"
				configuredreviewedbranchCheckout >${checkout_log} 2>&1
				;;
			*)
				echo "${ARG} branch Build"
				branchCheckout >${checkout_log} 2>&1
				;;
			esac
		fi

		if [ "${BUILD}" = "CI" -a ${PRODUCT_NAME} = "ZOHOCRM" ]; then
			PATCH_BUILD="TRUE"
			#getModifiedSource
			getModifiedsource_api
			changeClasspath

		else
			if [ "${PRODUCT_NAME}" = "SASLITE" ]; then
				commitSASReadme
			fi

		fi

		if [ "${BUILD}" = "CI" ]; then
			triggerCIBuildNotify
		fi

		copyCustomerSources
		mail_product_status="`echo ${PRODUCT_NAME} | grep -E "(ZM|ZOHOMAIL)"`"
                echo "MailProductStatus :::: ${mail_product_status}"
                if [ -n "${mail_product_status}" ]; then
                    echo "MailProductStatus matched..."
                    source ${WORK_DIR}/hg_utils/build/source_checkout.sh
                    parallelModuleDownloadProcess
                    wait
                    copySubModuleSources
                else
                    subModulesCheckout_ui
                fi
		removeEmptyFiles
		keyword_check
		copyBuildFile >>${LOGS_DIR}/Copy_BuildFiles.log 2>&1
		copyNmsBuildFile
		if [ -z "PATCH_BUILD" -o "${PATCH_BUILD}" != "TRUE" ]; then
			get_tplabel
		fi

		echo "appendDependencyUrls started at : $(date +%b_%d_%Y@%T)"
		appendDependencyUrls
		echo "appendDependencyUrls ended at : $(date +%b_%d_%Y@%T)"

		if [ "${PRODUCT_NAME}" != "ITSF" ]; then
			mickeyPrechecktxt
		fi
		invalidDependencyUrlCheck

		tomcat7JspTimeChange
		EVAL_REPORT_PRODUCTS="DEVICE_MGMT_FRAMEWORK MDM MDMP"
		EVAL_REPORT_PRODUCT_SEARCH=$(echo ${EVAL_REPORT_PRODUCTS} | grep -w "${PRODUCT_NAME}")
		if [ "${GROUP_ID}" = "5" -o -n "${EVAL_REPORT_PRODUCT_SEARCH}" ]; then
			evalRestriction
			if [ -f "${EVAL_REPORT_FILE}" ]; then
				mutt -e "set content_type=\"text/html\" from=integration-team@zohocorp.com" -s "Notification on 'eval' usage of the branch ${ARG} for ${PRODUCT_NAME}" ${SUCCESS_MAIL_ID} <${EVAL_REPORT_FILE}
			fi
		fi
		if [ -f "${SOURCE_BASE_DIR}/build/manifest_info.txt" ]; then
			echo "build-timestamp: $(date +"%s")" >>${SOURCE_BASE_DIR}/build/manifest_info.txt
		fi
		mail_product_status="`echo ${PRODUCT_NAME} | grep -E "(ZM|ZOHOMAIL)"`"
                if [ -z "${mail_product_status}" ]; then
		    gitSubModuleCheckout
		fi
		if [ -f "${CONF_DIR}/buildmergecheck.conf" ]; then
			mergeCodecheck
		fi
		common_mergecheck
		pkg_lyte_notify
	else
		if [ "${BUILD_RETRY}" = "SOURCE" ]; then
			echo "${ARG} branch source retry started at ${TIMENOW}"
			branchCheckout >${CHECKOUT_RETRY_LOG_FILE} 2>&1
			echo "${ARG} branch source retry ended at ${TIMENOW}"
		fi

	fi

}

common_mergecheck() {

	if [ "${COMMON_CHANGESET_MERGE_CHECK}" = "YES" ]; then
		PREV_BUILD_URL_DOMAIN="${http_domain_name}"
		PREV_BUILD_DL_DIR="/zoho/build/downloads/dload/"
		PREV_BUILD_DLOAD_PATH=$(echo ${LATEST_MILESTONE_URL} | sed "s@${PREV_BUILD_URL_DOMAIN}@$PREV_BUILD_DL_DIR@g")
		grep_changeset_val=$(cat ${PREV_BUILD_DLOAD_PATH}/logs/${PRODUCT_NAME}.txt | grep "TIP_CHANGESET" | cut -d "=" -f2 | sed 's@"@@g')
		echo $grep_changeset_val

		echo "common_mergecheck Details process started at : " $(date "+%Y-%m-%d %T")
		getRepoSrc "log | grep $grep_changeset_val"
		#if [ $? -ne 0 ]
		if [ "$notifyneeded" = "YES" -a "$cmd_op" = "" ]; then
			Notify_Message="We have found missing change set ${grep_changeset_val} in default branch when compare to latest milestone ${LATEST_MILESTONE_URL} please check this."
			echo $Notify_Message
			mail -r "integration-team@zohocorp.com" -s "Diff between Default and LatestMilestone for ${MODULE_NAME}" "${ERROR_MAIL_ID}" <<-EOF
				                   Dear Team,

				                                ${Notify_Message}

				                           Thanks & Regards,
				                           Integration Team
			EOF

		fi

		if [ "${merge_stopbuild_needed}" = "YES" ]; then

			if [ "$cmd_op" = "" ]; then
				ERROR_MESSAGE="$grep_changeset_val changeset was not merged into this branch ${ARG}, so stopped this build."
				echo $ERROR_MESSAGE
				echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${ERROR_MESSAGE}\"" >>${build_info_file}
				REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${ERROR_MESSAGE}"
				export REASON_FOR_BUILD_FAILURE
				REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${ERROR_MESSAGE}"
				export REASON_FOR_BUILD_FAILURE
				mkdir -p ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build
				echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${ERROR_MESSAGE}\"" >>${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/build.log
				mail -r "integration-team@zohocorp.com" -s "Changeset Merge Check in ${ARG}" "${ERROR_MAIL_ID}" <<-EOF
					                                Dear ${user_name},

					                                        The build has been stopped due to ,

					                                        ${ERROR_MESSAGE}

					                                Thanks & Regards,
					                                Integration Team
				EOF

				copyBuilderrorlogs
				BUILD_STATUS="FAILURE"
				export BUILD_STATUS
				updateBuildDetails
				exit 1
			fi
		fi

		echo "common_mergecheck Details process ended at : " $(date "+%Y-%m-%d %T")
	fi

}

changeAccessValue() {
	echo ${CLONE_VALUE} | grep "repository.zoho.com"
	if [ $? -eq 0 ]; then
		ACC_VAL=$(curl -k -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" https://cmtools-api.csez.zohocorpin.com/api/v1/get_service_access_tokens?service_name=ZCloudRepo)
		echo ACCESS_VALUE=${ACC_VAL} >${WORK_DIR}/token.txt
		. ${WORK_DIR}/token.txt
	fi
}

pkg_lyte_notify() {
	cd ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/
	fnd_json=$(find -iname "package.json")
	lyte_pkg_txt=${HOME}/WH_DIR/lyte_pkg.txt
	lyte_det_txt=${WORK_DIR}/lyte_det.txt
	for pkg_file in $(echo $fnd_json); do

		cp ${WORK_DIR}/hg_utils/build/lyte.py ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/lyte.py
		sent_op=$(python ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/lyte.py ${pkg_file})

		if [ "$sent_op" != "package not available" ]; then
			pkg_name=$(echo $sent_op | cut -d "*" -f1)
			corres_pkg_name=$(echo $sent_op | cut -d "*" -f2)
			file_pkg_name=$(echo $pkg_file | sed -e 's@^./@@g')
			echo "$file_pkg_name:$pkg_name:$corres_pkg_name" >>${lyte_det_txt}
			echo "PRODUCT_NAME=${PRODUCT_NAME}:BRANCH_NAME=${ARG}:BUILD_BY=${BUILDBY}:PACKAGE_DETAILS=${pkg_name}" >>${lyte_pkg_txt}
		fi

	done
	cd -
}

lyte_npmscope_notify_mail() {
	pkg_filename="$1"
	pkg_det="$2"
	corres_pkg_det="$3"
	PACKAGEJSON_ERR_SUBJECT="${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}) LYTE package npm scoped packages notification ."

	mail -r "lyte-team@zohocorp.com" -s "${PACKAGEJSON_ERR_SUBJECT}" "${ERROR_MAIL_ID}" <<-EOF
		        Dear Team,

		                We have moved all our lyte dependency packages to scoped packages. As mentioned in the below post, kindly migrate all your lyte dependencies as soon as possible.

		                Unscoped packages usage details :

		                FileName :  "${pkg_filename}"

		                Packages name : "${pkg_det}"

		                Corresponding scoped packages : "${corres_pkg_det}"

		                Please refer below connect post for more info:

		                https://one.zoho.com/zohoone/zohocorp/home/cxapp/connect/portal/intranet/forum/post/npm-dependency-confusion-lyte-dependencies-package-movement


		        Thanks ,

		        Lyte Team

	EOF

}

mergeCodecheck() {
	echo "Build merge changset check enabled"
	source ${CONF_DIR}/buildmergecheck.conf
	#cd ${WORK_DIR}/${MOD_NAME}
	#cd ${SOURCE_BASE_DIR_REL}
	if [ ${NEED_TO_CHECK} = "YES" ]; then
		#echo $MERGE_CHANGESET
		#mergechangeset=`git log | grep $MERGE_CHANGESET`
		getRepoSrc "log | grep $MERGE_CHANGESET"

		#if [ $? -ne 0 ]
		if [ "$cmd_op" = "" ]; then
			echo $ERROR_MESSAGE
			echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${ERROR_MESSAGE}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${ERROR_MESSAGE}"
			export REASON_FOR_BUILD_FAILURE
			mkdir -p ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build
			echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${ERROR_MESSAGE}\"" >>${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/build.log
			mail -r "integration-team@zohocorp.com" -s "Changeset Merge Check in ${ARG}" "${ERROR_MAIL_ID}" <<-EOF
				                                Dear ${user_name},

				                                        The build has been stopped due to ,

				                                        ${ERROR_MESSAGE}

				                                Thanks & Regards,
				                                Integration Team
			EOF

			copyBuilderrorlogs
			BUILD_STATUS="FAILURE"
			export BUILD_STATUS
			updateBuildDetails
			exit 1
		fi
	fi
	echo "merge check finished/"
}
replaceTPComponentsBuildUrl()
{
     echo "replaceTPComponentsBuildUrl Details process started at : `date "+%Y-%m-%d %T"`"
     tp_branch_name=""
     if [ -f "${BUILD_DIR}/ant.properties" ]; then
         echo "Fetching HgCoLabel from Ant Script is `grep "_hgco_label"  ${BUILD_DIR}/ant.properties | grep -v "#" | cut -d "=" -f2`"
         tp_branch_name="`grep "_hgco_label"  ${BUILD_DIR}/ant.properties | grep -v "#" | cut -d "=" -f2`"
     fi
     if [ "${tp_branch_name}" != "" -a -n "${tp_branch_name}" ]
     then
         curl --head ${buildZohoCorpDomainName}/tp/components/webhost/${tp_branch_name}/latest | grep  "200 OK"
         if [ $? -eq 0 ]
         then
             wget --config=${HOME}/downloads/.wgetrc  ${buildZohoCorpDomainName}/tp/components/webhost/${tp_branch_name}/latest/logs/COMPONENTS.txt
             tp_bld_url=`cat COMPONENTS.txt | grep "BLD_URL" | cut -d "-f2"`
             if [ "${TP_TIP_URL}" != "" ]
             then
                BUILD_OPTS="${BUILD_OPTS} -Dcmtp_hgroot=${TP_TIP_URL}"
             else
                BUILD_OPTS="${BUILD_OPTS} -Dcmtp_hgroot=${tp_bld_url}"
             fi
             echo $tp_bld_url
             echo $BUILD_OPTS
             echo "replaceTPComponentsBuildUrl curl command output."
         fi
     fi
     echo "replaceTPComponentsBuildUrl Details process started at : " `date "+%Y-%m-%d %T"`
}

gitSubModuleCheckout() {
	if [ -d "${SOURCE_BASE_DIR}" ]; then
		if [ -f "${SOURCE_BASE_DIR}/.gitmodules" ]; then
			cd ${SOURCE_BASE_DIR}
			git submodule init
			git submodule update
		fi
	fi
}
tomcat7JspTimeChange() {
	if [ -n "${TOMCAT7_RUNTIME_JSP_TIME_CHANGE}" -a "${TOMCAT7_RUNTIME_JSP_TIME_CHANGE}" = "YES" ]; then
		JSPTIME="201512150230"
		BUILD_OPTS="${BUILD_OPTS} -Dchgjsptime=${JSPTIME}"
	fi
}

subModulesCheckout_ui() {
	if [ -n "${TIP_SUB_PRODUCT_DETAILS}" ]; then
		echo "SUB_PRODUCT_DETAILS is ${TIP_SUB_PRODUCT_DETAILS}. Sub Product checkout process started."
		for i in $(echo ${TIP_SUB_PRODUCT_DETAILS} | tr "," "\n"); do
			SUBPROD_NAME=$(echo $i | cut -d "=" -f1)
			SUBPROD_LBL=$(echo $i | cut -d "=" -f2 | cut -d ":" -f1)
			SUBPROD_REP_TYPE=$(echo $i | cut -d "=" -f2 | cut -d ":" -f2)
			SUBPROD_REP_PATH=$(echo $i | cut -d "=" -f2 | cut -d ":" -f4 | cut -d "/" -f4- | sed "s@\.git@@g")
			EXCLUDE_SUBMOD_CHECKOUT_MATCH=$(echo "${AVOID_SUBMODULE_CHECKOUT_PRODUCTS}" | grep -w "${SUBPROD_NAME}")
			SUBPROD_CLONE_URL=$(echo $i | cut -d "=" -f2 | cut -d ":" -f4)
			SUB_PROD_TIP=$(echo $i | cut -d "=" -f2 | cut -d ":" -f6)
			SUB_PROD_ZREPO_ID=$(echo "$i" | cut -d "=" -f2 | cut -d ":" -f7)

			if [ -n "${SUBPROD_LBL}" -a -z "${EXCLUDE_SUBMOD_CHECKOUT_MATCH}" ]; then
				echo "Sub Product values  ${SUBPROD_REP_TYPE}:${SUBPROD_REP_PATH}:${SUBPROD_LBL}:${SUBPROD_NAME}:${SUB_PROD_TIP}:${SUB_PROD_ZREPO_ID}"
				if [ ${SUB_PRODUCT_DETAILS} != "" ]; then
					subModulesCheckout_wget "${SUBPROD_REP_TYPE}":"${SUBPROD_REP_PATH}":"${SUBPROD_LBL}":"${SUBPROD_NAME}":"${SUBPROD_CLONE_URL}":"${SUB_PROD_TIP}":"${SUB_PROD_ZREPO_ID}"
				fi
				SUB_PRODUCTS_NAME=$SUB_PRODUCTS_NAME,$SUBPROD_NAME
			else
				echo "Checkout Label  is empty for the Sub product ${SUBPROD_NAME}. Hence skipped this process."
			fi

			if [ ! -z "$SUBPROD_LBL" -a ! -z "$SUB_PROD_TIP" ]; then
				build_sub_opt=$(echo "-Dsubproduct_"$SUBPROD_NAME"_label"=$SUBPROD_LBL "-Dsubproduct_"$SUBPROD_NAME"_changeset"=$SUB_PROD_TIP)
				sub_list=$(echo $build_sub_opt $sub_list)
			fi

		done

		export SUB_PRODUCTS=$(echo $SUB_PRODUCTS_NAME | sed "s@\,@ @g")
		copySubModuleSources
	else
		echo "SUB_PRODUCT_DETAILS is empty. Hence skipped this process for this build."
	fi
}

subModulesCheckout_wget() {
	SUBMODULE_ARGS=$1
	SUBMODULE_REP_TYPE=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f1)
	SUBMODULE_GRP=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f2 | grep "/" | sed 's@/[^/]*$@/@')
	SUBMODULE_NAME=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f2 | grep "/" | awk -F/ '{print $NF}')
	SUBMODULE_LABEL=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f3)
	SUBMODULE_CLONE_URL=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f5)
	SUB_TIP=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f6)
	SUB_MOD_ZREPO_ID=$(echo "${SUBMODULE_ARGS}" | grep ":" | cut -d ":" -f7)

	echo "Splitted values ${SUBMODULE_GRP} ${SUBMODULE_NAME} ${SUBMODULE_LABEL} ${SUBMODULE_REP_TYPE}"
	SUBMODULES_LIST=""

	if [ -z "${SUBMODULES_LIST}" ]; then
		SUBMODULE_PRDNAME=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f4)
		SUBMODULES_LIST="${SUBMODULE_NAME}@${SUBMODULE_PRDNAME}"
	fi
	if [ -n "${SUBMODULES_LIST}" ]; then
		echo "Sub Module List values are ${SUBMODULES_LIST}"
		for i in $(echo ${SUBMODULES_LIST}); do
			SUBMODULE_MODNAME=$(echo $i | cut -d "@" -f1)
			SUBMODULE_PRD=$(echo $i | cut -d "@" -f2)
			SUBMODULE_NAME_SEARCH=$(echo ${SUBMODULE_MODNAME} | grep -w "${SUBMODULE_NAME}")
			if [ -n "${SUBMODULE_NAME_SEARCH}" -a "${SUBMODULE_LABEL}" != "NA" ]; then

				echo "submodule checkout call"
				if [ "${SUBMODULE_REP_TYPE}" = "HG" ]; then
					echo ${SUBMODULE_CLONE_URL}
					echo "*** sub clone val available"
					if [ ${SUBMODULE_CLONE_URL} != "" ]; then
						SUB_CLONE_VALUE="https:"$SUBMODULE_CLONE_URL
						echo $SUB_CLONE_VALUE

					else
						SUB_CLONE_VALUE="${cmsuite_domain_name}"/${SUBMODULE_GRP}/${SUBMODULE_MODNAME}
						echo "sub clone value available in conf "
						echo $SUB_CLONE_VALUE

					fi

					cd ${WORK_DIR}
					hg_subsource_wget "${SUB_CLONE_VALUE}" "${SUBMODULE_LABEL}" "${SUBMODULE_MODNAME}" "${SUB_TIP}" "${SUB_MOD_ZREPO_ID}" >>${sub_src_checkout_log} 2>&1
					mkdir -p "${WORK_DIR}"/"${SUBMODULE_MODNAME}"
					mv "${SUBMODULE_MODNAME}"_SRC/"${SUBMODULE_MODNAME}"/{.[!.],}* "${WORK_DIR}"/"${SUBMODULE_MODNAME}"/
					cd "${WORK_DIR}"/"${SUBMODULE_NAME}"
					cd -

				else
					cd ${WORK_DIR}
					SUB_CLONE_VALUE="https":$SUBMODULE_CLONE_URL
					echo $SUB_CLONE_VALUE

					if [ -d "${WORK_DIR}/${SUBMODULE_NAME}" ]; then
						rm -rf ${SUBMODULE_NAME}
					fi
					SM_CLONE_ST_TIME=$(date +%b_%d_%Y@%T)

					cd ${WORK_DIR}
					git_subsource_wget "${SUB_CLONE_VALUE}" "${SUBMODULE_LABEL}" "${SUBMODULE_MODNAME}" "${SUB_TIP}" "${SUB_MOD_ZREPO_ID}" >>${sub_src_checkout_log} 2>&1
					mkdir -p "${WORK_DIR}"/"${SUBMODULE_MODNAME}"
					#mv "${SUBMODULE_MODNAME}_SRC/${SUBMODULE_NAME}/{.[!.],}*" "${WORK_DIR}"/"${SUBMODULE_NAME}"/
                                        cp -rfv `find ${SUBMODULE_MODNAME}_SRC/${SUBMODULE_NAME} -maxdepth 1 -type d | grep -Ev "(build|${SUBMODULE_MODNAME}_SRC/${SUBMODULE_NAME}/$)"` ${WORK_DIR}/${SUBMODULE_NAME} 
					cd "${WORK_DIR}/${SUBMODULE_NAME}"
					cd -

					time_cal "Cloning ${SUBMODULE_NAME} Sources" "${SM_CLONE_ST_TIME}" "${SM_CLONE_END_TIME}"
					#getTipVersionForGITSubModules
				fi
			fi
		done
	else
		echo "Sub Module List is empty. Hence skipped this process."
	fi
}

subModule_checkout_fromconf_notify_mail() {
	arg_val=$1
	echo "subModuleCheckoutaArgs:" $arg_val
	sub_prd_val=$(echo $arg_val | cut -d ":" -f4)
	echo $sub_prd_val
	if [ "$sub_prd_val" != "" ]; then
		subModule_checkout_mailnotification "${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}) Need to move common flow & remove product.donf entry" "petchimuthu@zohocorp.com,karthiga.c@zohocorp.com" "subModuleCheckoutArgs Details : '${arg_val}'"

	else
		subModule_checkout_mailnotification "SubproductName entry is missing in product conf need to ASAP in ${ARG} of ${PRODUCT_NAME}" "integration-team@zohocorp.com" "subModuleCheckoutArgs Details : '${arg_val}'"

	fi
}

subModule_checkout_mailnotification() {

	SUBMODULE_CHECKOUT_ERR_SUBJECT=$1
	SUBMODULE_CHECKOUT_MAIL_ID=$2
	mail -r "integration-team@zohocorp.com" -s "${SUBMODULE_CHECKOUT_ERR_SUBJECT}" "${SUBMODULE_CHECKOUT_MAIL_ID}" <<-EOF
		        Dear Team,

		                Submodule checkout details availble in productname conf .

		        Thanks & Regards,
		        Integration Team
	EOF

}

subModulesCheckout() {
	echo "submodule_clone calling"
	#if [ "${PRODUCT_NAME}" != "ZOHOSITES_TEMPLATES" -a "${PRODUCT_NAME}" != "LANDINGPAGES_TEMPLATES" ]
	#then
	#        subModule_checkout_fromconf_notify_mail $1
	#fi
	SUBMODULE_ARGS=$1
	SUBMODULE_REP_TYPE=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f1)
	SUBMODULE_GRP=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f2 | grep "/" | sed 's@/[^/]*$@/@')
	SUBMODULE_NAME=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f2 | grep "/" | awk -F/ '{print $NF}')
	SUBMODULE_LABEL=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f3)
	SUBMODULE_CLONE_URL=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f5)

	echo "Splitted values ${SUBMODULE_GRP} ${SUBMODULE_NAME} ${SUBMODULE_LABEL} ${SUBMODULE_REP_TYPE}"
	SUBMODULES_LIST=""

	if [ -z "${SUBMODULES_LIST}" ]; then
		SUBMODULE_PRDNAME=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f4)
		SUBMODULES_LIST="${SUBMODULE_NAME}@${SUBMODULE_PRDNAME}"
	fi
	if [ -n "${SUBMODULES_LIST}" ]; then
		echo "Sub Module List values are ${SUBMODULES_LIST}"
		for i in $(echo ${SUBMODULES_LIST}); do
			SUBMODULE_MODNAME=$(echo $i | cut -d "@" -f1)
			SUBMODULE_PRD=$(echo $i | cut -d "@" -f2)
			SUBMODULE_NAME_SEARCH=$(echo ${SUBMODULE_MODNAME} | grep -w "${SUBMODULE_NAME}")
			if [ -n "${SUBMODULE_NAME_SEARCH}" -a "${SUBMODULE_LABEL}" != "NA" ]; then
				if [ "${SUBMODULE_REP_TYPE}" = "HG" ]; then
					if [ -d "${REPO_DIR}/${SUBMODULE_NAME}" ]; then
						echo "${REPO_DIR}/${SUBMODULE_NAME} directory already exists. Pull process started ..."
						cd ${REPO_DIR}/${SUBMODULE_NAME}
						SM_PULL_ST_TIME=$(date +%b_%d_%Y@%T)
						hg pull https://${HGREPO_USERNAME}:${HGREPO_PASSWORD}@cmsuite.csez.zohocorpin.com/${SUBMODULE_GRP}//${SUBMODULE_NAME}
						echo "Hg Tip Version ( Before build started )"
						hg tip
						SM_PULL_END_TIME=$(date +%b_%d_%Y@%T)
						time_cal "Pulling ${SUBMODULE_NAME} Sources " "${SM_PULL_ST_TIME}" "${SM_PULL_END_TIME}"
					else
						echo "${REPO_DIR}/${SUBMODULE_NAME} directory does not exist. Clone process started ..."
						cd ${REPO_DIR}
						SM_CLONE_ST_TIME=$(date +%b_%d_%Y@%T)
						hg clone -U https://${HGREPO_USERNAME}:${HGREPO_PASSWORD}@cmsuite.csez.zohocorpin.com/${SUBMODULE_GRP}//${SUBMODULE_NAME}
						SM_CLONE_END_TIME=$(date +%b_%d_%Y@%T)
						time_cal "Cloning ${SUBMODULE_NAME} Sources" "${SM_CLONE_ST_TIME}" "${SM_CLONE_END_TIME}"
					fi
					hg share ${REPO_DIR}/${SUBMODULE_NAME} ${WORK_DIR}/${SUBMODULE_NAME}
					cd ${WORK_DIR}/${SUBMODULE_NAME}
					hg upd -r${SUBMODULE_LABEL} -C
					hg summ
					getTipVersionForHGSubModules
				else
					cd ${WORK_DIR}
					if [ -d "${WORK_DIR}/${SUBMODULE_NAME}" ]; then
						rm -rf ${SUBMODULE_NAME}
					fi
					SM_CLONE_ST_TIME=$(date +%b_%d_%Y@%T)
					if [ ${ZREPO_GITCLONE_CONF} = "YES" ]; then
						SUBMODULE_CLONE_URL=$(echo ${SUBMODULE_ARGS} | grep ":" | cut -d ":" -f2)
						if [ ! -z "${ACCESS_VALUE}" -a ! -z ${SUBMODULE_CLONE_URL} -a ${ZREPO_GITCLONE_CONF} = "YES" ]; then
							ZRESUB_CLONE_VAL="https://repository.zoho.com/zohocorp/"${SUBMODULE_CLONE_URL}".git"
							echo "Conf sub module clone ulr for zrepo: ${ZRESUB_CLONE_VAL}"
							common_clone_method_git ${ZRESUB_CLONE_VAL} ${SUBMODULE_LABEL} "SUB_SRC" >>${WORK_DIR}/logs/submodule_checkout.log 2>&1
						else
							echo "Access value & SUBMODULE_CLONE_URL is missing "
						fi

					else

						if [ ! -z ${SUBMODULE_CLONE_URL} ]; then
							EXACT_CLONE_URL="https:"${SUBMODULE_CLONE_URL}
							AUTH_EXACT_CLONE_URL=$(echo $EXACT_CLONE_URL | sed -e "s@https://@https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}\@@g")
							git clone -b ${SUBMODULE_LABEL} --single-branch ${AUTH_EXACT_CLONE_URL} >>${WORK_DIR}/logs/submodule_checkout.log 2>&1
						else
							git clone -b ${SUBMODULE_LABEL} --single-branch https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}@git.csez.zohocorpin.com/${SUBMODULE_GRP}/${SUBMODULE_NAME}.git >>${WORK_DIR}/logs/submodule_checkout.log 2>&1
						fi

						if [ $? -ne 0 ]; then

							if [ ! -z ${SUBMODULE_CLONE_URL} ]; then
								EXACT_CLONE_URL="https:"${SUBMODULE_CLONE_URL}
								AUTH_EXACT_CLONE_URL=$(echo $EXACT_CLONE_URL | sed -e "s@https://@https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}\@@g")
								git clone -b ${SUBMODULE_LABEL} --single-branch ${AUTH_EXACT_CLONE_URL} >>${WORK_DIR}/logs/submodule_checkout.log 2>&1
							else
								git clone -b ${SUBMODULE_LABEL} --single-branch https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}@git.csez.zohocorpin.com/${SUBMODULE_GRP}/${SUBMODULE_NAME}.git >>${WORK_DIR}/logs/submodule_checkout.log 2>&1
							fi
						fi
						SM_CLONE_END_TIME=$(date +%b_%d_%Y@%T)
						time_cal "Cloning ${SUBMODULE_NAME} Sources" "${SM_CLONE_ST_TIME}" "${SM_CLONE_END_TIME}"
						if [ ! -d "${WORK_DIR}/${SUBMODULE_NAME}" ]; then
							EXIT_MESSAGE="Submodule clone not done properly ${SUBMODULE_NAME}  .. Hence exiting .."
							echo "${EXIT_MESSAGE}"
							echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
							REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
							export REASON_FOR_BUILD_FAILURE
							copyBuilderrorlogs
							BUILD_STATUS="FAILURE"
							export BUILD_STATUS
							updateBuildDetails
							exit 1

						fi
					fi

					getTipVersionForGITSubModules
				fi
			fi
		done
	else
		echo "Sub Module List is empty. Hence skipped this process."
	fi
}

getTipVersionForHGSubModules() {
	cd ${WORK_DIR}/${SUBMODULE_NAME}
	SM_TIP_ST_TIME=$(date +%b_%d_%Y@%T)
	export eval ${SUBMODULE_PRD}_TIPVERSION=$(hg parent | grep changeset: | cut -d " " -f4 | cut -d ":" -f1)
	export eval ${SUBMODULE_PRD}_CHANGESET_VAL=$(hg parent | grep changeset: | cut -d " " -f4 | cut -d ":" -f2)
	HG_SM_CSET_VAL=$(eval echo \${${SUBMODULE_PRD}_CHANGESET_VAL})
	HG_SM_TIP_VER=$(eval echo \${${SUBMODULE_PRD}_TIPVERSION})
	echo "${SUBMODULE_NAME} TIP VERSION is : $(eval echo \${${SUBMODULE_PRD}_TIPVERSION})"
	echo "${SUBMODULE_NAME} CHANGESET VALUE is : $(eval echo \${${SUBMODULE_PRD}_CHANGESET_VAL})"
	SM_TIP_END_TIME=$(date +%b_%d_%Y@%T)
	if [ "${HG_SM_CSET_VAL}" = "" ]; then
		EXIT_MESSAGE="Error Occured while getting ${SUBMODULE_NAME} tip version .. Hence exiting .."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		copyBuilderrorlogs
		updateBuildDetails
		exit 1
	fi
	sub_conf_changeset_file=${WORK_DIR}/sub_prod_conf.txt
	echo "SUB_CONF_TIP_CHANGESET_CLN=\"${SUBMODULE_PRD}:${HG_SM_CSET_VAL}::${SUBMODULE_LABEL}\"" >>${sub_conf_changeset_file}

	time_cal "Getting Tip Version process for ${SUBMODULE_NAME}" "${SM_TIP_ST_TIME}" "${SM_TIP_END_TIME}"
	echo "${SUBMODULE_PRD}=${SUBMODULE_LABEL} (${HG_SM_TIP_VER}:${HG_SM_CSET_VAL})<br><br>"
}

getTipVersionForGITSubModules() {
	cd ${WORK_DIR}/${SUBMODULE_NAME}
	echo "${SUBMODULE_NAME} git Tip Version ( Before build started )"
	git log -n 1
	export eval ${SUBMODULE_PRD}_CHANGESET_VAL=$(git show | grep "^commit" | cut -d " " -f2)
	GIT_SM_CSET_VAL=$(eval echo \${${SUBMODULE_PRD}_CHANGESET_VAL})
	GIT_SM_TIP_VER=$(eval echo \${${SUBMODULE_PRD}_TIPVERSION})
	if [ "${GIT_SM_CSET_VAL}" = "" ]; then
		sendErrorMail "Error Occured while getting ${SUBMODULE_NAME} tip version" "Error Occured while getting ${SUBMODULE_NAME} tip version"
	fi
	sub_conf_changeset_file=${WORK_DIR}/sub_prod_conf.txt
	echo "SUB_CONF_TIP_CHANGESET_CLN=\"${SUBMODULE_PRD}:${GIT_SM_CSET_VAL}::${SUBMODULE_LABEL}\"" >>${sub_conf_changeset_file}

	echo "${SUBMODULE_PRD}=${SUBMODULE_LABEL} (${GIT_SM_TIP_VER}:${GIT_SM_CSET_VAL})<br><br>"
}

copyCustomerSources() {
	if [ "${CUSTOMER_NAME}" != "DEFAULT" -a "${CUSTOMER_NAME}" != "" ]; then
		logTime "Copying ${CUSTOMER_NAME} customer files" "Started"
		echo "Selected CUSTOMER_NAME is ${CUSTOMER_NAME}"
		echo "REPOSITORY_TYPE : ${REPOSITORY_TYPE}"
		if [ "${REPOSITORY_TYPE}" = "HG" ]; then
			cd ${REPO_DIR}/${MOD_NAME}
		else
			cd ${WORK_DIR}/${MOD_NAME}
		fi
		cust_resource_path="${SOURCE_BASE_DIR}/customer_resources"
		customer_dirname=$(echo ${CUSTOMER_NAME} | tr [A-Z] [a-z])
		if [ -d "${cust_resource_path}/${customer_dirname}" ]; then
			echo "${cust_resource_path}/${customer_dirname} is Present."
			cp -rfv ${cust_resource_path}/${customer_dirname}/** ${WORK_DIR}/${CHECKOUT_DIR}
		else
			echo "${cust_resource_path}/${customer_dirname} is not Present."
		fi

		logTime "Copying ${CUSTOMER_NAME} customer files" "Started"
	fi
}

get_patch_pre_buildurl() {
	if [ "${BUILD_TASKS}" = "JAVA_JSP" ]; then
		PATCH_BUILD_ENABLED="YES"
		for dep_bld_pre in $(echo ${DEP_BUILDS} | tr "," " "); do
			dep_crm_name=$(echo ${dep_bld_pre} | cut -d "=" -f1 | cut -d ":" -f1)
			if [ "${dep_crm_name}" = "${PRODUCT_NAME}" ]; then
				if [ ! -z "${PATCH_BUILD_CHANGESET}" ]; then
					dep_val_crm=$(echo ${dep_bld_pre} | cut -d "=" -f2)
					depBldUrl_patch=$(echo ${dep_val_crm} | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*")
					if [ ! -z $depBldUrl_patch ]; then
						echo $depBldUrl_patch
						export $depBldUrl_patch
						echo "PATCH_BUILD_URL=\"${depBldUrl_patch}\"" >>${build_info_file}
						export depBldUrl_patch
						#patch_build_url=$depBldUrl_crm
						BUILD_OPTS="${BUILD_OPTS} -Dpatch_build_url=${depBldUrl_patch}"
						patch_precheck
					fi
				fi

			fi
		done
	fi

}

getModifiedsource_api() {
	PREV_PATCH_LABEL=$1
	if [ "${PREV_PATCH_LABEL}" != "" ]; then
		PREV_DBUILD_LBL=${PREV_PATCH_LABEL}
	fi

	echo "getModifiedsource_api calling"
	API="${cmtools_domain_name}/api/v1/repo/get_build_diff?"
	if [ "${PATCH_BUILD_CHANGESET}" != "NA" ]; then
		PARAMS="repo_link=${CLONE_VALUE}&revision1=${PATCH_BUILD_CHANGESET}&files_only=true"
	else
		PARAMS="repo_link=${CLONE_VALUE}&revision1=${PREV_DBUILD_LBL}&revision2=${TIP_CHANGESET}&files_only=true"
	fi
	PARAMS_VAL="repo_link=${CLONE_VALUE}&revision1=${PREV_DBUILD_LBL}&revision2=${TIP_CHANGESET}&files_only=true"
	mod_src_files=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${API}${PARAMS}")
	echo "${API}${PARAMS_VAL}"
	modified_src_files=$(echo $mod_src_files | cut -d ":" -f2 | sed 's/[\[\]//' | sed 's/[\"]\]/"/' | sed 's/[\}\]//')
	echo $modified_src_files
	updModifiedSource_api

}

modified_src_copy() {
	PATCH_SRC_TEMPFROM=$1
	PATCH_SRC_TEMPTO=$2

	for i in $(echo $modified_src_files | tr "," " "); do
		file_val=$(echo $i | sed 's/\"//' | sed 's/\"//')
		file_dir_path=$(dirname $file_val)
		mkdir -p ${PATCH_SRC_TEMPTO}/${file_dir_path}
		cp ${PATCH_SRC_TEMPFROM}/$file_val ${PATCH_SRC_TEMPTO}/${file_dir_path}

	done
}

submodule_patch_diff() {
	pre_URL=$(dirname $depBldUrl_patch | sed "s@https://build.zohocorp.com/@/zoho/build/downloads/dload/@g")

	SUBPREV_TXT_FILE=$(cat "${pre_URL}/logs/${PRODUCT_NAME}".txt | grep "TIP_SUB_PRODUCT_DETAILS" | cut -d "=" -f2 | sed s@\"@@g)
	SUBCURRENT_TXT_FILE=$(cat "${WORK_DIR}/${PRODUCT_NAME}".txt | grep "TIP_SUB_PRODUCT_DETAILS" | cut -d "=" -f2 | sed s@\"@@g)

	if [ -n "$SUBPREV_TXT_FILE" -a -n "$SUBCURRENT_TXT_FILE" ]; then

		for suburl in $(echo $SUBCURRENT_TXT_FILE | tr "," "\n" | sed "s@\"@@g"); do
			if [ ! -z $suburl ]; then
				subcln=$(echo $suburl | awk -F ":" '{print $(NF-3)}')
				subcln_url="http:$subcln"
				sub_mod_name=$(echo $subcln_url | awk -F/ '{ print $(NF-0) }' | sed 's@\.git@@g')
				mv ${WORK_DIR}/${sub_mod_name} ${WORK_DIR}/${sub_mod_name}_PATCH_SUBSRC_TEMP

			fi

		done

		echo $SUBCURRENT_TXT_FILE
		echo $SUBPREV_TXT_FILE

		for i in $(echo $SUBPREV_TXT_FILE | tr "," "\n" | sed "s@\"@@g"); do
			if [ ! -z $i ]; then
				SUB_PREV_CHANGESET=$(echo $i | awk -F ":" '{print $(NF-1)}')
				SUB_PREV_PRODUCT=$(echo $i | cut -d "=" -f1)
				SUB_CURRENT_CHANGESET=$(echo $SUBCURRENT_TXT_FILE | grep -o "\b${SUB_PREV_PRODUCT}\b\([^,]\+\)" | awk -F ":" '{print $(NF-1)}')
				SUB_CURRENT_CHANGESET=$(echo $SUBCURRENT_TXT_FILE | grep -o "\b${SUB_PREV_PRODUCT}\b\([^,]\+\)" | awk -F ":" '{print $(NF-1)}')
				SUBCLONE_URL=$(echo $SUBCURRENT_TXT_FILE | grep -o "\b${SUB_PREV_PRODUCT}\b\([^,]\+\)" | awk -F ":" '{print $(NF-3)}')
				op=$(echo https:$SUBCLONE_URL:${SUB_PREV_CHANGESET}:${SUB_CURRENT_CHANGESET})
				echo $op

				if [ "${SUB_CURRENT_CHANGESET}" = "${SUB_PREV_CHANGESET}" ]; then
					echo "same changesets ignore copy files .."

				elif [ -n "${SUB_CURRENT_CHANGESET}" -a -n "${SUB_PREV_CHANGESET}" ]; then
					echo "Changeset differ , So copy only modified files."
					echo ${SUBCLONE_URL} ${SUB_PREV_CHANGESET} ${SUB_CURRENT_CHANGESET}
					getdiff_api "https:${SUBCLONE_URL}" "${SUB_PREV_CHANGESET}" "${SUB_CURRENT_CHANGESET}"

				else
					echo "Changeset is empty ,so submodule sources are not copied. "
				fi

			fi

		done
	else
		echo "previous or current build tip Changeset is empty ,so submodule checkout process skipped. "

	fi

}

getdiff_api() {
	SUBCLN_VALUE=$1
	PRESUB_CHANGESET=$2
	CUR_SUBTIP_CHANGESET=$3

	API="${cmtools_domain_name}/api/v1/repo/get_build_diff?"
	PARAMS="repo_link=${SUBCLN_VALUE}&revision1=${PRESUB_CHANGESET}&revision2=${CUR_SUBTIP_CHANGESET}&files_only=true"
	PARAMS_VAL="repo_link=${SUBCLN_VALUE}&revision1=${PRESUB_CHANGESET}&revision2=${CUR_SUBTIP_CHANGESET}&files_only=true"

	mod_src_files=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${API}${PARAMS}")
	echo "${API}${PARAMS_VAL}"
	modified_src_files=$(echo $mod_src_files | cut -d ":" -f2 | sed -e "s@{@@g" -e "s@}@@g" -e "s@\[@@g" -e "s@\]@@g")
	echo $modified_src_files
	sub_mod_name=$(echo $SUBCLN_VALUE | awk -F/ '{ print $(NF-0) }' | sed 's@\.git@@g')
	modified_src_copy ${WORK_DIR}/${sub_mod_name}_PATCH_SUBSRC_TEMP ${WORK_DIR}/${sub_mod_name}
}

updModifiedSource_api() {
	echo "updModifiedSource_api calling"
	changed_files=$(echo ${modified_src_files} | tr " " "\n" | grep -Ev "(.java|.jsp|.conf|.txt|.html|.sh|.xml|.scala|.py)" | wc -l)
	echo ${changed_files}
	if [ "${modified_src_files}" != "" -a "${changed_files}" -eq 0 ]; then
		BUILD_TASKS="JAVA_JSP"
		mkdir -p ${WORK_DIR}/PATCH_SRC_TEMP
		cd ${SOURCE_BASE_DIR}
		all_dir=$(ls | grep -Ev "build")
		mv ${all_dir} ${WORK_DIR}/PATCH_SRC_TEMP/
		cd -

		#modified_src_copy
		modified_src_copy "${WORK_DIR}/PATCH_SRC_TEMP" "${SOURCE_BASE_DIR}"
		submodule_patch_diff

		if [ -d "${SOURCE_BASE_DIR}/source" -o -d "${SOURCE_BASE_DIR}/src" ]; then
			java_file=$(find ${SOURCE_BASE_DIR}/source ${SOURCE_BASE_DIR}/src -iname "*.java" | wc -l)
			echo $java_file
			echo "patch update"
			BUILD_OPTS="${BUILD_OPTS} -Dsec_js_zip=no"
			if [ "${java_file}" -gt 0 ]; then
				BUILD_OPTS="${BUILD_OPTS} -Djava_jspzip_exec_needed=yes"
			else
				BUILD_OPTS="${BUILD_OPTS} -Djava_jspzip_exec_needed=no"
			fi
		else
			BUILD_OPTS="${BUILD_OPTS} -Djava_jspzip_exec_needed=no"
		fi
		if [ -d "${SOURCE_BASE_DIR}/webapps" ]; then

			BUILD_OPTS="${BUILD_OPTS} -Dsec_js_zip=no"
			jsp_file=$(find ${SOURCE_BASE_DIR}/webapps -iname "*.jsp" | wc -l)
			if [ "${jsp_file}" -gt 0 ]; then
				cp -rf ${WORK_DIR}/PATCH_SRC_TEMP/webapps ${SOURCE_BASE_DIR}/
				BUILD_OPTS="${BUILD_OPTS} -Djspcompilation_needed=yes"

			else
				BUILD_OPTS="${BUILD_OPTS} -Djspcompilation_needed=no"
			fi
		else
			BUILD_OPTS="${BUILD_OPTS} -Djspcompilation_needed=no"
		fi
	else
		BUILD_TASKS="COMPLETE"
		echo "Either Modified source file count is empty or other than java and jsp files modified. Hence enabling the full build "
	fi

}

getModifiedSource() {

	cd ${SOURCE_BASE_DIR}
	if [ "${REPOSITORY_TYPE}" = "HG" ]; then
		modified_src_files=$(hg st --rev ${PREV_SRC_CHANGESET}:${CHANGESET_VALUE} | grep -v "^R " | awk '{print $2}' | tr "\n" " ")
	elif [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		modified_src_files=$(git log --name-status ${PREV_SRC_CHANGESET}..${CHANGESET_VALUE} | grep -e "^[A|M]\s" | awk '{print $2}' | tr "\n" " ")
	else
		modified_src_files=""
	fi
	echo $modified_src_files
	echo "MMMM"
	updModifiedSource
	cd -
}

updModifiedSource() {
	changed_files=$(echo ${modified_src_files} | tr " " "\n" | grep -Ev "(.java|.jsp)" | wc -l)
	if [ "${modified_src_files}" != "" -a "${changed_files}" -eq 0 ]; then
		BUILD_TASKS="JAVA_JSP"
		rm -rf ${SOURCE_BASE_DIR}/source ${SOURCE_BASE_DIR}/webapps
		if [ "${REPOSITORY_TYPE}" = "HG" ]; then
			echo "hg source updated"
			hg revert -r${CHANGESET_VALUE} ${modified_src_files}
		else
			echo "git source updated."
			git checkout ${CHANGESET_VALUE} ${modified_src_files}
		fi
		if [ -d "${SOURCE_BASE_DIR}/source" ]; then
			java_file=$(find ${SOURCE_BASE_DIR}/source -iname "*.java" | wc -l)
			echo $java_file
			echo "patch update"
			BUILD_OPTS="${BUILD_OPTS} -Dsec_js_zip=no"
			if [ "${java_file}" -gt 0 ]; then
				BUILD_OPTS="${BUILD_OPTS} -Djava_jspzip_exec_needed=yes"
			else
				BUILD_OPTS="${BUILD_OPTS} -Djava_jspzip_exec_needed=no"
			fi
		else
			BUILD_OPTS="${BUILD_OPTS} -Djava_jspzip_exec_needed=no"
		fi

		if [ -d "${SOURCE_BASE_DIR}/webapps" ]; then
			jsp_file=$(find ${SOURCE_BASE_DIR}/webapps -iname "*.jsp" | wc -l)
			if [ "${jsp_file}" -gt 0 ]; then
				BUILD_OPTS="${BUILD_OPTS} -Djspcompilation_needed=yes"
				if [ "${REPOSITORY_TYPE}" = "HG" ]; then
					hg revert -r${CHANGESET_VALUE} webapps
				elif [ "${jsp_file}" -gt 0 -a "${REPOSITORY_TYPE}" = "GIT" ]; then
					git checkout ${CHANGESET_VALUE} webapps
				fi
			else
				BUILD_OPTS="${BUILD_OPTS} -Djspcompilation_needed=no"
			fi
		else
			BUILD_OPTS="${BUILD_OPTS} -Djspcompilation_needed=no"
		fi
	else
		BUILD_TASKS="COMPLETE"
		echo "Either Modified source file count is empty or other than java and jsp files modified. Hence enabling the full build "
	fi

}

changeClasspath() {
	if [ -f "${ant_file}" ]; then
		all_classpath_value=$(grep -E "(classpath=|\.jar:)" ${ant_file} | grep -Ev "(utility_packages|ddtool)" | grep ".jar")
		if [ "${all_classpath_value}" != "" ]; then
			echo "################################" >>${ant_file}
			for classpath_value in $(echo ${all_classpath_value} | tr "\n" " "); do
				new_classpath=""
				var_name=$(echo ${classpath_value} | cut -d "=" -f1)
				classpath=$(echo ${classpath_value} | cut -d "=" -f2)
				for i in $(echo ${classpath} | tr ":" " "); do
					new_value=$(echo "${i}")
					value=$(echo ${i} | grep "\.jar" | grep -v "{env")
					jarname=$(basename $i)
					if [ "${jarname}" = "jstl-1.2.jar" -a ! -f "${WEBINF_dir}/lib/${jarname}" ]; then
						jarname="jstl.jar"
					fi
					if [ "${value}" != "" ]; then
						tomcatvalue=$(echo ${i} | grep -Ev "(tomcatlib|tomcatbin|saspkg)")
						if [ "${tomcatvalue}" != "" ]; then
							new_value="${WEBINF_dir}/lib/${jarname}"
						fi
					fi
					if [ "${new_classpath}" != "" ]; then
						new_classpath=${new_classpath}:${new_value}
					else
						new_classpath=${new_value}
					fi
				done
				echo "${var_name}=${new_classpath}" >>${ant_file}
			done
		fi
	else
		echo "${ant_file} is not present. Hence skipping this process."
	fi
}

getTipChangeSetOnRetry() {
	branch_cset_on_retry=$(python ${WORK_DIR}/hg_utils/build/gettip_changeset.py "${CLONE_VALUE}" "${ARG}")
	if [ "${branch_cset_on_retry}" != "" ]; then
		branch_tip_cset_on_retry_val=$(echo $branch_cset_on_retry | cut -d "=" -f2)
	else
		branch_tip_cset_on_retry_val="NA"
		echo "[BUILD RETRY INFO] : Error while getting latest commit so build restarted without src changes.."
	fi
	echo ${branch_tip_cset_on_retry_val}

}

gitclone_src_sub() {
	git_repo_url=${CLONE_VALUE}
	api_value=$(echo $git_repo_url | sed "s@\(.*\).csez.zohocorpin.com/@@g" | sed -e "s@\.git@@g" | sed -e "s@\/@%2F@g" | sed -e "s@\.@%2E@g")
	pre_api=$(echo $git_repo_url | cut -d "=" -f2 | cut -d "/" -f3)
	if [ ! -z ${TIP_CHANGESET} ]; then

		CLONE_ARG=${TIP_CHANGESET}
	else
		echo ${CLONE_VALUE} | grep "repository.zoho.com"
		if [ $? -ne 0 ]; then
			repo_gettip_changeset=$(python ${WORK_DIR}/hg_utils/build/gettip_changeset.py "${CLONE_VALUE}" "${ARG}")
			echo $repo_gettip_changeset
			TIP_CHANGESET_RETRY=$(echo $repo_gettip_changeset | cut -d "=" -f2)
			CLONE_ARG="${TIP_CHANGESET_RETRY}"
			if [ ! -z $TIP_CHANGESET_RETRY ]; then
				echo "need to update prod.txt"
				sed -i "s@TIP_CHANGSET=\(.*\)@TIP_CHANGESET=\"${TIP_CHANGESET_RETRY}\"@g" ${build_info_file}
			fi
		else
			CLONE_ARG="${ARG}"

		fi

	fi
	echo $CLONE_VALUE | grep "repository.zoho.com"
	if [ $? -eq 0 ]; then
		echo "Repo avilable under zrepositry so clone wget calling added."
		zrepo_wget "${CLONE_ARG}" "${MODULE_NAME}" "${ZREPO_ID}"

		CHANGE_API_PRD=$(cat ${WORK_DIR}/hg_utils/build/CHANGEFILES_API_USED_PRODUCTS.txt | grep -w "${PRODUCT_NAME}")
		if [ -n "${CHANGE_API_PRD}" -a ! -f ${WORK_DIR}/${MODULE_NAME}-${CLONE_ARG}.zip ]; then
			echo "Source zip not downloaded using Changefiles api"
			EXIT_MESSAGE="Source zip not avilable .. Hence exiting .."
			echo "${EXIT_MESSAGE}"
			echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
			export REASON_FOR_BUILD_FAILURE
			copyBuilderrorlogs
			BUILD_STATUS="FAILURE"
			export BUILD_STATUS
			updateBuildDetails
			exit 1
		fi

		if [ "${BUILD_RETRY}" = "SOURCE" ]; then
			copySrcOnRetry "${WORK_DIR}/${MODULE_NAME}" "${SOURCE_BASE_DIR}"
		else
			mv "${WORK_DIR}"/"${MODULE_NAME}" "${SOURCE_BASE_DIR}"
		fi

		cd ${WORK_DIR}

		if [ ! -f ${MODULE_NAME}-${CLONE_ARG}.zip -o -f "${WORK_DIR}/${checkout_mod_name}_gitmod.txt" ]; then
			getRepoSrc "clone"
			src_corrupt_SendMail

		fi

	else

		if [ -n "$(echo ${CLONE_VALUE} | grep "https://zbgit.csez.zohocorpin.com")" ]; then
			DOMAIN_PREFIX="zbgit"
		elif [ "$(echo ${CLONE_VALUE} | grep "https://zgit.csez.zohocorpin.com")" ]; then
			DOMAIN_PREFIX="zgit"
		else
			DOMAIN_PREFIX="git"
		fi
		if [ -z ${TIP_CHANGESET} -a -z ${TIP_CHANGESET_RETRY} ]; then
			echo "tipchangeset is empty"
			getRepoSrc "clone"
		else

			get_val=$(curl -k -X GET --header 'PRIVATE-TOKEN:'${GIT_WGET_PRIVATE_TOKEN} 'https://'${DOMAIN_PREFIX}'.csez.zohocorpin.com/api/v4/projects/'${api_value}'/repository/files/.gitmodules?ref='${CLONE_ARG}'')

			##status_val=`echo $get_val | grep -i "404 File Not Found"`
			echo $get_val
			status_val=$(echo $get_val | grep -e file_name -e file_path)
			if [ $? -eq 0 ]; then
				echo "Git sub module* product is there so should clone repo"
				getRepoSrc "clone"
			else
				echo "Wget started"
				updateExactSrc git_source_wget

			fi
		fi
	fi

}

checkout() {
	logTime "${ARG} Checkout process" "Started"
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		gitclone_src_sub
		###updateExactSrc git_source_wget
	else
		updateExactSrc hg_source_wget
	fi
	logTime "${ARG} Checkout process" "Ended"
}
reviewedbranchCheckout() {
	logTime "${ARG} - reviewedbranchCheckout process" "Started"
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		gitclone_src_sub
		##updateExactSrc git_source_wget
	else
		updateExactSrc hg_source_wget
	fi
	logTime "${ARG} - reviewedbranchCheckout process" "Ended"
}
customerbranchCheckout() {
	logTime "${ARG} - customerbranchCheckout process" "Started"
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		gitclone_src_sub
		##updateExactSrc git_source_wget
	else
		updateExactSrc hg_source_wget
	fi
	logTime "${ARG} - customerbranchCheckout process" "Ended"
}
configuredbranchCheckout() {
	logTime "${ARG} - configuredbranchCheckout process" "Started"
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		gitclone_src_sub
		##updateExactSrc git_source_wget
	else
		updateExactSrc hg_source_wget
	fi
	logTime "${ARG} - configuredbranchCheckout process" "Ended"
}
configuredreviewedbranchCheckout() {
	logTime "${ARG} - configuredreviewedbranchCheckout process" "Started"

	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		gitclone_src_sub
		##updateExactSrc git_source_wget
	else
		updateExactSrc hg_source_wget
	fi
	logTime "${ARG} - configuredreviewedbranchCheckout process" "Ended"
}
branchCheckout() {
	logTime "${ARG} - branchCheckout process" "Started"
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		gitclone_src_sub
		##updateExactSrc git_source_wget
	else
		updateExactSrc hg_source_wget
	fi
	logTime "${ARG} - branchCheckout process" "Ended"
}
removeEmptyFiles() {
	if [ "${REMOVE_EMPTY_FILES_NEEDED}" = "YES" ]; then
		logTime "Removing Empty Files" "Started"
		cd ${WORK_DIR}
		find ${CHECKOUT_DIR} -type f -empty >${EMPTY_FILES_LOG}
		perl -w -e "s@${CHECKOUT_DIR}@${MOD_NAME}@g" -p -i ${EMPTY_FILES_LOG}
		if [ -z "${EMPTYFILE_REMOVAL_EXCLUDE}" ]; then
			rm -vf $(find ${CHECKOUT_DIR} -type f -empty)
		else
			rm -vf $(find ${CHECKOUT_DIR} -type f -empty | grep -Ev ${EMPTYFILE_REMOVAL_EXCLUDE})
		fi
		logTime "Removing Empty Files" "Ended"
	fi
	if [ -d "${HOME}/webhost" ]; then
		cd ${HOME}/webhost
		GET_EMPTY_FOLDERS=$(find -maxdepth 2 -empty -type d | grep -wv "reports" | sed "s@^\.\/@@g")
		for i in $(echo $GET_EMPTY_FOLDERS); do
			rmdir -p $i
			if [ $? -ne 0 ]; then
				echo ".......................... Error while removing $i ..............................."
			fi
		done
	fi
}

keyword_check() {
	if [ "${KEYWORD_CHECK_NEEDED}" = "YES" ]; then
		logTime "Keyword check" "Started"
		cd ${BUILD_DIR}
		egrep -nr $KEY_WORDS . | egrep -iv $IGNORE_DIRS >${KEY_WORDS_LOGS} 2>&1
		if [ $? -eq 0 ]; then
			keyword_check_notify_mail
			updateBuildErrorStatus "The build has been stopped due to key words violation"
			copyBuilderrorlogs
			BUILD_STATUS="FAILURE"
			export BUILD_STATUS
			updateBuildDetails
			exit 1
		fi
		logTime "Keyword check" "Ended"
	fi
}
keyword_check_notify_mail() {
	KEY_WORDS_ERR_SUBJECT="Build Stopped - Due to Key Word Check Violation --- ${ARG} Build"
	ERROR_KEY_MAIL_ID="${ERROR_MAIL_ID},cm-info@zohocorp.com"
	mail -r "integration-team@zohocorp.com" -s "${KEY_WORDS_ERR_SUBJECT}" "${ERROR_KEY_MAIL_ID}" <<-EOF
		Dear Team,

		The build has been stopped due to key words violation

		The following files have $KEY_WORDS , Please remove the same and try to put webhost build.

		$(cat $KEY_WORDS_LOGS)

		Kindly get back to us for further support in this regard.

		Thanks & Regards,
		Integration Team
	EOF
}

copyBuildFile() {
	logTime "Copying build files to ${BUILD_DIR} directory" "Started"
	mkdir -p ${BUILD_DIR}
	mkdir -p ${LOGS_DIR}
	if [ "${PRODUCT_NAME}" = "COMPONENTS" ]; then
		cp -f "${CONF_DIR}/ant.properties" ${BUILD_DIR}

	fi
	if [ "${PRODUCT_NAME}" = "ZOHOREPORTS" ]; then
		cp -f "${CONF_DIR}/build_script.sh" ${BUILD_DIR}
	fi

	if [ "${PRODUCT_NAME}" != "HG_UTILS" ]; then
		hg_utils_files="${WORK_DIR}/hg_utils/build/build.xml,${WORK_DIR}/hg_utils/build/build_binary.xml,${WORK_DIR}/hg_utils/build/library.xml,${WORK_DIR}/hg_utils/build/buildlog.shtml,${WORK_DIR}/hg_utils/build/convertcomment.sh,${WORK_DIR}/hg_utils/build/security.xsd,${WORK_DIR}/hg_utils/build/post_build.xml,${WORK_DIR}/hg_utils/build/pre_build.xml,${WORK_DIR}/hg_utils/build/security-audit-precompilation.sh,${WORK_DIR}/hg_utils/build/parseProperties_txt.pl,${WORK_DIR}/hg_utils/build/exe_utility,${WORK_DIR}/hg_utils/build/mobileprovisionParser,${WORK_DIR}/hg_utils/build/GetTime.class,${WORK_DIR}/hg_utils/build/build_time_xml_to_html.py,${WORK_DIR}/hg_utils/build/build_time.py,${WORK_DIR}/hg_utils/build/allowed_dependency_urls.txt,${WORK_DIR}/hg_utils/build/githg_changset.sh,${WORK_DIR}/hg_utils/build/download_websiterepo.sh,${WORK_DIR}/hg_utils/build/UBI_files_to_be_removed.txt"

		for utilfile in $(echo $hg_utils_files | tr "," " "); do
			cp -fv $utilfile ${BUILD_DIR}
		done

	fi
	cp -rf ${WORK_DIR}/hg_utils/build/rule/** ${BUILD_DIR}/
	cp -rf ${WORK_DIR}/hg_utils/ ${BUILD_DIR}/
	cp -rf ${WORK_DIR}/hg_utils/build/exclude_files.txt ${WORK_DIR}/
	#cp -rf ${WORK_DIR}/hg_utils/utility_packages/bowerJsonParser/bowerJsonParser.js ${BUILD_DIR}/
	#cp -rf ${WORK_DIR}/hg_utils/build/integ_bower_install.sh ${BUILD_DIR}/

	mkdir -p ${BUILD_DIR}/buildlogs
	cp -f ${WORK_DIR}/hg_utils/build/process.html ${BUILD_DIR}/buildlogs

	logTime "Copying build files to ${BUILD_DIR} directory" "Ended"
}

copyNmsBuildFile() {
	if [ "${IsNmsBuildFileCopyNeeded}" = "TRUE" ]; then
		cp -f ${WORK_DIR}/hg_utils/build/library_nms.xml ${BUILD_DIR}/library.xml
		cp -f ${WORK_DIR}/hg_utils/build/build_nms.xml ${BUILD_DIR}/build.xml
	fi
}

pmdReportGeneration() {
	echo "pmdReportGeneration function commented ....."
}
getTP_TipVersion() {
	logTime "Getting Thirdparty Tip Version process" "Started"
	if [ -d "${BUILD_BASE_DIR}/components" ]; then
		cd ${BUILD_BASE_DIR}/components
	else
		cd ${BUILD_BASE_DIR}
	fi
	TP_TIP_VERSION=$(hg parent | grep changeset: | cut -d " " -f4 | cut -d ":" -f1)
	TP_CHANGESET_VALUE=$(hg parent | grep changeset: | cut -d " " -f4 | cut -d ":" -f2)
	TP_CSET_LABEL=${TP_CHANGESET_VALUE} >>${WORK_DIR}/tp.log
	echo "TP_TIP=${TP_TIP_VERSION}" >>${WORK_DIR}/tp.log
	echo "TP_CHST=${TP_CHANGESET_VALUE}" >>${WORK_DIR}/tp.log
	echo "Thirdparty TIP VERSION is : ${TP_TIP_VERSION}"
	echo "Thirdparty CHANGESET VALUE is : ${TP_CHANGESET_VALUE}"
	logTime "Getting Thirdparty Tip Version process" "Ended"
}

updatetpchangeset() {
	logTime "updatetpchangeset process" "Started"
	echo $cmtp_branchname
	echo "cmtp_branchname"

	components_url=$(cat ${BUILD_DIR}/urls.html | grep "tp_components.zip")
	if [ $? -eq 0 ]; then
		components_tt_url=$(cat ${BUILD_DIR}/urls.html | grep "tp_components.zip" | cut -d "=" -f2 | grep "${cmtp_branchname}")
		components_path=$(echo $components_tt_url | sed "s@tp_components.zip<br>@logs/COMPONENTS.txt@g")
		echo $components_path
		TP_CHANGESET_VAL=$(curl -s $components_path | grep "BUILD_LABEL" | cut -d "=" -f2 | sed -e 's@"@@g')
		echo $TP_CHANGESET_VAL
		tp_branchname=$(echo $components_path | cut -d "/" -f7)
		echo "ACTUAL_TP_LBL=${tp_branchname}"
		echo "${tp_branchname}=${TP_CHANGESET_VAL}" >>${BUILD_DIR}/changeset.txt

	fi
	logTime "updatetpchangeset process" "Ended"

}

BinaryDetails() {
	logTime "BinaryDetails process" "Ended"
	BINARY_DETAILS=""
	for list in ${BINARY_LIST}; do
		echo $list
		zipdir=${OP_DIR}
		a=$(ls -t ${zipdir}/${list})
		binary_name=$(basename ${a})
		if [ $? -eq 0 ]; then
			zip_size=$(ls -lh ${a} | tr -s " " | cut -d " " -f5)
			zip_size_inByte=$(ls -lb ${a} | tr -s " " | cut -d " " -f5)
			if [ -n "${a}" ]; then
				md5sum_val=$(md5sum ${a} | cut -d " " -f1)
				current_sha256sum_val=$(sha256sum ${a} | cut -d " " -f1)
			fi
			zips_size="$zip_size ($zip_size_inByte)"
			BINARY_DETAILS="$BINARY_DETAILS,$list:$zip_size_inByte:${md5sum_val}"
			filetype=$(echo ${binary_name} | cut -d "." -f2)
			if [ $filetype = "zip" -o $filetype = "ppm" ]; then
				files1=$(unzip -l ${a} | grep "^ *[1-9][1-9]*" | tail -1 | awk '{print $2}')
				jar1=$(unzip -l ${a} | grep "**.jar$" | wc -l)
				files1=$(echo $files1 | sed 's/\s//g')
				jar1=$(echo $jar1 | sed 's/\s//g')

				BINARY_DETAILS="$BINARY_DETAILS:${files1}:${jar1}:${current_sha256sum_val}"
			else
				BINARY_DETAILS="$BINARY_DETAILS:NA:NA:${current_sha256sum_val}"

			fi

		fi
	done

	BINARY_DETAILS=$(echo ${BINARY_DETAILS} | sed -e "s/^,//g")
	echo "BINARY_DETAILS=\"${BINARY_DETAILS}\"" >>${build_info_file}
	logTime "BinaryDetails process" "Ended"
}

updateBuildDetails() {
	logTime "Build Details updation" "Started"
	DEP_CSET_VAL=""
	BUILD_LABEL=""
	BLD_URL=""
	OP_DIR=""
	if [ ! -z "${TIP_CHANGESET_CLN}" ]; then
		CHANGESET_VALUE=${TIP_CHANGESET_CLN}

	elif [ ! -z "${TIP_CHANGESET}" ]; then
		CHANGESET_VALUE=${TIP_CHANGESET}
	fi

	if [ "${BUILD_STATUS}" = 'SUCCESS' ]; then
		if [ -s "${WORK_DIR}/lyte_det.txt" ]; then

			for lyte_pkg in $(cat ${WORK_DIR}/lyte_det.txt); do
				ly_file_pkg_name=$(echo $lyte_pkg | cut -d ":" -f1)
				ly_pkg_name=$(echo $lyte_pkg | cut -d ":" -f2)
				ly_corres_pkg_name=$(echo $lyte_pkg | cut -d ":" -f3)

				lyte_npmscope_notify_mail "$ly_file_pkg_name" "$ly_pkg_name" "$ly_corres_pkg_name"

			done

		fi

		BLD_URL="${URL}/${BUILD_DLOAD_DIR}"
		OP_DIR=${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		if [ "${REPOSITORY_TYPE}" = "GIT" -o "${REPOSITORY_TYPE}" = "HG" ]; then
			BUILD_LABEL="${TIP_CHANGESET}"
		fi
	else
		BLD_URL="${ERROR_URL}"
		BUILD_LABEL="NA"
		OP_DIR=${ERROR_DLOAD_DIR}
	fi
	if [ -d "${OP_DIR}" ]; then
		OP_DLOAD_SIZE_KB=$(du -sL ${OP_DIR} | tr "\t" "@" | cut -d "@" -f1)
		OP_DLOAD_SIZE=$(expr ${OP_DLOAD_SIZE_KB} \* 1024)
	else
		OP_DLOAD_SIZE=0
	fi
	echo "BUILD_SIZE after build completion : ${OP_DLOAD_SIZE} ($OP_DIR)"
	echo "BLD_URL=\"${BLD_URL}\"" >>${build_info_file}
	echo "BUILD_DEP=\"${BUILD_DEP}\"" >>${build_info_file}
	echo "BUILD_DURATION=\"${TOTAL_BDUR}\"" >>${build_info_file}
	echo "BLD_NO=\"${WH_BUILD_ID}\"" >>${build_info_file}
	echo "BUILD_LABEL=\"${CHANGESET_VALUE}\"" >>${build_info_file}
	echo "BUILD_SIZE=\"${OP_DLOAD_SIZE}\"" >>${build_info_file}
	echo "TP_CHANGESET_VALUE=\"${TP_CSET_LABEL}\"" >>${build_info_file}
	echo "DEP_CHANGESET_VALUE=\"${DEP_CSET_VAL}\"" >>${build_info_file}
	echo "BUILD_STATUS=\"${BUILD_STATUS}\"" >>${build_info_file}
	echo "BL_SERVERS=\"$(uname -n)\"" >>${build_info_file}
	echo "BL_ENV=\"$(uname -a)\"" >>${build_info_file}
	echo "BUILD_LOCATION=\"${BUILD_LOCATION}\"" >>${build_info_file}
	echo "IMAGE_ID=\"${IMAGE_ID}\"" >>${build_info_file}
	echo "IMAGE_NAME=\"${IMAGE_NAME}\"" >>${build_info_file}
	echo "PARENT_IMAGE_ID=\"${PARENT_IMAGE_ID}\"" >>${build_info_file}
	echo "PARENT_IMAGE_NAME=\"${PARENT_IMAGE_NAME}\"" >>${build_info_file}
	echo "OP_DIR=\"${OP_DIR}\"" >>${build_info_file}

	for opts_st in $(echo $BUILD_OPTS); do
		st_dir=$(echo $opts_st | grep "static_dir")
		if [ $? -eq 0 ]; then
			st_dir_val=$st_dir
		fi
	done
	new_st_dir=$(echo $st_dir_val | cut -d "=" -f2)
	echo "NEW_STATIC_DIRNAME=\"${new_st_dir}\"" >>${build_info_file}

	if [ -f ${BUILD_DIR}/winpack_details_all.txt ]; then
		sort -u ${BUILD_DIR}/winpack_details_all.txt >${BUILD_DIR}/winpack_details.txt
		sed ':a;N;$!ba;s/\n/ /g' ${BUILD_DIR}/winpack_details.txt >${BUILD_DIR}/win_pkg_details_op.txt
		echo "#WINDOWS_PACKAGE_DETAILS=\"$(cat ${BUILD_DIR}/win_pkg_details_op.txt)\"" >>${build_info_file}
	fi

	update_dependency_server_details
	if [ "${GROUP_ID}" = "16" -o "${GROUP_ID}" = "18" -o "${GROUP_ID}" = "27" ]; then
		maxdepth_length="5"
		find_extension="*.*"
	elif [ "${GROUP_ID}" = "15" -o "${GROUP_ID}" = "20" -o "${GROUP_ID}" = "21" ]; then
		maxdepth_length="2"
		find_extension="*.zip"
	elif [ "${GROUP_ID}" = "1" ]; then
		maxdepth_length="4"
		find_extension="*.*"
	else
		maxdepth_length="2"
		find_extension="*.*"
	fi

	#if [ "${PRODUCT_NAME}" = "ZOHOBOOKS" ]
	#then
	#    cd ${BUILD_OUTPUT}
	#else
	cd ${OP_DIR}
	#fi
	BINARY_LIST=$(find . -maxdepth "${maxdepth_length}" -type f -name "${find_extension}" | sed 's/^.\///g' | grep -iEv "customer_resources/|UnitTest|javadocs|javadoc|README|buildlogs|jsp_java|\.txt|\.log|\.html|\.out|\.json|\.map|\.md5|\.pom|\.sha1|\.xml|\.sh|\.gitkeep|\.yaml|\.py|\.java" | grep -iEv "logs/|reports/|dll_logs/|exe_logs/|ResourceMetaData/|\.htaccess|\.htpasswd|\.js|\.html|\.css|\.py|\.hg|\.bat|\.vbs|\.adm|\.ps1" | tr "\n" " ")
	echo "BINARY_LIST=\"${BINARY_LIST}\"" >>${build_info_file}
	export BINARY_LIST

	cd -
	BinaryDetails
	#if [ -f "${BUILD_DIR}/changeset.txt" ]
	#then
	if [ "${SUB_PRODUCTS}" = "" ]; then
		ACTUAL_TP_LBL=$(cat ${BUILD_DIR}/changeset.txt | cut -d "=" -f1)
		TP_CHANGESET_VAL=$(cat "${BUILD_DIR}/changeset.txt" | cut -d "=" -f2 | head -n 1)
		#updatetpchangeset

		if [ "${CHANGESET_VALUES}" ]; then
			echo "SOURCE_CHANGESET_VALUE=\"${CHANGESET_VALUES},${PRODUCT_NAME}:${CHANGESET_VALUE}:${TP_CHANGESET_VAL}\"" >>${build_info_file}
		else
			echo "SOURCE_CHANGESET_VALUE=\"${PRODUCT_NAME}:${CHANGESET_VALUE}:${TP_CHANGESET_VAL}\"" >>${build_info_file}
		fi
	else
		CHANGESET_TXT_LINE_CNT=$(cat "${BUILD_DIR}/changeset.txt" | wc -l)
		if [ "${CHANGESET_TXT_LINE_CNT}" = "1" ]; then
			ACTUAL_TP_LBL=$(cat ${BUILD_DIR}/changeset.txt | cut -d "=" -f1)
			TP_CHANGESET_VAL=$(cat "${BUILD_DIR}/changeset.txt" | cut -d "=" -f2)
		else
			TP_CHANGESET_VAL=$(grep -r "${PRODUCT_NAME}" "${BUILD_DIR}/changeset.txt" | cut -d "=" -f2)
		fi
		#updatetpchangeset
		if [ "${CHANGESET_VALUES}" ]; then
			CHANGESET_VALUES="${CHANGESET_VALUES},${PRODUCT_NAME}:${CHANGESET_VALUE}:${TP_CHANGESET_VAL}"
		else
			CHANGESET_VALUES="${PRODUCT_NAME}:${CHANGESET_VALUE}:${TP_CHANGESET_VAL}"
		fi
		if [ -n "${TIP_SUB_PRODUCT_DETAILS}" ]; then
			SUB_VAL=""
			for i in $(echo ${TIP_SUB_PRODUCT_DETAILS} | tr "," " "); do
				SUB_PROD_NAME=$(echo $i | cut -d "=" -f1)
				if [ "${SUB_PROD_NAME}" != "${PRODUCT_NAME}" ]; then

					SUB_PDT_SOURCE_CHANGESET_VAL=$(echo $i | cut -d "=" -f2 | cut -d ":" -f6 | sed 's/,//g')
					SUB_PDT_BRANCH=$(echo $i | cut -d "=" -f2 | cut -d ":" -f1 | sed 's/,//g')
					SUB_VAL=$SUB_VAL$SUB_PROD_NAME:$SUB_PDT_SOURCE_CHANGESET_VAL::${SUB_PDT_BRANCH}","
				fi

			done
			SUB_VAL="$(echo ${SUB_VAL} | sed 's/,*$//g')" #To remove the tailing comma from the string...

			CHANGESET_VALUES="${CHANGESET_VALUES},${SUB_VAL}"
		else
			for sub_pdt in $(echo ${SUB_PRODUCTS} | tr "," " "); do
				if [ "${sub_pdt}" != "${PRODUCT_NAME}" ]; then
					TP_CHANGESET_VAL=$(grep -w "${sub_pdt}" "${LOGS_DIR}/consolidated_changeset_info.txt" | grep "=" | cut -d "=" -f2)
					SUB_PDT_SOURCE_CHANGESET_VAL=$(eval echo \${${sub_pdt}_CHANGESET_VAL})
					CHANGESET_VALUES="${CHANGESET_VALUES},${sub_pdt}:${SUB_PDT_SOURCE_CHANGESET_VAL}:${TP_CHANGESET_VAL}"
				fi
			done
		fi

		if [ -f "${WORK_DIR}/sub_prod_conf.txt" ]; then
			sub_prd_conf_cln=$(cat ${WORK_DIR}/sub_prod_conf.txt)
			sub_prd_conf_cln_val=$(echo $sub_prd_conf_cln | sed -e "s@SUB_CONF_TIP_CHANGESET_CLN=@@g" | sed -e "s@ @,@g" | sed -e "s@\"@@g")
			for i in $(echo $CHANGESET_VALUES | tr "," "\n"); do
				SRC_VALUE=$(echo $i | cut -d ":" -f2)
				if [ -z "$SRC_VALUE" ]; then
					PRODUCT_VAL=$(echo $i | cut -d ":" -f1)
					NEW_VALUE=$(echo $sub_prd_conf_cln_val | grep -o "$PRODUCT_VAL:\([a-z0-9]\+\)" | cut -d ":" -f2)
					NEW_BRANCH=$(echo $sub_prd_conf_cln_val | grep -o "$PRODUCT_VAL:\([a-z0-9]\+\):\([a-zA-Z0-9]*\):\([a-zA-Z0-9_]\+\)" | cut -d ":" -f4)
					if [ -n "$NEW_VALUE" ]; then
						FINAL="$FINAL,$PRODUCT_VAL:$NEW_VALUE::$NEW_BRANCH"
					else
						FINAL="$FINAL,$i"
					fi
				else
					FINAL=$FINAL,$i
				fi
			done
			CHANGESET_VALUES=$(echo $FINAL | sed -e "s@^,@@g")

		fi

		#CHANGESET_VALUES="${PRODUCT_NAME}:${CHANGESET_VALUE}:${TP_CHANGESET_VAL}"
		#for sub_pdt in `echo ${SUB_PRODUCTS} | tr "," " "`
		#do
		#    if [ "${sub_pdt}" != "${PRODUCT_NAME}" ]
		#    then
		#	TP_CHANGESET_VAL=`grep -w "${sub_pdt}" "${LOGS_DIR}/consolidated_changeset_info.txt" | grep "=" | cut -d "=" -f2`
		#	SUB_PDT_SOURCE_CHANGESET_VAL=`eval echo \\${${sub_pdt}_CHANGESET_VAL}`
		#	CHANGESET_VALUES="${CHANGESET_VALUES},${sub_pdt}:${SUB_PDT_SOURCE_CHANGESET_VAL}:${TP_CHANGESET_VAL}"
		#   fi
		#done
		echo "SOURCE_CHANGESET_VALUE=\"${CHANGESET_VALUES}\"" >>${build_info_file}
	fi
	cp -f ${BUILD_DIR}/changeset.txt ${LOGS_DIR}
	#else
	#	echo "SOURCE_CHANGESET_VALUE=\"${PRODUCT_NAME}:${CHANGESET_VALUE}:\"" >> ${build_info_file}
	#fi
	if [ "${REPOSITORY_TYPE}" = "CVS" -o -n "${TP_EXCLUDED_PRODUCTS_SEARCH}" ]; then
		compareThirdpartyLabels
	fi
	#sed -i "s@ACCESS_VALUE=\(.*\)@@g" ${build_info_file}
	sed -i "s@LYTE_AUTH_TOKEN=\(.*\)@@g" ${build_info_file}
	echo "BUILD_ENDED=\"$(date "+%Y-%m-%d %T")\"" >>${build_info_file}

	TP_BRANCH_VALUE=$(cat ${BUILD_DIR}/changeset.txt | cut -d "=" -f1)
	echo "tp_branch"
	echo ${TP_BRANCH_VALUE}
	echo "TP_BRANCH=\"${TP_BRANCH_VALUE}\"" >>${build_info_file}
	echo "BUILD_LOG_UPD_STARTED=\"$(date "+%Y-%m-%d %T")\"" >>${build_info_file}

	if [ "${GROUP_NAME}" = "INTEG" -o "${GROUP_NAME}" = "ZOHO" -o "${GROUP_NAME}" = "ZOHO_ANDROID" -o "${GROUP_NAME}" = "ZOHO_ELECTRON" -o "${GROUP_NAME}" = "ZOHO_IPHONE" -o "${GROUP_NAME}" = "ZOHO_WINDOWS" -o "${GROUP_NAME}" = "ZORRO" -o "${GROUP_NAME}" = "GOFRUGAL" -o "${GROUP_NAME}" = "FUNPROJECTS" -o "${GROUP_NAME}" = "ITS" -o "${GROUP_NAME}" = "OPENSOURCE" ]; then
		buildlog_api="http://integrepo-secondary:8081"
	elif [ "${GROUP_NAME}" = "ME" -o "${GROUP_NAME}" = "FRAMEWORK" -o "${GROUP_NAME}" = "ME_ANDROID" -o "${GROUP_NAME}" = "ME_IPHONE" -o "${GROUP_NAME}" = "THIRDPARTY" -o "${GROUP_NAME}" = "VTITAN" -o "${GROUP_NAME}" = "WEBNMS" -o "${GROUP_NAME}" = "WEBNMS_ANDROID" -o "${GROUP_NAME}" = "WEBSITE" -o "${GROUP_NAME}" = "PROJECTS" -o "${GROUP_NAME}" = "SD" -o "${GROUP_NAME}" = "SWISSSQL" -o "${GROUP_NAME}" = "TESTAUTOMATION" -o "${GROUP_NAME}" = "TP_PKG" ]; then
		buildlog_api="http://integ-hm16.zohocorp.com:8094"
	else
		buildlog_api="https://cmtools-api.csez.zohocorpin.com/"
	fi
	logTime "Cmtool DB build updation process" "Started"
	CMTOOLS_DB_UPDATION_LOG="PRIVATE-TOKEN: XXXXXXX --data build_id=${WH_BUILD_ID}&dload_path=${build_info_file}&process=build ${buildlog_api}/api/v1/buildlog_update | grep -e 'Status: 200' -e 'Status: 201'"

	cmtoolsapi_val1=$(curl -k -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data "build_id=${WH_BUILD_ID}&dload_path=${build_info_file}&process=build" "${buildlog_api}/api/v1/buildlog_update")
	echo $cmtoolsapi_val1
	echo "cmtoolsapi value1"
	#if echo "$cmtoolsapi_val1" | grep "{}"
	if [ "$cmtoolsapi_val1" = "false" ]; then
		logTime "Cmtools Build updation Retry-1 process" "Started"
		buildlog_api_val1=${buildlog_api}
		buildlog_api="https://cmtools-api.csez.zohocorpin.com/"
		cmtoolsapi_val2=$(curl -k -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data "build_id=${WH_BUILD_ID}&dload_path=${build_info_file}&process=build" "${buildlog_api}/api/v1/buildlog_update")
		echo $cmtoolsapi_val2
		echo "cmtoolsapi value2"
		#if echo "$cmtoolsapi_val2" | grep {}
		if [ "$cmtoolsapi_val2" = "false" ]; then

			logTime "Cmtools Build updation Retry-2 process" "Started"
			buildlog_api_val1=${buildlog_api}
			buildlog_api="http://cmtools-slave"
			cmtoolsapi_val3=$(curl -k -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --data "build_id=${WH_BUILD_ID}&dload_path=${build_info_file}&process=build" "${buildlog_api}/api/v1/buildlog_update")
			echo $cmtoolsapi_val3
			echo "cmtoolsapi value3"

			if [ "$cmtoolsapi_val3" = "false" ]; then

				echo "Mail notification added for retry failure cases."

				mail -r "integration-team@zohocorp.com" -s "Build updation failed in configtool buildlog_update API .." <<-EOF
					                         Dear Team,

										There are some problem in updateing build via cmtools api.

										Cmtools buildlog API1 : ${buildlog_api_val1}

										Cmtools buildlog Retry API2 : ${buildlog_api}

					                                 Build Id : ${WH_BUILD_ID}

					                                 Thanks & Regards,
					                         Integration Team
				EOF
			fi

		fi
		logTime "Cmtools Build updation Retry process" "Ended"

	fi

	echo "curl -i -X POST -H 10 ${CMTOOLS_DB_UPDATION_LOG}"
	logTime "Cmtool DB build updation process" "Ended."

	#if [ "${GROUP_ID}" = "5" -a "${BUILD_STATUS}" = "SUCCESS" ]
	#then
	#	TEMP_DLOAD_LOCATION=`echo ${OP_DIR} | sed -e 's@/zoho/build/downloads/@@g'`
	#	ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa build@integ-cm1 mkdir -p "downloads_backup/${TEMP_DLOAD_LOCATION}"
	#	scp -o StrictHostKeyChecking=no -pr -i ${HOME}/downloads/ssh/id_rsa ${OP_DIR}/**  build@integ-cm1:downloads_backup/${TEMP_DLOAD_LOCATION}/
	#fi
	macpas_check=$(grep -r "_macpkg_passwd" ${BUILD_DIR}/ant.properties | grep -v "#")
	if [ "${macpas_check}" != "" ]; then
		machost_check=$(grep -r "_macpkg_host" ${BUILD_DIR}/ant.properties | grep -v "#")
		rsh -l httpd ${HG_DB_HOST} sh /home/httpd/macpkg_build.sh "${PRODUCT_NAME}" "${ARG}" "${machost_check}" "${macpas_check}"
	fi
	fontCheck ${WORK_DIR}/Font_postBuild.txt >>${LOGS_DIR}/fontCheck.log 2>&1
	clientside_framework >>${LOGS_DIR}/clientside_framework.log 2>&1
	echo "BUILD_LOG_UPD_ENDED=\"$(date "+%Y-%m-%d %T")\"" >>${build_info_file}
	logTime "Build Details updation" "Ended"
}

update_dependency_server_details() {
	logTime "dependency_server_details updation" "Started"

	if [ -f "${BUILD_DIR}/dependency_server_name.txt" ]; then
		deps_servers=""
		sort_server=$(sort -u ${BUILD_DIR}/dependency_server_name.txt)
		for dep_server in $sort_server; do
			deps_servers="$dep_server $deps_servers"
		done

		echo "DEPENDENCY_SERVER_DETAILS=\"${deps_servers}\"" >>${build_info_file}
	else
		echo "DEPENDENCY_SERVER_DETAILS=\"NA\"" >>${build_info_file}
	fi
	logTime "dependency_server_details updation" "Ended"
}

updateBuildLogDetails() {
	CONFIGTOOL_PATH="${HOME}/REPOSITORY/configtool/"
	PRDBLDSH_PATH="$CONFIGTOOL_PATH/lib/"
	logtime "Updating the build details in ConfigTool" "Started"
	if [ -d $PRDBLDSH_PATH ]; then
		cd ${CONFIGTOOL_PATH}
		git pull
		if [ $? -ne 0 ]; then
			mail -r "integration-team@zohocorp.com" -s "Pull process failed in configtool to proceed the build log update process" "ERROR_NOTIFY_MAIL_ID" <<-EOF
				Dear Team,

					There are some problem in pulling the latest changes of ConfigTool repository in $(hostname) machine. So, latest changes will not be applied here.

					Build Id : ${WH_BUILD_ID}

				Thanks & Regards,
				Integration Team
			EOF
		fi
	else
		cd ${HOME}/REPOSITORY
		git clone --single-branch -b buildlog_update https://${GIT_CLONE_USERNAME}:${GIT_CLONE_TOKEN}@git.csez.zohocorpin.com/cm/configtool.git
	fi
	echo "BUILD_LOG_UPD_STARTED=\"$(date "+%Y-%m-%d %T")\"" >>${build_info_file}
	cp -fv ${build_info_file} ${HOME}/Build_Info/${PRODUCT_NAME}_${WH_BUILD_ID}.txt
	if [ $? -ne 0 ]; then
		echo "Unable to copy the file ${build_info_file} under ${HOME}/Build_Info/ in $(hostname) .. "
		mail -r "integration-team@zohocorp.com" -s "Unable to copy the file ${build_info_file} under ${HOME}/Build_Info/ in $(hostname) for ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID}" </dev/null
	fi
	echo "BUILD_LOG_UPD_ENDED=\"$(date "+%Y-%m-%d %T")\"" >>${build_info_file}
	logTime "Build Details updation" "Ended"
}
updateBuildErrorStatus() {
	local BUILD_STATUS="${1}"
	echo "BUILD_STATUS=\"${BUILD_STATUS}\"" >>${build_info_file}
	python ${WORK_DIR}/hg_utils/build/buildlog_update.py "${build_info_file}"
	if [ $? -ne 0 ]; then
		mail -r "integration-team@zohocorp.com" -s "Problem in updating the status of Build ID : ${WH_BUILD_ID} for ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID}" <<-EOF
			Dear Team,

			There are some problem in updating the build status in CMTools database for ${PRODUCT_NAME}

			Build ID : ${WH_BUILD_ID}
			Status : ${BUILD_STATUS}

			Thanks & Regards,
			Integration Team
		EOF
	fi
}

hm3build_Sync() {
	if [ "${BUILD_STATUS}" != "FAILURE" ]; then
		HM3_URL=$(echo $DOWNLOAD_URL | grep -E "zoho-build3|integ-ci")
		if [ ! -z ${HM3_URL} ]; then
			ssh -l build integ-hm3 mkdir -p ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
			scp -p -r ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/** build@integ-hm3:${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		fi
	else
		HM3_URL=$(echo $DOWNLOAD_URL | grep -E "zoho-build3|integ-ci")
		if [ ! -z ${HM3_URL} ]; then
			ssh -l build integ-hm3 mkdir -p ${ERROR_DLOAD_DIR}
			scp -p -r ${ERROR_DLOAD_DIR}/** build@integ-hm3:${ERROR_DLOAD_DIR}/
		fi
	fi
}

integ_storage_Sync() {
	process_type=$1
	if [ -f "${BUILD_OUTPUT}/ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/ROOT.war
	fi
	if [ -f "${BUILD_OUTPUT}/Charm_ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/Charm_ROOT.war
	fi
	if [ -f "${BUILD_OUTPUT}/ehr_ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/ehr_ROOT.war
	fi

	if [ "${PRODUCT_NAME}" != "SASLITE" -a "${PRODUCT_NAME}" != "GAC" -a "${PRODUCT_NAME}" != "DC_CLOUD" ]; then
		if [ -f "${BUILD_OUTPUT}/grid.war" ]; then
			rm -f ${BUILD_OUTPUT}/grid.war
		fi
	fi

	if [ "${BUILD_STATUS}" != "FAILURE" ]; then
		TEMP_DLOAD_DIR=$(echo ${DLOAD_DIR} | sed -e "s@^/zoho/@/data1/@g")
		if [ "${process_type}" = "pre" ]; then
			mkdir -p ${BUILD_DIR}/TEMP_BKP
			cp -r ${BUILD_DIR}/java_jsp_source.zip ${BUILD_DIR}/TEMP_BKP/java_jsp_source.zip
			cp -r ${BUILD_DIR}/js_source.zip ${BUILD_DIR}/TEMP_BKP/js_source.zip
			cp -r ${BUILD_DIR}/java_jsp_source_post.zip ${BUILD_DIR}/TEMP_BKP/java_jsp_source_post.zip
			cp -r ${BUILD_OUTPUT}/** ${BUILD_DIR}/TEMP_BKP/
			cp -r ${WORK_DIR}/logs ${BUILD_DIR}/TEMP_BKP/
			cp -r ${BUILD_DIR}/buildlogs ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${BUILD_DIR}/build.log ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${BUILD_DIR}/post_build.log ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${BUILD_DIR}/combine.js ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${BUILD_DIR}/lyte_docker_creation.log ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${CONF_FILE} ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${BUILD_DIR}/README.html ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${EVAL_REPORT_FILE} ${BUILD_DIR}/TEMP_BKP/
			cp -r ${WORK_DIR}/logs ${BUILD_DIR}/TEMP_BKP/

			#ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -l build integ-storage mkdir -p ${TEMP_DLOAD_DIR}/${BUILD_DLOAD_DIR}
			#scp -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -pr ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/** build@integ-storage:${TEMP_DLOAD_DIR}/${BUILD_DLOAD_DIR}
			#scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_BKP/** build@integ-storage:${TEMP_DLOAD_DIR}/${BUILD_DLOAD_DIR}/

		else

			cp -r ${WORK_DIR}/logs ${BUILD_DIR}/TEMP_BKP
			cp -r ${build_info_file} ${BUILD_DIR}/TEMP_BKP/logs
			cp -r ${LOGS_DIR} ${BUILD_DIR}/TEMP_BKP/
			cp -r ${HOME}/Docker_Metrics/${PRODUCT_NAME}_${WH_BUILD_ID}.log ${BUILD_DIR}/TEMP_BKP/logs/docker_metrics.log
			cp -r ${BUILD_OUTPUT}/exe_logs ${BUILD_DIR}/TEMP_BKP
			cp -r ${BUILD_OUTPUT}/dll_logs ${BUILD_DIR}/TEMP_BKP
			cp -r ${CRON_LOG_CP} ${BUILD_DIR}/TEMP_BKP
			scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_BKP/** build@integ-storage:${TEMP_DLOAD_DIR}/${BUILD_DLOAD_DIR}/

		fi
	else
		TEMP_ERROR_DLOAD_DIR=$(echo ${ERROR_DLOAD_DIR} | sed -e "s@^/zoho/@/data1/@g")
		if [ "${process_type}" = "pre" ]; then
			mkdir -p ${BUILD_DIR}/TEMP_ERR_BKP
			cp -r ${WORK_DIR}/logs/** ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${BUILD_OUTPUT}/** ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${BUILD_DIR}/build.log ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/buildlogs ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			#ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -l build integ-storage mkdir -p ${TEMP_ERROR_DLOAD_DIR}
			#scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_ERR_BKP/** build@integ-storage:${TEMP_ERROR_DLOAD_DIR}/
		#scp -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -pr ${ERROR_DLOAD_DIR}/** build@integ-storage:${TEMP_ERROR_DLOAD_DIR}

		else
			cp -r ${BUILD_DIR}/post_build.log ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/combine.js ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/lyte_docker_creation.log ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${CONF_FILE} ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/README.html ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${EVAL_REPORT_FILE} ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${WORK_DIR}/logs/** ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${CRON_LOG_CP} ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			#scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_ERR_BKP/** build@integ-storage:${TEMP_ERROR_DLOAD_DIR}/

		fi

	fi
}

windowpkgDetails() {
	#l=/zoho/build/WH_DIR/Oct_19_2020/PMPAGENT/PMPAGENT_3511072/PMPAGENT_DBUILD/build/unzipsrc/
	windirpath=${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/unzipsrc
	mkdir ${windirpath}/onlybat
	cd ${windirpath}
	cp -r *.bat ${windirpath}/onlybat
	cd -
	cd ${windirpath}/onlybat
	touch ${WORK_DIR}/win_pack_all.txt
	grep -Ri "c*Program Files*" . >${WORK_DIR}/win_pack_all.txt
	sort ${WORK_DIR}/win_pack_all.txt >${WORK_DIR}/logs/win_pack.txt
	cd -
}

updateOS() {
	os5_file_txt=${HOME}/centos5.txt
	os6_file_txt=${HOME}/centos6.txt

	if [ ! -f "${HOME}/centos5.txt" ]; then
		touch ${HOME}/centos5.txt
	elif [ ! -f "${HOME}/centos6.txt" ]; then
		touch ${HOME}/centos6.txt
	fi

	if [ -f "${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/OS_details_5.txt" ]; then
		echo "PRODUCT_NAME=${PRODUCT_NAME}--->Branch_NAME=${ARG}" >>${os5_file_txt}
	elif [ -f "${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/OS_details_6.txt" ]; then
		echo "PRODUCT_NAME=${PRODUCT_NAME}--->Branch_NAME=${ARG}" >>${os6_file_txt}
	fi
}

calculateDiffBtwChangesets() {
	echo "calculateDiffBtwChangesets started at : " $(date "+%Y-%m-%d %T")
	if [ -n "${PREV_SRC_CHANGESET}" ]; then
		API="${cmtools_domain_name}/api/v1/repo/get_repo_diff/"
		PARAMS="?product_id=${PRODUCT_ID}&revision1=${CHANGESET_VALUE}&revision2=${PREV_DBUILD_LBL}&repo_type=${REPOSITORY_TYPE}"
		echo "${API}"
		echo "${API}?product_id=${PRODUCT_ID}&revision1=${CHANGESET_VALUE}&revision2=${PREV_DBUILD_LBL}&repo_type=${REPOSITORY_TYPE}"
		curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${API}${PARAMS}" >${LOGS_DIR}/temp.json
		cat ${LOGS_DIR}/temp.json | /zoho/build/downloads/json_formatter.sh >${OUTPUT_DLOAD_DIR}/logs/changeset_diff.json
		rm -fv ${LOGS_DIR}/temp.json
	else
		echo "Previous Build Changeset is empty( It may be you're generating the build on a branch at very first time). So, changeset diff not generated\n" >${OUTPUT_DLOAD_DIR}/logs/changeset_diff.json
	fi
	echo "calculateDiffBtwChangesets ended at : " $(date "+%Y-%m-%d %T")
}

xml_to_html_creation() {
	if [ "${BUILD_STATUS}" != "FAILURE" ]; then
		cd ${BUILD_DIR}/
		python ${BUILD_DIR}/build_time_xml_to_html.py
		cd -
		echo "sleep started at : " $(date "+%Y-%m-%d %T")
		if [ ! -f ${BUILD_DIR}/buildlogs/buildtime.html ]; then
			sleep 1m
		fi
		echo "sleep ended at : " $(date "+%Y-%m-%d %T")
		cp -rf ${BUILD_DIR}/buildlogs ${OUTPUT_DLOAD_DIR}/logs/
	fi

}

callBuildPasswordprotected() {
	echo "Inside CallBuildPasswordProtected Method"
	echo "PasswordProtect Process Started at $(date "+%Y-%m-%d %T")"
	api="${cmtools_domain_name}/api/v1/lock_or_protect_builds"
	params="product_id=${PRODUCT_ID}&buildlog_id=${WH_BUILD_ID}&action=Protect"
	curl -k -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" -H "Username: ${WH_BUILD_ID}" -H "Password: ${1}" ${api}?${params}
	echo "PasswordProtect Process Ended at $(date "+%Y-%m-%d %T")"
}

get_android_dep_urls() {
	echo "Find android dependency URL started at: " $(date "+%Y-%m-%d %T")
	android_bld_log_file_path=$1
	if [ -f ${android_bld_log_file_path} ]; then
		cat ${android_bld_log_file_path} | grep "Downloading" | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep "\/\/build.zohocorp.com" | grep -v ".module" >>${BUILD_DIR}/android_urls.html
		if [ $? -eq 0 ]; then
			count_aurl=0
			for aurl in $(cat ${BUILD_DIR}/android_urls.html); do
				count_aurl=$(expr ${count_aurl} + 1)
				echo "${count_aurl}=${aurl}" >>${BUILD_DIR}/buildlogs/urls.html
			done
			echo "Android dependency URLS copied into urls.html .."
		else
			echo "Internal dependency URLS not used in this Android Project.."
		fi
	else
		echo "${android_bld_log_file_path} file not available to get android dependency urls.."
	fi
	echo "Find android dependency URL ended at: " $(date "+%Y-%m-%d %T")
}

build_output_Sync() {
	copy_ceph_servers="integ-hm1,integ-hm2,integ-hm5"
	process_type=$1
	echo "build_output_Sync started at: " $(date "+%Y-%m-%d %T")

	if [ "${BUILD_STATUS}" != "FAILURE" ]; then

		if [ "${process_type}" = "pre" ]; then
			mkdir -p ${BUILD_DIR}/TEMP_BKP
			cp -r ${BUILD_DIR}/java_jsp_source.zip ${BUILD_DIR}/TEMP_BKP/java_jsp_source.zip
			cp -r ${BUILD_DIR}/js_source.zip ${BUILD_DIR}/TEMP_BKP/js_source.zip
			cp -r ${BUILD_DIR}/java_jsp_source_post.zip ${BUILD_DIR}/TEMP_BKP/java_jsp_source_post.zip
			cp -r ${BUILD_OUTPUT}/** ${BUILD_DIR}/TEMP_BKP/
			cp -r ${WORK_DIR}/logs ${BUILD_DIR}/TEMP_BKP/
			cp -r ${BUILD_DIR}/{buildlogs,build.log,post_build.log,pre_build.log,combine.js,lyte_docker_creation.log} ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${CONF_FILE} ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${BUILD_DIR}/README.html ${BUILD_DIR}/TEMP_BKP/logs/
			cp -r ${EVAL_REPORT_FILE} ${BUILD_DIR}/TEMP_BKP/
			cp -r ${WORK_DIR}/logs ${BUILD_DIR}/TEMP_BKP/

			for ceph_server_mac in $(echo $copy_ceph_servers | tr "," " "); do

				ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -l build ${ceph_server_mac} mkdir -p ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
				scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_BKP/** build@${ceph_server_mac}:${DLOAD_DIR}/${BUILD_DLOAD_DIR}/
				SCP_EXISTS=$(echo $?)
				if [ ${SCP_EXISTS} -eq 0 ]; then
					break
					else:
					continue
				fi
			done

		else

			cp -r ${WORK_DIR}/logs ${BUILD_DIR}/TEMP_BKP
			cp -r ${build_info_file} ${BUILD_DIR}/TEMP_BKP/logs
			cp -r ${LOGS_DIR} ${BUILD_DIR}/TEMP_BKP/
			cp -r ${HOME}/Docker_Metrics/${PRODUCT_NAME}_${WH_BUILD_ID}.log ${BUILD_DIR}/TEMP_BKP/logs/docker_metrics.log
			cp -r ${BUILD_OUTPUT}/exe_logs ${BUILD_DIR}/TEMP_BKP
			cp -r ${BUILD_OUTPUT}/dll_logs ${BUILD_DIR}/TEMP_BKP
			cp -r ${CRON_LOG_CP} ${BUILD_DIR}/TEMP_BKP

			scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_BKP/** build@${ceph_server_mac}:${DLOAD_DIR}/${BUILD_DLOAD_DIR}/

		fi
	else

		if [ "${process_type}" = "pre" ]; then
			mkdir -p ${BUILD_DIR}/TEMP_ERR_BKP
			cp -r ${WORK_DIR}/logs/** ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${BUILD_OUTPUT}/** ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${BUILD_DIR}/build.log ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/buildlogs ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			for ceph_server_mac in $(echo $copy_ceph_servers | tr "," " "); do
				ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -l build ${ceph_server_mac} mkdir -p ${ERROR_DLOAD_DIR}
				scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_ERR_BKP/** build@${ceph_server_mac}:${ERROR_DLOAD_DIR}/
				SCP_EXISTS=$(echo $?)
				if [ ${SCP_EXISTS} -eq 0 ]; then
					break
					else:
					continue
				fi
			done

		else
			cp -r ${BUILD_DIR}/post_build.log ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/combine.js ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/lyte_docker_creation.log ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${CONF_FILE} ${BUILD_DIR}/TEMP_ERR_BKP/logs/
			cp -r ${BUILD_DIR}/README.html ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${EVAL_REPORT_FILE} ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${WORK_DIR}/logs/** ${BUILD_DIR}/TEMP_ERR_BKP/
			cp -r ${CRON_LOG_CP} ${BUILD_DIR}/TEMP_ERR_BKP/logs/

			scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${BUILD_DIR}/TEMP_ERR_BKP/** build@${ceph_server_mac}:${ERROR_DLOAD_DIR}/

		fi

	fi
	echo "build_output_Sync ended at: " $(date "+%Y-%m-%d %T")
}
build_information() {
	time_val=$(cat ${build_info_file} | grep "BUILD_DURATION" | cut -d "=" -f2)
	echo "info~${BUILDBY}~${ARG}~${BUILD_STARTED}~${TEAM_SPECIFIC_INFO}~${time_val}"

}

postbuild() {
	logTime "Post Build process" "Started"
	##sed -i 's@ACCESS_VALUE=\(.*\)@ACCESS_VALUE=\"\"@g' ${build_info_file}

	if [ "${IS_ANDROID_BUILD}" = "YES" ]; then
		get_android_dep_urls "${BUILD_DIR}/build.log"
	fi

	#getTP_TipVersion
	resolveDependencyBuilds
	updateBuildDetails
	if [ -d "${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/unzipsrc/" ]; then
		windowpkgDetails
	fi
	###updateOS
	#fontCheck ${HOME}/Font_postBuild.txt
	##fontCheck ${WORK_DIR}/Font_postBuild.txt

	CMURL="${cmtools_domain_name}/#/products/${PRODUCT_ID}/logs/${WH_BUILD_ID}"
	if [ "${BUILD_STATUS}" = "FAILURE" ]; then
		sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${build_info_file}
		sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${build_info_file}
		sed -i 's@ACCESS_VALUE=\(.*\)@ACCESS_VALUE=\"\"@g' ${build_info_file}

		OUTPUT_DLOAD_DIR=${ERROR_DLOAD_DIR}
		if [ "${HOSTNAME}" != "integ-hm3" ]; then
			hm3build_Sync
		fi
		#integ_storage_Sync "post" &
		if [ ! -d "/zoho/build/downloads/dload/" ]; then
			build_output_Sync "post"
		fi
		if [ "${WEBHOOK_URL_NEEDED_FOR_FAILURE}" = "YES" ]; then
			CustomWebURLCall
		fi

	else
		OUTPUT_DLOAD_DIR=${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		time_cal "Report_Generation" ${RSTART} ${REND}
		checkRandomErrors
		if [ "${REPORT_NEEDED}" = "true" ]; then
			successmail
		fi
		if [ "${HOSTNAME}" != "integ-hm3" ]; then
			hm3build_Sync
		fi

		if [ ! -d "/zoho/build/downloads/dload/" ]; then
			build_output_Sync "post"
		fi

		#if [ "${GROUP_NAME}" != "ME" ]
		#then
		#   integ_storage_Sync "post" &
		#fi
		if [ -f ${BUILD_DIR}/ant.properties -a -f ${BUILD_DIR}/alltaskname.txt ]; then
			echo "Find ant duplication task invocation started at: " $(date "+%Y-%m-%d %T")
			mkdir -p ${OUTPUT_DLOAD_DIR}/reports
			find_duplicate_ant_invocation_task ${BUILD_DIR}/alltaskname.txt ${BUILD_DIR}/ant.properties ${OUTPUT_DLOAD_DIR}/reports
			echo "Find ant duplication task invocation Ended at: " $(date "+%Y-%m-%d %T")
		fi
		runTestCase
		post_buildURL
		zohoUpgrade
		CustomWebURLCall
		if [ "${AUTO_DAILYBUILD_UPGRADE}" = "YES" ]; then
			if [ "${BUILD}" = "CRON" -o "${PRODUCT_NAME}" = "ZOHOSHOW" -o "${PRODUCT_NAME}" = "SHOWSERVER" ]; then
				zohoUpgrade_Auth >>${LOGS_DIR}/sd_trigger.log 2>&1
			fi
		fi
		callSecreport >>${LOGS_DIR}/hacksaw_trigger.log
		callSdApihook
		if [ "${GROUP_ID}" = "1" ]; then
			callMESecreport
		fi
		sanityRegressionreport
	fi
	build_information >>${LOGS_DIR}/build_information.txt
    if [ -f "$JARNAME_TXT" ]
    then
        awk -F/ '{print $NF}' $JARNAME_TXT | sort -u >> ${LOGS_DIR}/runtime_jarname.txt

    fi

	cp -f ${build_info_file} ${LOGS_DIR}
	cp -f ${HOME}/Docker_Metrics/${PRODUCT_NAME}_${WH_BUILD_ID}.log ${LOGS_DIR}/docker_metrics.log
	cp -rf ${LOGS_DIR} ${OUTPUT_DLOAD_DIR}
	cp -rf ${BUILD_OUTPUT}/exe_logs ${OP_DIR}
	cp -rf ${BUILD_OUTPUT}/dll_logs ${OP_DIR}
	cp -rf ${BUILD_DIR}/buildlogs ${OUTPUT_DLOAD_DIR}/logs/
	echo "xmltohtml_py script started at : " $(date "+%Y-%m-%d %T")
	xml_to_html_creation >/dev/null &
	echo "xmltohtml_py script ended at : " $(date "+%Y-%m-%d %T")
	if [ -d "${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/dependencies/integ_file_transfer/logs/" ]; then
		mkdir -p ${OP_DIR}/logs/CrossPlatform_logs/App-Logs/
		cp -rf ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/dependencies/integ_file_transfer/logs/** ${OP_DIR}/logs/CrossPlatform_logs/App-Logs/
	fi

	calculateDiffBtwChangesets
	if [ "${HOSTNAME}" != "integ-hm3" ]; then
		hm3build_Sync
	fi
	#if [ "${BUILD_STATUS}" != "FAILURE" -a "${GROUP_NAME}" != "ME" ]
	#then
	#    integ_storage_Sync "post" &
	#fi
	if [ "${BUILD_BASE_DIR}" != "/zoho/build/downloads" -a "${BUILD_BASE_DIR}" != "/zoho/build/WH_DIR/" -a "${BUILD_BASE_DIR}" != "${PRODUCT_NAME}_DBUILD" -a "${BUILD_BASE_DIR}" != " " ]; then

		if [ "${BUILD_STATUS}" = "SUCCESS" -a ${copy_op_status} -eq 0 ]; then
			echo "INFO :: Build_Base_Directory gonna remove to avoid the disk space issue."
			rm -rf ${BUILD_BASE_DIR} &
		fi
	fi
	if [ ! -z "${CHMOD_VALUE}" ]; then
		if [ "${CHMOD_VALUE}" = "TRUE" ]; then
			chmod -R 755 ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		fi
	fi
	RSTART=$(date +%b_%d_%Y@%T)
	echo "postbuildteamspecific started at : " $(date "+%Y-%m-%d %T")
	postbuildteamspecific
	echo "postbuildteamspecific ended at : " $(date "+%Y-%m-%d %T")
	verifyUpdateManagerCheckSum &

	rm -rf ${WORK_DIR}/hg_utils.zip &
	rm -rf ${WORK_DIR}/COMP_SRC &
	rm -rf ${WORK_DIR}/SRC/** &

	if [ -d "${WORK_DIR}/${MODULE_NAME}" ]; then
		if [ ${PRODUCT_NAME} != "HG_UTILS" ]; then
			rm -rf ${WORK_DIR}/${MODULE_NAME} &
			echo "Repository dir removal has been done in Work_dir"
		fi
	fi

	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		if [ -d "${WORK_DIR}/${MODULE_NAME}" ]; then
			rm -rf ${WORK_DIR}/${MODULE_NAME} &
			echo "Repository dir removal has been done in Work_dir"

		fi
	fi

	if [ "${label_flag}" != "FAILED" -a "${BUILD_STATUS}" != "FAILURE" -a "${PRODUCT_NAME}" != "COMPONENTS" ]; then
		echo "reportGeneration started at : " $(date "+%Y-%m-%d %T")
		reportGeneration >${OUTPUT_DLOAD_DIR}/logs/genreports.log 2>&1
		echo "reportGeneration ended at : " $(date "+%Y-%m-%d %T")
	fi
	if [ ${PRODUCT_NAME} = "DESKTOPCENTRAL" ]; then
		perl -w -e "s@^SERVER_NAME=.*@SERVER_NAME=\"me-build\"@g" -p -i ${build_info_file}
		SERVER_NAME="me-build"
		export SERVER_NAME
	fi
	if [ "${label_flag}" != "FAILED" -a "${BUILD_STATUS}" != "FAILURE" ]; then
		#echo "anti virus scan started"
		#antiVirusScan &
		#echo "anti virus scan ended"
		echo "Cynet AV has been installed in all linux servers so clamscan has been commented.."
	fi
	REND=$(date +%b_%d_%Y@%T)
	logTime "Post Build process" "Ended"
	echo "BUILD IS COMPLETED PLEASE CHECK YOUR MAIL.............." >>${STATUS_LOG}
	if [ "${BUILD_STATUS}" = "SUCCESS" ]; then
		moveBuild
		chatConnectPost
	else
		if [ "${ARG}" != "SASLITE_M21_277_CITEST_BRANCH" ]; then
			if [ "${BUILD}" = "CI" -a "${BUILD_MOVE_BRANCH}" != "" -a "${PRODUCT_NAME}" = "SASLITE" ]; then

				cd ${SOURCE_BASE_DIR}
				hg revert -r${PREV_SRC_CHANGESET} product_package/blog/readme.txt
				hg ci -m "${BUILD_CHANGESET} changes reverted" product_package/blog/readme.txt -u build
				hg push -b ${ARG}
				if [ $? -ne 0 ]; then
					mail -r "integration-team@zohocorp.com" -s "Error while reverting readme.txt for SASLITE" "integration-team@zohocorp.com" <<-EOF
						                                Build Url : ${CMURL}
					EOF
				fi

			fi
		fi
	fi

	CRON_LOG_CP="${WORK_DIR}/logs/cron_$(echo "${PRODUCT_NAME}" | tr '[:upper:]' '[:lower:]').log"
	sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@ACCESS_VALUE=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/sub_src_checkout.log
	sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/checkout.log

	cp -rf ${CRON_LOG_CP} ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/

        checkIDCChangesMerged

}

checkIDCChangesMerged()
{
        if [ -n "$CHECKIDC_CHANGESET" -a $CHECKIDC_CHANGESET = "YES" ]
        then
	      if [ -n "${BUILD_TO_COMPARE}" ]
              then
                  SD_IDC_URL=`echo $BUILD_TO_COMPARE | sed 's/\\\//g' | sed 's/\/[^\/]*$//g'`
              else
                  SD_API_URL="https://sdtools.csez.zohocorpin.com/api/latestBuilds?authtoken=${SD_API_TOKEN}&product_name=${SD_PRODUCT_NAME}"
                  EXEC_URL=`curl -X GET $SD_API_URL | cut -d ":" -f2- | sed 's@"@@g' | sed 's@}@@'`
                  SD_IDC_URL=`echo $EXEC_URL | sed 's/\\\//g' | sed 's/\/[^\/]*$//g'`
	      fi

              IDC_BLD_SRC_CHANGESET=`curl -X GET -H "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "https://cmtools-api.csez.zohocorpin.com/api/v1/buildlogs?url=${SD_IDC_URL}"  | jq '.buildlogs[].build_label' | sed 's/"//g'`
              mkdir -p ${WORK_DIR}/IDC_DIFF_CHECK
              cd ${WORK_DIR}/IDC_DIFF_CHECK
              ZREPO_CHECK=`echo $CLONE_VALUE | grep "repository.zoho"`

              if [ ${REPOSITORY_TYPE} = "HG" ]
              then
                      if [ -n "${ZREPO_CHECK}" ]
                      then
                              REP_PATH=`echo $CLONE_VALUE |  sed -e 's/repository.zoho.com/zrepository.zoho.com/g'`
                              hg clone $REP_PATH
                      else
                              hg clone $CLONE_VALUE
                      fi

                      CHANGESET_EVAL=`eval echo \\${IDC_BLD_SRC_CHANGESET}`
                      LOG_VAL="descendants($CHANGESET_EVAL)"

                      cd $MODULE_NAME
                      IDC_CHANGE_EXISTS=`hg log -b ${ARG} -r$LOG_VAL`
              elif [ ${REPOSITORY_TYPE} = "GIT" ]
              then
                      if [ -n "${ZREPO_CHECK}" ]
                      then
                              REP_PATH=`echo $CLONE_VALUE |  sed -e 's/repository.zoho.com/zrepository.zoho.com/g'`
                              git clone $REP_PATH
                      else
                              git clone $CLONE_VALUE
                      fi

                      cd $MODULE_NAME
                      IDC_CHANGE_EXISTS=`git branch --contains $IDC_BLD_SRC_CHANGESET | grep -w "${ARG}"`
              fi

              if [ -n "${IDC_CHANGE_EXISTS}" ]
              then
                     echo "IDC Build updated Changeset available in the Branch ${ARG}"
              else
                      if [ ${REPOSITORY_TYPE} = "HG" ]
                     then
                             if [ -n "${ZREPO_CHECK}" ]
                             then
                                     COMMIT_URL="$CLONE_VALUE#/commit/${IDC_BLD_SRC_CHANGESET}"
                             else
                                     COMMIT_URL="$CLONE_VALUE/rev/${IDC_BLD_SRC_CHANGESET}"
                             fi
                             elif [ ${REPOSITORY_TYPE} = "GIT"]
                     then
                             if [ -n "${ZREPO_CHECK}" ]
                             then
                                     COMMIT_URL="$CLONE_VALUE#/commit/${IDC_BLD_SRC_CHANGESET}"
                             else
                                     COMMIT_URL="$CLONE_VALUE/-/commit/${IDC_BLD_SRC_CHANGESET}"
                             fi
                     fi

                     echo "IDC Build updated Changeset not available in the Branch ${ARG}"
                     mail -r "integration-team@zohocorp.com" -s "IDC Updated changes Not synced" ${IDC_CHANGES_NOTIFYEMAIL} <<-EOF
                     Dear Team,

                               IDC updated build's changes were not merged with ${ARG} branch build.

                               IDC updated build : ${SD_IDC_URL}

                               IDC updated build's Changeset : $COMMIT_URL
EOF
              fi
              cd ${WORK_DIR}
        fi
}

getCheckSumForUpdateManager() {
	update_manager_static_file="/zoho/build/downloads/static_reference/update_manager/UpdateManagerInstaller_checksum.txt"
	update_manager_home="/zoho/build/downloads/dload/framework/update_manager"

	cd ${update_manager_home}

	zip_path=$(grep 'AdventNetUpdateManagerInstaller.jar' $(find -iname "AdventNetSPCreation*.zip") | cut -d " " -f3 | sed 's/^.\///')
	cnt=0
	for zpath in $zip_path; do
		if [ -f ${update_manager_home}/$zpath ]; then
			jar_parent_dir=$(echo "$zpath" | rev | cut -d "/" -f2- | rev)
			md5sum_of_jar=$(unzip -p $zpath **/AdventNetUpdateManagerInstaller.jar | md5sum | cut -d " " -f1)
			if [ $? -eq 0 -a $cnt -eq 0 ]; then
				echo "$jar_parent_dir:$md5sum_of_jar" >${update_manager_static_file}
				cnt=$(expr $cnt + 1)
			else
				echo "$jar_parent_dir:$md5sum_of_jar" >>${update_manager_static_file}
				cnt=$(expr $cnt + 1)
			fi
		fi
	done
	cd -
}

verifyUpdateManagerCheckSum() {
	echo "AdventNetUpdateManagerInstaller.jar checksum verification started at : " $(date "+%Y-%m-%d %T")
	if [ "${GROUP_ID}" -eq "1" -o "${GROUP_ID}" -eq "5" ]; then
		collection_of_urls=""
		check_sum_file_path="/zoho/build/downloads/static_reference/update_manager/UpdateManagerInstaller_checksum.txt"
		if [ -d ${DLOAD_DIR}/${BUILD_DLOAD_DIR} ]; then
			cd ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
			prd_zip_path=$(grep 'AdventNetUpdateManagerInstaller.jar' $(find -iname "*.zip") | grep -iv "windows\|linux\|mac" | cut -d " " -f3 | sed 's/^.\///')

			for pzpath in $prd_zip_path; do
				prd_zip_url=$(echo ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/$pzpath | sed 's/\/zoho\/build\/downloads\/dload/http:\/\/build/g')
				pzip_jar_md5sum=$(unzip -p $pzpath **/AdventNetUpdateManagerInstaller.jar | md5sum | cut -d " " -f1)

				grep -r "${pzip_jar_md5sum}" ${check_sum_file_path} >/dev/null
				if [ $? -ne 0 ]; then
					collection_of_urls="$collection_of_urls $prd_zip_url -> ${pzip_jar_md5sum}\n\n"
				else
					echo "AdventNetUpdateManagerInstaller.jar not modified in $prd_zip_url"
				fi
			done
			cd -
			if [ "${collection_of_urls}" != "" ]; then
				content=$(cat "${check_sum_file_path}")
				echo -e "Dear Mickey-Team,\n\n\t AdventNetUpdateManagerInstaller.jar modified in below zip(s),\n\nBUILD_BY: ${BUILDBY}\n\nBRANCH_NAME : ${ARG}\n\n $collection_of_urls \n\n AdventNetUpdateManagerInstaller.jar MD5SUM is given below for available UPDATE_MANAGER builds,  \n\n $content \n\n Thanks,\nIntegration-team." | mail -r "integration-team@zohocorp.com" -s "AdventNetUpdateManagerInstaller.jar modified notification for ${PRODUCT_NAME}" mickey-security@zohocorp.com,cm-notify@zohocorp.com
			fi
		fi
	fi
	echo "AdventNetUpdateManagerInstaller.jar checksum verification ended at : " $(date "+%Y-%m-%d %T")
}

resolveDependencyBuilds() {
	echo "resolveBuildDependencyBuilds started at : " $(date "+%Y-%m-%d %T")

	mv -fv ${BUILD_DIR}/buildlogs/urls.html ${BUILD_DIR}
	cat ${SOURCE_BASE_DIR}/lyte_zip_details.txt >>${BUILD_DIR}/urls.html
	sed -i "s@\$@<br>@g" ${BUILD_DIR}/urls.html
	#replaceUrls "post"
	BUILD_DEP="${BUILD_DEP}<br>"$(cat ${BUILD_DIR}/urls.html | grep -v "\.html" | cut -d "=" -f2 | sed 's/\//\\\//g' | tr -d "\n")
	if [ -f ${BUILD_DIR}/hgclone.txt ]; then
		cp -f ${BUILD_DIR}/{hgclone.txt,urls.html} ${WORK_DIR}/logs
	else
		cp -f ${BUILD_DIR}/{checkout.txt,urls.html} ${WORK_DIR}/logs
	fi
	echo "resolveBuildDependencyBuilds started at : " $(date "+%Y-%m-%d %T")

}

updateReportsConf() {
	reports_file=$(basename ${REPORTS_CONF_FILE})
	reports_dir=$(dirname ${REPORTS_CONF_FILE})
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		cd ${reports_dir}
		if [ -n "${REPORT_FILE_ARG}" ]; then
			git checkout ${REPORT_FILE_ARG}
		else
			git checkout master
		fi
	else
		cd ${reports_dir}
		if [ -n "${REPORT_FILE_ARG}" ]; then
			hg revert -r ${REPORT_FILE_ARG} ${reports_file}
		else
			hg revert -r default ${reports_file}
		fi
	fi
}

runTestCase() {
	if [ "${RUN_TEST_CASE}" = "YES" ]; then
		if [ "${BUILD_STATUS}" = "SUCCESS" ]; then
			echo "runTestCase started at : " $(date "+%Y-%m-%d %T")
			${RUN_TEST_CASE_SCRIPT} ${URL} ${BUILD_DLOAD_DIR} >${WORK_DIR}/logs/testcase_run.log 2>&1 &
			echo "runTestCase ended at : " $(date "+%Y-%m-%d %T")
		fi
	fi
}
ModifyBuildNumber() {
	echo "${BUILD_NUMBER}" >${BLD_NO_FILE}
}

antiVirusScan() {
	av_logfile=${OUTPUT_DLOAD_DIR}/logs/antivirus_scan.log
	clam_logfile=${OUTPUT_DLOAD_DIR}/logs/clam_debug.log
	touch ${av_logfile}
	echo "clam antivirus scanning started"
	clamscan -i -r --log=${av_logfile} --max-filesize=600000000 --max-scansize=5000000000 ${OUTPUT_DLOAD_DIR} >${clam_logfile} 2>&1
	scanStatus=$?
	if [ $scanStatus -ne 0 ]; then
		mail -r "integration-team@zohocorp.com" -s "Error in ${OUTPUT_DLOAD_DIR} antivirus scan process" "cm-notify@zohocorp.com" <${clam_logfile}
		exit 0
	fi
	echo "clam antivirus scanning ended"
	chmod 755 ${av_logfile}
	INFECTED_FILES=$(cat ${av_logfile} | grep -w "Infected files" | cut -d ":" -f2)
	if [ ${INFECTED_FILES} -ne 0 ]; then
		mail -r "integration-team@zohocorp.com" -s "anti virus scan report failure" "cm-notify@zohocorp.com" <"${av_logfile}"
	fi
}

reportGeneration() {
	if [ -f ${REPORTS_CONF_FILE} ]; then
		echo "${REPORTS_CONF_FILE} file exist so reports geneartion started ..."
		LAST_BUILD_DIR=$(echo $PREV_DBUILD_URL | sed -r 's:^/|/$::' | grep -o "[^/]*$")
		C_ZIP="${URL}/${BUILD_DLOAD_DIR}/$(echo ${commonzip_name} | tr "," " " | cut -d " " -f1)"
		P_ZIP="${PREV_DBUILD_URL}/$(echo ${commonzip_name} | tr "," " " | cut -d " " -f1)"
		MIL_DETAILS=$(python ${WORK_DIR}/hg_utils/build/get_latest_milestone_details.py ${ARG} ${PRODUCT_NAME})
		if [ -n "${MIL_DETAILS}" -a "${MIL_DETAILS}" != "None" ]; then
			LATEST_MS_DIR=$(echo $MIL_DETAILS | cut -d "#" -f1)
			LATEST_MS_BRANCH=$(echo $MIL_DETAILS | cut -d "#" -f2)
			M_DIR=$(echo $LATEST_MS_DIR | grep -o "[^/]*$")
			MS_ZIP="${LATEST_MS_DIR}/$(echo ${commonzip_name} | tr "," " " | cut -d " " -f1)"
		else
			LATEST_MS_DIR=""
			LATEST_MS_BRANCH=""
			M_DIR=""
			MS_ZIP=""
		fi
		C_BLD_LBL="${CHANGESET_VALUE}"
		P_BLD_FILE="${DLOAD_DIRECTORY}/${PREV_BUILD_LOCATION}/logs/${PRODUCT_NAME}.txt"
		P_BLD_LBL=$(grep -w "BUILD_LABEL" ${P_BLD_FILE} | cut -d "=" -f2 | sed -e 's/"//g;' | sed -e "s/'//g")
		if [ ${M_DIR} != "" ]; then
			MILESTONE_DETAILS=$(python ${WORK_DIR}/hg_utils/build/api_previous_milestone_changeset.py ${M_DIR})
			ML_SRC_CHANGESET=$(echo $MILESTONE_DETAILS | cut -d "$" -f1)
			ML_TP_CHANGESET=$(echo $MILESTONE_DETAILS | cut -d "$" -f2)
			PREV_MILE_BUILD_ID=$(echo $MILESTONE_DETAILS | cut -d "$" -f3)
		else
			ML_SRC_CHANGESET=""
			ML_TP_CHANGESET=""
		fi
		if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
			#CLONE_URL=`echo "${CLONE_URL}" | sed -e "s,git.csez,git-new.csez,g"`
			CLONE_URL=$(echo "${CLONE_URL}")
			CO_CMD=$(echo "git clone ${CLONE_URL}" | tr " " ",")
		else
			REP_PATH=$(echo ${CLONE_VALUE} | cut -d "/" -f3-)
			CO_CMD=$(echo "hg clone https://${REP_USERNAME}:*********@${REP_PATH} -r ${CHANGESET_VALUE}" | tr " " ",")
		fi
		LPRODUCTNAME=$(echo ${PRODUCT_NAME} | tr [A-Z] [a-z])

		echo "DL_DIR=\"${DLOAD_DIR}/${BUILD_DLOAD_DIR}\"" >>${build_info_file}
		echo "MODULE=\"${MOD_NAME}\"" >>${build_info_file}
		echo "CO_CMD=\"${CO_CMD}\"" >>${build_info_file}
		echo "REP_TYPE=\"${REPOSITORY_TYPE}\"" >>${build_info_file}
		echo "SRC_CHANGESET=\"${CHANGESET_VALUE}\"" >>${build_info_file}
		echo "TP_CSET=\"${TP_CHANGESET_VAL}\"" >>${build_info_file}

		echo "TP_CHECKOUT_LABEL=\"${ACTUAL_TP_LBL}\"" >>${build_info_file}
		echo "P_LBL=\"${P_BLD_LBL}\"" >>${build_info_file}
		echo "P_CHANGESET=\"${PREV_SRC_CHANGESET}\"" >>${build_info_file}
		echo "P_TP_CHANGESET=\"${PREV_TP_CHANGESET}\"" >>${build_info_file}
		echo "P_BUILD_ID=\"${PREV_BUILD_ID}\"" >>${build_info_file}
		echo "C_LBL=\"${C_BLD_LBL}\"" >>${build_info_file}
		echo "M_LBL=\"${M_DIR}\"" >>${build_info_file}
		echo "P_MLE_BUILD_ID=\"${PREV_MILE_BUILD_ID}\"" >>${build_info_file}
		echo "ML_CHANGESET=\"${ML_SRC_CHANGESET}\"" >>${build_info_file}
		echo "ML_TP_CHANGESET=\"${ML_TP_CHANGESET}\"" >>${build_info_file}
		echo "L_PRODUCTNAME=\"${LPRODUCTNAME}\"" >>${build_info_file}
		echo "CUR_ZIP=\"${C_ZIP}\"" >>${build_info_file}
		echo "PREV_ZIP=\"${P_ZIP}\"" >>${build_info_file}
		echo "MS_ZIP=\"${MS_ZIP}\"" >>${build_info_file}
		echo "LATEST_MS_BRANCH=\"${LATEST_MS_BRANCH}\"" >>${build_info_file}
		echo "CONF_FILE_PATH=\"${CONF_FILENAME}\"" >>${build_info_file}
		echo "COMMON_ZIP=\"$(echo ${commonzip_name} | tr "," " ")\"" >>${build_info_file}
		echo "PREV_BUILD_DIR=\"${LAST_BUILD_DIR}\"" >>${build_info_file}
		echo "BLD_DL_DIR=\"${DLOAD_DIRECTORY}\"" >>${build_info_file}
		echo "WH_PRODUCT_NAME=\"${PRODUCT_NAME}\"" >>${REPORTS_CONF_FILE}
		echo "BUILD_SCRIPT=\"ANT\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_WARNING_TYPE=\"medium\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_EXCLUDE_OPTION=\"YES\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_INCLUDE_OPTION=\"NO\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_INCLUDE_FILE=\"includefilter.xml\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_AUXCLASSPATH=\"NO\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_AUX_CLASSPATH=\"\"" >>${REPORTS_CONF_FILE}
		echo "FINDBUGS_OUTPUTFILE=\"${productname}_findbugs.html\"" >>${REPORTS_CONF_FILE}
		echo "CHECKWORD_FILE_EXTENSIONS=\"css|js\"" >>${REPORTS_CONF_FILE}
		echo "SRC_MODULE=\"${MOD_NAME}\"" >>${REPORTS_CONF_FILE}
		echo "DIFF_ZIP=\"${DIFF_ZIP}\"" >>${REPORTS_CONF_FILE}
		echo "PKG_DIFF=\"${PKG_DIFF}\"" >>${REPORTS_CONF_FILE}
		echo "SECURITY_EXCLUDE_METHODS=\"${SECURITY_EXCLUDE_METHODS}\"" >>${REPORTS_CONF_FILE}
		if [ -n "${FINDBUGS_JARS}" ]; then
			echo "FINDBUGS_JARS=\"${FINDBUGS_JARS}\"" >>${REPORTS_CONF_FILE}
		else
			FINDBUGS_JARS=$(cat ${BUILD_DIR}/findbugs_jars.txt | tr "\n" " ")
			echo "FINDBUGS_JARS=\"${FINDBUGS_JARS}\"" >>${REPORTS_CONF_FILE}
		fi

		if [ -n "${FINDBUGS_REPORT}" ]; then
			echo "FINDBUGS_REPORT=\"${FINDBUGS_REPORT}\"" >>${REPORTS_CONF_FILE}
		fi
		if [ -n "${SPOTBUGS_REPORT}" ]; then
			echo "SPOTBUGS_REPORT=\"${SPOTBUGS_REPORT}\"" >>${REPORTS_CONF_FILE}
		fi

		if [ -n "${teamspecific_pmd_xml}" ]; then
			echo "teamspecific_pmd_xml=\"${teamspecific_pmd_xml}\"" >>${REPORTS_CONF_FILE}
		fi

		if [ -n "${I18N_MISSING_KEYS_REPORT}" ]; then
			echo "I18N_MISSING_KEYS_REPORT=\"${I18N_MISSING_KEYS_REPORT}\"" >>${REPORTS_CONF_FILE}
			if [ -n "${TEAM_SPECIFIC_I18N_MISSINGKEY_REPORTS}" ]; then
				echo "TEAM_SPECIFIC_I18N_MISSINGKEY_REPORTS=\"${TEAM_SPECIFIC_I18N_MISSINGKEY_REPORTS}\"" >>${REPORTS_CONF_FILE}
				echo "TEAM_SPECIFIC_I18N_MISSINGKEY_DIR_PATH=\"${TEAM_SPECIFIC_I18N_MISSINGKEY_DIR_PATH}\"" >>${REPORTS_CONF_FILE}
			fi

		fi
		if [ -n "${I18N_UNUSED_KEYS_REPORT}" ]; then
			echo "I18N_UNUSED_KEYS_REPORT=\"${I18N_UNUSED_KEYS_REPORT}\"" >>${REPORTS_CONF_FILE}
			echo "PROPERTY_FILE_DIRECTORY=\"${PROPERTY_FILE_DIRECTORY}\"" >>${REPORTS_CONF_FILE}
			echo "SOURCE_INCLUDE_DIRECTORY=\"${SOURCE_INCLUDE_DIRECTORY}\"" >>${REPORTS_CONF_FILE}
		fi
		echo "PMD_EXCLUDES=\"${PMD_EXCLUDES}\"" >>${REPORTS_CONF_FILE}
		echo "GID=\"${GROUP_ID}\"" >>${build_info_file}
		echo "SUB_PRDNAME=\"${PRODUCT_KNOWN_AS}\"" >>${build_info_file}
		echo "CHECKWORD_MAILSEND=\"false\"" >>${build_info_file}
		echo "CHECKWORD_MAILIDS=\"integration-team@zohocorp.com\"" >>${build_info_file}
		echo "CHECKWORD_OPTION=\"FULL\"" >>${build_info_file}
		if [ -n "${DUPLICATE_KEYS_REPORT}" ]; then
			echo "DUPLICATE_KEYS_REPORT=\"${DUPLICATE_KEYS_REPORT}\"" >>${build_info_file}
			echo "DUPLICATE_KEYS_FILES=\"${DUPLICATE_KEYS_FILES}\"" >>${build_info_file}
			echo "REPORT_NOTIFICATION_ALIAS=\"${REPORT_NOTIFICATION_ALIAS}\"" >>${build_info_file}
		fi
		if [ -n "${MISSING_KEYS_REPORT_RELEASEBUILD}" ]; then
			echo "MISSING_KEYS_REPORT_RELEASEBUILD=\"${MISSING_KEYS_REPORT_RELEASEBUILD}\"" >>${build_info_file}
			echo "PROP_REPORTS_ZIPNAME=\"${PROP_REPORTS_ZIPNAME}\"" >>${build_info_file}
			echo "PROP_REPORTS_FILENAME=\"${PROP_REPORTS_FILENAME}\"" >>${build_info_file}

		fi

		if [ -n "${DUPLICATE_CLASS_REPORT_CUSTOMFOLDER}" ]; then
			echo "DUPLICATE_CLASS_REPORT_CUSTOMFOLDER=\"${DUPLICATE_CLASS_REPORT_CUSTOMFOLDER}\"" >>${build_info_file}
		fi
		if [ -n "${I18N_PROPERTIES_DIFF_REPORT}" ]; then
			echo "I18N_PROPERTIES_DIFF_REPORT=\"YES:YES:NO\"" >>${build_info_file}
			echo "PROPERTIES_SRC_DIR=\"product_package/lib/resources product_package/lib/resources\"" >>${build_info_file}
			echo "MASTER_PROPERTY_FILE=\"ApplicationResources_en_US.properties JSApplicationResources_en_US.properties\"" >>${build_info_file}
		fi
		if [ -n "${SUB_MODULES}" ]; then
			echo "SUB_MODULES=\"${SUB_MODULES}\"" >>${build_info_file}
		fi
		if [ -n "${SUB_PRODUCTS}" ]; then
			echo "SUB_PRODUCTS=\"${PRODUCT_NAME} ${SUB_PRODUCTS}\"" >>${REPORTS_CONF_FILE}
			PREV_SUBMODULE_DETAILS=$(grep -w "SOURCE_CHANGESET_VALUE" ${P_BLD_FILE} | cut -d "\"" -f2)
			echo "PREV_SUBMODULE_DETAILS=\"${PREV_SUBMODULE_DETAILS}\"" >>${build_info_file}
		fi
		if [ -n "${BUILD_DEPENDENCY_CHANGE_NOTIFY}" ]; then
			echo "BUILD_DEPENDENCY_CHANGE_NOTIFY=\"${BUILD_DEPENDENCY_CHANGE_NOTIFY}\"" >>${build_info_file}
		fi
		if [ ${PRODUCT_NAME} = "DESKTOPCENTRAL" ]; then
			perl -w -e "s@^SERVER_NAME=.*@SERVER_NAME=\"me-build1\"@g" -p -i ${build_info_file}
			SERVER_NAME="me-build1"
			export SERVER_NAME
		fi

		if [ -n "${DEFAULT_REPORT_NEEDED}" ]; then
			echo "DEFAULT_REPORT_NEEDED=\"${DEFAULT_REPORT_NEEDED}\"" >>${build_info_file}
		fi

		sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${OUTPUT_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
		sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${OUTPUT_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
		sed -i "s@ACCESS_VALUE=\(.*\)@@g" ${OUTPUT_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
		sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${OUTPUT_DLOAD_DIR}/logs/sub_src_checkout.log
		sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${OUTPUT_DLOAD_DIR}/logs/checkout.log

		if [ "${REPORT_NEEDED}" = "true" ]; then

			realsebuildchk_reports=$(echo $RELEASED_BRANCHES | grep -w "$ARG")
			if [ "${PRODUCT_NAME}" = "ZOHOCRM" -o "${PRODUCT_NAME}" = "APPMANAGER" -o "${PRODUCT_NAME}" = "CHARM_EHR" -o "${ARG}" = "default" -o "${ARG}" = "master" -o -n "${realsebuildchk_reports}" ]; then ##if [ "${ARG}" = "default" -o "${ARG}" = "master" -o -n "${realsebuildchk_reports}" ]
				REPORTS_MACHINE_NAME="integ-reports"
			fi

			REPORTS_PRD=$(cat ${WORK_DIR}/hg_utils/build/reports_products.txt | grep -w "${PRODUCT_NAME}")
			if [ ! -z "${REPORTS_PRD}" ]; then
				REPORTS_MACHINE_NAME="me-build1-bkp"
				#sed -i 's@WH_DIR@REPORTS@g'  ${WORK_DIR}/hg_utils/build/clonehook.py
				#sed -i "s@${PRODUCT_NAME}/@@g" ${WORK_DIR}/hg_utils/build/clonehook.py
				sudo chown -R build.build /zoho/build/downloads/ssh/id_rsa
				ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -l ${REPORTS_LOGIN_NAME} ${REPORTS_MACHINE_NAME} 'if [ ! -d ${HOME}/REPORTS/'${CUR_DATE}' ]; then mkdir -p ${HOME}/REPORTS/'${CUR_DATE}'; fi; mkdir -p '${RAND_DIR}''
				scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${WORK_DIR}/hg_utils/build/{genrep_wrapper_parallel.sh,clonehook.py,apiwrapper_reports.py,reportlog.shtml,binary_html.sh} ${REPORTS_LOGIN_NAME}@${REPORTS_MACHINE_NAME}:${RAND_DIR}
				scp -pr -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa ${build_info_file} ${REPORTS_LOGIN_NAME}@${REPORTS_MACHINE_NAME}:${RAND_DIR}
				nohup ssh -o StrictHostKeyChecking=no -i ${HOME}/downloads/ssh/id_rsa -l ${REPORTS_LOGIN_NAME} ${REPORTS_MACHINE_NAME} 'cd '${RAND_DIR}';sh  '${RAND_DIR}/genrep_wrapper_parallel.sh' '"${PRODUCT_NAME}"' '"${LOGIN_NAME}"' '"${SERVER_NAME}"' '"${WH_BUILD_ID}"' '"${REPORT_NEEDED}"' '"${RAND_DIR}"'' &

			else

				#sed -i 's@WH_DIR@REPORTS@g'  ${WORK_DIR}/hg_utils/build/clonehook.py
				#sed -i "s@${PRODUCT_NAME}/@@g" ${WORK_DIR}/hg_utils/build/clonehook.py
				ssh -l ${REPORTS_LOGIN_NAME} ${REPORTS_MACHINE_NAME} 'if [ ! -d ${HOME}/REPORTS/'${CUR_DATE}' ]; then mkdir -p ${HOME}/REPORTS/'${CUR_DATE}'; fi; mkdir -p '${RAND_DIR}''
				scp ${WORK_DIR}/hg_utils/build/{genrep_wrapper_parallel.sh,clonehook.py,apiwrapper_reports.py,reportlog.shtml,binary_html.sh} ${REPORTS_LOGIN_NAME}@${REPORTS_MACHINE_NAME}:${RAND_DIR}
				scp ${build_info_file} ${REPORTS_LOGIN_NAME}@${REPORTS_MACHINE_NAME}:${RAND_DIR}
				nohup ssh -o StrictHostKeyChecking=no -l ${REPORTS_LOGIN_NAME} ${REPORTS_MACHINE_NAME} 'cd '${RAND_DIR}';sh  '${RAND_DIR}/genrep_wrapper_parallel.sh' '"${PRODUCT_NAME}"' '"${LOGIN_NAME}"' '"${SERVER_NAME}"' '"${WH_BUILD_ID}"' '"${REPORT_NEEDED}"' '"${RAND_DIR}"'' &
			fi
		fi

		nohup sh ${WORK_DIR}/hg_utils/build/genrep_wrapper_parallel.sh "${PRODUCT_NAME}" "${LOGIN_NAME}" "${SERVER_NAME}" "${WH_BUILD_ID}" "FALSE" "${WORK_DIR}" &
		echo "REPORT GENERATION FOR THE BUILD IS STARTED PARALLELY ............." >>${STATUS_LOG}
		cd -
	else
		echo "${REPORTS_CONF_FILE} file not exist"
		echo "${REPORTS_CONF_FILE} file not exist" >${reports_log} 2>&1
	fi
}

find_duplicate_ant_invocation_task() {
	taskname_file_path=$1
	ant_file_path=$2
	ant_html_report_folder="$3/ANT_DUPLICATE_INVOCATION_TASK_REPORT"

	duplicate_tasks=$(sort ${taskname_file_path} | uniq -d)

	if [ -n "${duplicate_tasks}" ]; then
		mkdir -p ${ant_html_report_folder}
		ant_html_report_file="${ant_html_report_folder}/index.html"
		echo "<html><head>
        <link rel="stylesheet" href="https://cm-server.csez.zohocorpin.com/integ_reports/bootstrap/3.3.7/css/bootstrap.min.css">
        </head>
        <table class=\"table-responsive table-bordered table table-hover\">
        <tr><th>Sno</th><th>Task Name</th><th>Line No</th><th>Invocation Order</th></tr>
        " >${ant_html_report_file}
		sno=0
		for dup_task in $(echo ${duplicate_tasks} | tr " " "\n"); do
			cnt=0
			row_html=""
			cols_html=""
			gword=$(grep -wn "${dup_task}" $ant_file_path)
			for aline in $(echo ${gword}); do
				cnt=$(expr $cnt + 1)
				lineno=$(echo $aline | cut -d ":" -f1)
				linemsg=$(echo $aline | cut -d ":" -f2- | sed "s@\<${dup_task}\>@<span class=\"text-danger\">${dup_task}</span>@g")
				if [ $cnt -eq 1 ]; then
					cols_html="$cols_html $(echo "<td>${lineno}</td><td style=\"overflow-wrap:anywhere\">${linemsg}</td>")"
				else
					cols_html="$cols_html $(echo "<tr><td>${lineno}</td><td style=\"overflow-wrap:anywhere\">${linemsg}</td></tr>")"
				fi
			done
			sno=$(expr $sno + 1)
			row_html=$(echo "<tr><td rowspan="${cnt}">$sno</td><td rowspan="${cnt}">${dup_task}</td>")
			echo ${row_html} >>${ant_html_report_file}
			echo ${cols_html} >>${ant_html_report_file}
		done
		echo "</table></html>" >>${ant_html_report_file}
	fi
}

status_check() {
	if [ $? -ne 0 ]; then
		echo "Error occured while ${1}"
		ERR_SUB="Error occured while ${1}"
		mail -r "integration-team@zohocorp.com" -s "${ERR_SUB}" ${ERROR_MAIL_ID} <${2}
		updateBuildErrorStatus "${ERR_SUB}"
		exit 1
	else
		echo "${1} is completed successfully"
	fi
}

check_Random_GenJar_Update_Error() {

	if [ "${PRODUCT_NAME}" = "SUPPORTCENTER" ]; then
		UPDATE_MSG="Updating jar:"
		UPDATE_MSG_STRING=$(grep -E "${UPDATE_MSG}" ${BUILD_DIR}/buildlogs/genjar_metadatainfo_xml_*.log)
		if [ "${UPDATE_MSG_STRING}" = "" ]; then
			file_check=$(ls ${BUILD_DIR}/buildlogs/genjar_metadatainfo_xml_*.log)
			if [ "${file_check}" != "" ]; then
				mail -r "integration-team@zohocorp.com" -s "META-INF/ejb-jar.xml not updated in the jar in Branch ${ARG} of ${PRODUCT_NAME}" "${SUCCESS_MAIL_ID}" <<-EOF
					                  Build Id : ${WH_BUILD_ID}
					                  Build Url : ${URL}/${BUILD_DLOAD_DIR}/logs
				EOF
			fi
		fi
	fi

}

successmail() {
	check_Random_GenJar_Update_Error
	CMTOOL_OPTIONS=$(echo $TEAM_SPECIFIC_INFO | tr "," "\n" | sed 's/=/:/' | pr -Td)

	CMTOOLS_MSG=""
	if [ "$GROUP_ID" != "5" ]; then
		content="<blink><p style=\"color:red;\">Report generation is under processing . So don't do milestone movement until this process.</p></blink>"
	else
		content="<blink><p style=\"color:red;\">Report generation is under processing ...(Including security reports). So don't do milestone movement until this process.</p></blink>"
	fi
	if [ "${WH_BUILD_ID}" != "" ]; then
		CMTOOLS_MSG="Build Details (Cmtool) : ${CMURL}<br><br>"
	fi
	REPORTS_URL="Report Status Url : http://${REPORTS_MACHINE_NAME}/report_status/${RAND_PATH}/reportlog.shtml<br><br>"
	echo "Dear Team,<br><br>
		The latest build of ${productname} is available in the below mentioned URL:<br><br>
		Build Download URL: ${URL}/${BUILD_DLOAD_DIR}<br><br>

		Cmtools Build Option are: <br>

	        Build Id : ${WH_BUILD_ID} <br>

        	Build By : ${BUILDBY}  <br>

	        Branch Name : $ARG <br>

		Source Changeset : ${TIP_CHANGESET} <br>

	        $CMTOOL_OPTIONS <br>

		${CMTOOLS_MSG}
		${content}
		Report Status Url : ${REPORTS_URL}
		Once report generation completed, you will get the mail with complete reports.<br><br>
		<b>Note : We will remove the non milestone (webhost) builds older than 3 days. Please use lock/milestone feature for required builds to avoid removal.For more information please refer following post :</b> https://connect.zoho.com/portal/intranet/stream/105000469866180 <br><br>
		Kindly get back to us for further support in this regard.<br><br>
		Thanks &amp; Regards,<br>
		Integration Team" >${BUILD_DIR}/successmail.html
	mutt -e "set content_type=\"text/html\" from=integration-team@zohocorp.com" -s "${SUCCESS_SUBJECT}" ${SUCCESS_MAIL_ID} <${BUILD_DIR}/successmail.html

}

checkRandomErrors() {
	echo "checkRandomErrors started at : " $(date "+%Y-%m-%d %T")
	if [ -f "${BUILD_DIR}/build.log" ]; then
		INCONSISTENT_ERRMSG="java\.rmi\.UnmarshalException"
		INCONSISTENT_STRING=$(grep -E "${INCONSISTENT_ERRMSG}" ${BUILD_DIR}/build.log)
		if [ -n "${INCONSISTENT_STRING}" ]; then
			mail -r "integration-team@zohocorp.com" -s "${INCONSISTENT_STRING} in Branch ${ARG} of ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID}" <<-EOF
				Build Id : ${WH_BUILD_ID}
				Error Build Url : ${ERROR_URL}/logs
			EOF
		fi
		INCONSISTENT_ERRMSG="Error starting modern compiler"
		INCONSISTENT_STRING=$(grep -E "${INCONSISTENT_ERRMSG}" ${BUILD_DIR}/build.log)
		if [ -n "${INCONSISTENT_STRING}" ]; then
			mail -r "integration-team@zohocorp.com" -s "${INCONSISTENT_STRING} in Branch ${ARG} of ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID}" <<-EOF
				Build Id : ${WH_BUILD_ID}
				Error Build Url : ${ERROR_URL}/logs
			EOF
		fi
		INCONSISTENT_ERRMSG="The md5sum for the source file and destination file differ"
		INCONSISTENT_STRING=$(grep -E "${INCONSISTENT_ERRMSG}" ${BUILD_DIR}/build.log)
		if [ -n "${INCONSISTENT_STRING}" ]; then
			mail -r "integration-team@zohocorp.com" -s "${INCONSISTENT_STRING} in Branch ${ARG} of ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID}" <<-EOF
				Build Id : ${WH_BUILD_ID}
				Error Build Url : ${ERROR_URL}/logs
			EOF
		fi
		INCONSISTENT_ERRMSG="Zoho account check validation failed"
		INCONSISTENT_STRING=$(grep -E "${INCONSISTENT_ERRMSG}" ${BUILD_DIR}/build.log)
	fi
	echo "checkRandomErrors started at : " $(date "+%Y-%m-%d %T")
}

errormail() {
	mkdir -p ${ERROR_DLOAD_DIR}
	copyBuilderrorlogs
	checkRandomErrors
	if [ -f "${BUILD_DIR}/build.log" ]; then
		PARALLEL_ERRTASK_LOG="${BUILD_DIR}/paralleltaskerr.txt"
		err_file_name="build.log"
		getErrorTasks
		getExactError
		if [ -f "${ERROR_DLOAD_DIR}/logs/buildlogs/ExactError.txt" ]; then
			sed -i "s@.log@ @g" ${ERROR_DLOAD_DIR}/logs/buildlogs/ExactError.txt
			cat ${ERROR_DLOAD_DIR}/logs/buildlogs/ExactError.txt | sed '/^$/d' | sed -e 's/[ \t]*$//' >${ERROR_DLOAD_DIR}/logs/buildlogs/ExactError_space.txt
			if [ -s "${ERROR_DLOAD_DIR}/logs/buildlogs/ExactError_space.txt" ]; then
				error_message=$(cat ExactError_space.txt | sed 's/[0-9]*//g' | sed 's/____//g' | sed 's/.\///g')
				echo "REASON_FOR_BUILD_FAILURE=\"Ant_Failure:${error_message}\"" >>${build_info_file}
				REASON_FOR_BUILD_FAILURE="Ant_Failure:${error_message}"
				export REASON_FOR_BUILD_FAILURE

			else
				error_message="ant task failed ."
				echo "REASON_FOR_BUILD_FAILURE=\"Ant_Failure:${error_message}\"" >>${build_info_file}
				REASON_FOR_BUILD_FAILURE="Ant_Failure:${error_message}"
				export REASON_FOR_BUILD_FAILURE

			fi

		else
			error_message="Build task failed ."
			echo "REASON_FOR_BUILD_FAILURE=\"Ant_Failure:${error_message}\"" >>${build_info_file}
			REASON_FOR_BUILD_FAILURE="Ant_Failure:${error_message}"
			export REASON_FOR_BUILD_FAILURE
		fi

		GET_ERR=$(sed -n 'H; /^calltask/h; ${g;p;}' ${BUILD_DIR}/build.log)
		GET_TASK=$(echo ${GET_ERR} | cut -d " " -f3)
		ERROR_SUBJECT="Error occurred in ${GET_TASK} task in ${LABEL_VAR}_${ERR_DL_DIR} Build"
		ERROR_SUBJECT_TRIM=$(echo -e ${ERROR_SUBJECT} | tr "\n" " ")

		CMTOOL_OPTIONS=$(echo $TEAM_SPECIFIC_INFO | tr "," "\n" | sed 's/=/:/' | pr -Td)

		if [ -f "${ERROR_DLOAD_DIR}/logs/ExactError.html" ]; then
			err_file_name="ExactError.html"
			if [ "${GROUP_ID}" = "15" -o "${GROUP_ID}" = "20" -o "${GROUP_ID}" = "21" ]; then
				mail -r "integration-team@zohocorp.com" -s "$(echo -e "${ERROR_SUBJECT_TRIM}\nContent-Type: text/plain")" "${ERROR_MAIL_ID}" <<-EOF

					                        Detailed Logs are available in the below mentioned url:

					                        ${ERROR_URL}/logs/build.log

					                        Error Detail:

					                        ${exacterr_message}


				EOF

			else
				mail -r "integration-team@zohocorp.com" -s "$(echo -e "${ERROR_SUBJECT_TRIM}\nContent-Type: text/plain")" "${ERROR_MAIL_ID}" <<-EOF

					                        Detailed Logs are available in the below mentioned url:

					                        $(cat ${ERROR_DLOAD_DIR}/logs/buildlogs/ExactErrormail.txt)

					                         Cmtools Build Option are:

					                         Build Id : ${WH_BUILD_ID}

					                         Build By : ${BUILDBY}

					                         Branch Name : $ARG

					                         $CMTOOL_OPTIONS

					                        ${exacterr_message}

				EOF
			fi
		else
			mail -r "integration-team@zohocorp.com" -s "$(echo -e "${ERROR_SUBJECT_TRIM}\nContent-Type: text/plain")" "${ERROR_MAIL_ID}" <<-EOF

				                        Detailed Logs are available in the below mentioned url:

							 ${ERROR_URL}/logs/build.log

				                          $(sed -n 'H; /^calltask/h; ${g;p;}' ${BUILD_DIR}/build.log | grep -iEv "build.xml|checks.xml|library.xml")


			EOF
		fi

	else
		if [ -f "${BUILD_DIR}/buildlogs/*.log" ]; then
			mail -r "integration-team@zohocorp.com" -s "${ERROR_SUBJECT}\nContent-Type: text/plain" "${ERROR_MAIL_ID}" <<-EOF
				$(cat $(ls -1t ${BUILD_DIR}/buildlogs/*.log | head -1))

				Detailed Logs are available in the below mentioned url:

				${ERROR_URL}/logs
			EOF
		else
			mail -r "integration-team@zohocorp.com" -s "${ERROR_SUBJECT}" "${ERROR_MAIL_ID}" <<-EOF
				Detailed Logs are available in the below mentioned url:

				${ERROR_URL}/logs
			EOF
		fi
	fi
}

sendErrorMail() {
	local ERR_SUBJECT=$1
	local ERR_CONTENT=$2
	mail -r "integration-team@zohocorp.com" -s "${ERR_SUBJECT} in ${PRODUCT_NAME}( ${ARG} : ${WH_BUILD_ID})" "${ERROR_MAIL_ID},${ERROR_NOTIFY_MAIL_ID}" <<-EOF
		Dear Team,

		Product Name : ${PRODUCT_NAME}
		Branch Name  : ${ARG}
		Build Id     : ${WH_BUILD_ID}

		${ERR_CONTENT}

		Kindly get back to us for further support in this regard.

		Thanks & Regards,
		Integration Team
	EOF
	updateBuildErrorStatus "${ERR_SUBJECT}"
	exit 1
}
logTime() {
	PROCESS_NAME=$1
	PROCESS_STATUS=$2
	echo "${PROCESS_NAME} ${PROCESS_STATUS} at : $(date +%b_%d_%Y@%T)"
}
time_cal() {
	VALUE=${1}
	SDTIME="${2}"
	EDTIME="${3}"
	SDATE=$(echo ${SDTIME} | cut -d "@" -f1)
	STIME=$(echo ${SDTIME} | cut -d "@" -f2)
	SD=$(echo ${SDATE} | tr "_" " ")
	EDATE=$(echo ${EDTIME} | cut -d "@" -f1)
	ETIME=$(echo ${EDTIME} | cut -d "@" -f2)
	ED=$(echo ${EDATE} | tr "_" " ")
	SOUT=$(date -d "${SD} ${STIME}" +%s)
	EOUT=$(date -d "${ED} ${ETIME}" +%s)
	DUR=$(expr ${EOUT} - ${SOUT})
	MINS=$(expr ${DUR} \/ 60)
	SECS=$(expr ${DUR} % 60)
	if [ "x${SECS}" = "x" ]; then
		BDUR="${MINS} min(s)"
	else
		BDUR="${MINS} min(s) ${SECS} sec(s)"
	fi
	echo "BUILD DURATION:${BDUR}"
	TOTAL_BDUR="$(echo ${BDUR} | tr -d \" \")"
	echo "${VALUE} is started at ${SDTIME}" >>${CRON_BLD_TIME_FILE}
	echo "<br>" >>${CRON_BLD_TIME_FILE}
	echo "${VALUE} is ended at ${EDTIME}" >>${CRON_BLD_TIME_FILE}
	echo "<br>" >>${CRON_BLD_TIME_FILE}
	echo "Total ${VALUE} time is ${TOTAL_BDUR}" >>${CRON_BLD_TIME_FILE}
	echo "<br><br><br>" >>${CRON_BLD_TIME_FILE}
	if [ "${VALUE}" = "${ARG}_BUILD" ]; then
		export TOTAL_BDUR
	fi
}

sd_new_gofrugal_zoho_apicall() {
	echo ${SD_DATACENTER}
	echo ${SD_REGION}
	echo ${SD_DEPY_MODE}
	echo ${SD_BLD_STAGE}
	SD_DOWNLOAD_BUILD_URL=${BLD_URL}/${SD_UPGRADEZIP_NAME}
	echo ${SD_DOWNLOAD_BUILD_URL}

	echo ${SD_GRID_EDIT}
	echo ${SD_SERVICE_NAME}
	echo ${SD_PROD_NAME}

	curl --location https://sd.csez.zohocorpin.com/buildprovision/v1/services/${SD_SERVICE_NAME}/products/${SD_PROD_NAME}/action/build_update --header "Authorization:${sdauthtokenapi}" --header 'Content-Type:application/json' --data '{"'data_center'":"'${SD_DATACENTER}'", "'region'":"'${SD_REGION}'", "'deployment_mode'":"'${SD_DEPY_MODE}'", "'build_stage'":"'${SD_BLD_STAGE}'", "'build_url'":"'${SD_DOWNLOAD_BUILD_URL}'", "'notify_to'":["'${SD_NOTIFY_TO}'"], "'comment'":"'${SD_COMMENT}'", "'build_by'":"'${SD_BUILDBY}'", "'is_grid_edited'":'${SD_GRID_EDIT}', "'regions_to_be_synced'":[{"region":"'${SD_REGION_SYNC_DC}'","sync_time":"'${SD_REGION_SYNC_TIME}'"},{"region":"'${SD_REGION_SYNCED}'","sync_time":"'${SD_SYNC_TIME}'"}]}'

}
sd_newbase_build_update()
{

		echo "SD Service Name :" ${SD_SERVICE_NAME}
		echo "SD Product Name :" ${SD_PROD_NAME}
		echo "DataCenter :" ${SD_DATACENTER}
                echo "Region :" ${SD_REGION}
                echo "Delopyment_mode :" ${SD_DEPY_MODE}

		echo "BuildStage :" ${SD_BLD_STAGE}

		SD_DOWNLOAD_BUILD_URL=${BLD_URL}/${SD_UPGRADEZIP_NAME}

		echo "SDBuildURL :" ${SD_DOWNLOAD_BUILD_URL}

                echo "GridEdited :" ${SD_GRID_EDIT}

		echo "SDParallel_ProductName :" ${PARALLEL_PRODUCTNAME}
		echo "SDParallel_BuildStage :" ${PARALLEL_BUILD_STAGE}
		echo "SDParallel_ServiceName :" ${PARALLEL_SERVICENAME}

		echo "SDSubgrids :" ${SUB_GRIDS}
		echo "SDProvisionType :" ${SD_PROVISION_TYPE}
		echo "SDBuild By :" ${SD_BUILDBY}
                echo "SD_NOTIFYTO :" ${SD_NOTIFY_TO}

		echo "SDCOMMENT :" ${SD_COMMENT}

		echo "SkipContinueValue :" ${SKIP_CONTINUE_VALUE}
		echo "StaticNeededValue :" ${STATIC_NEEDED}
		echo "SkipContForParallelValue :" ${SKIP_CONTINUE_FOR_PARALLEL_PRODUCTS}

curl --location https://sd.csez.zohocorpin.com/buildprovision/v1/services/${SD_SERVICE_NAME}/products/${SD_PROD_NAME}/action/build_update \
--header 'Authorization:'${sdauthtokenapi}'' \
--header 'Content-Type: application/json' \
--data '{
  "data_center": "'${SD_DATACENTER}'",
  "region": "'${SD_REGION}'",
  "deployment_mode": "'${SD_DEPY_MODE}'",
  "build_stage": "'${SD_BLD_STAGE}'",
  "build_url": "'${SD_DOWNLOAD_BUILD_URL}'",
  "parallel_products": [
      {
           "product": "'${PARALLEL_PRODUCTNAME}'",
           "build_stage": "'${PARALLEL_BUILD_STAGE}'",
           "service_name": "'${PARALLEL_SERVICENAME}'"
       }
   ],
  "sub_grids": [
        '${SUB_GRIDS}'
   ],
   "tar_names": [
       "'${SD_TAR_NAME}'"
   ],
    "build_options": {
       "skip_continue": '${SKIP_CONTINUE_VALUE}',
       "static_needed": '${STATIC_NEEDED}',
       "skip_continue_for_parallel_products": '${SKIP_CONTINUE_FOR_PARALLEL_PRODUCTS}'
   },
  "notify_to": [
    "'${SD_NOTIFY_TO}'"
  ],
  "comment": "'${SD_COMMENT}'",
  "provision_type": "'${SD_PROVISION_TYPE}'",
   "build_by": "'${SD_BUILDBY}'",
  "is_grid_edited": '${SD_GRID_EDIT}'
}'

}
zohoUpgrade() {
	teamSpecificZohoUpgrade
	if [ "${BUILDUPDATE_NEW_SD_API_CALL}" == "YES" ]
        then
		echo "SD New Build Update API Call Started"
	       	sd_newbase_build_update >> ${LOGS_DIR}/sd_trigger.log 2>&1
		echo "SD New Build Update API Call Ended"
	fi
	if [ "${GO_FRUGAL_SD_API_CALL}" = "YES" -o "${ZOHOBUILD_SD_API_CALL}" = "YES" ]; then
		echo "Go Frugal sd api call started."
		sd_new_gofrugal_zoho_apicall >>${LOGS_DIR}/sd_trigger.log 2>&1
		echo "Go Frugal sd api call ended."
	fi
	if [ "${AUTOBUILD_UPGRADE}" = "YES" -o -n "${ZOHO_UPGRADE}" -a "${ZOHO_UPGRADE}" = "YES" ]; then
		if [ -n "${SD_PROD_NAME}" -a -n "${SD_UPGRADEZIP_NAME}" ]; then
			for SD_UPGRADEZIP_NAME_ZIP in $(echo ${SD_UPGRADEZIP_NAME} | tr "," " "); do
				DOWNLOAD_BUILD_URL=${BLD_URL}/${SD_UPGRADEZIP_NAME_ZIP}
				if [ ! -n "${SD_BUILD_TYPE}" ]; then
					SD_BUILD_TYPE="local_static"
				fi
				echo "zohoUpgrade started at : " $(date "+%Y-%m-%d %T")
				zohoUpgrade_Auth_common_Btype >>${LOGS_DIR}/sd_trigger.log 2>&1
				sdapi_call_notify_mail "zohoUpgrade" ${SD_BUILD_TYPE}
				echo "zohoUpgrade Ended at : " $(date "+%Y-%m-%d %T")
			done
		fi
		if [ -n "${SD_BUILD_TYPE}" -a -n "${SD_MULTI_UPGRADEZIP_NAME_BTYPE}" ]; then
			for i in $(echo $SD_MULTI_UPGRADEZIP_NAME_BTYPE | tr "," " "); do
				SD_PROD_NAME=$(echo $i | cut -d ":" -f1)
				SD_UPGRADEZIP_NAME=$(echo $i | cut -d ":" -f2)
				DOWNLOAD_BUILD_URL=${BLD_URL}/${SD_UPGRADEZIP_NAME}
				echo "zohoUpgrade started at : " $(date "+%Y-%m-%d %T")
				zohoUpgrade_Auth_common_Btype >>${LOGS_DIR}/sd_trigger.log 2>&1
				echo "zohoUpgrade Ended at : " $(date "+%Y-%m-%d %T")
			done

		fi
		if [ -n "${SD_MULTI_UPGRADEZIP_NAME_WITH_BTYPE}" ]; then
			for i in $(echo $SD_MULTI_UPGRADEZIP_NAME_WITH_BTYPE | tr "," " "); do
				SD_PROD_NAME=$(echo $i | cut -d ":" -f1)
				SD_UPGRADEZIP_NAME=$(echo $i | cut -d ":" -f2)
				SD_BUILD_TYPE=$(echo $i | cut -d ":" -f3)
				DOWNLOAD_BUILD_URL=${BLD_URL}/${SD_UPGRADEZIP_NAME}
				echo "zohoUpgrade started at : " $(date "+%Y-%m-%d %T")
				zohoUpgrade_Auth_common_Btype >>${LOGS_DIR}/sd_trigger.log 2>&1
				echo "zohoUpgrade Ended at : " $(date "+%Y-%m-%d %T")
			done

		fi

	fi
}

zohoUpgrade_Auth_common_Btype() {
	if [ -n "${PARALLEL_PRODUCTS}" ]; then
		UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_products=${PARALLEL_PRODUCTS}"
		UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_products=${PARALLEL_PRODUCTS}"
	else
		if [ ! -z "${SD_COMMENT}" ]; then
			if [ ! -z "${CHANGE_BUILDBY}" -a ! -z "${SD_PARALLEL_DEPLOY_FORDIFF}" -a ${SD_PARALLEL_DEPLOY_FORDIFF} = "YES" ]; then
				UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&comment=${SD_COMMENT}&build_by=${CHANGE_BUILDBY}&success_mail=${BUILDBY}&parallel_deploy_for_diff_buildtypes=1"
				UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&comment=${SD_COMMENT}&build_by=${CHANGE_BUILDBY}&success_mail=${BUILDBY}&parallel_deploy_for_diff_buildtypes=1"
			elif [ ! -z "${CHANGE_BUILDBY}" ]; then
				UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&comment=${SD_COMMENT}&build_by=${CHANGE_BUILDBY}&success_mail=${BUILDBY}"
				UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&comment=${SD_COMMENT}&build_by=${CHANGE_BUILDBY}&success_mail=${BUILDBY}"
			else
				UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&comment=${SD_COMMENT}&build_by=${BUILDBY}"
				UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&comment=${SD_COMMENT}&build_by=${BUILDBY}"
			fi

		elif [ ! -z "${SD_PARALLEL_DEPLOY}" -a ! -z ${SD_STATIC_NEEDED} ]; then
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for=1&static_needed=${SD_STATIC_NEEDED}"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for=1&static_needed=${SD_STATIC_NEEDED}"

		elif [ ! -z "${SD_PARALLEL_DEPLOY}" -a ! -z "${SD_ENABLE_AUTOMATION}" -a ! -z "${SD_PARALLEL_DEPLOY_FORDIFF}" -a ${SD_PARALLEL_DEPLOY_FORDIFF} = "YES" ]; then

			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for=1&enable_automation=1&parallel_deploy_for_diff_buildtypes=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for=1&enable_automation=1&parallel_deploy_for_diff_buildtypes=1"

		elif [ ! -z "${SD_PARALLEL_DEPLOY}" -a ! -z "${SD_ENABLE_AUTOMATION}" ]; then
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for=1&enable_automation=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for=1&enable_automation=1"

		elif [ ! -z "${SD_PARALLEL_DEPLOY_FORDIFF}" -a ${SD_PARALLEL_DEPLOY_FORDIFF} = "YES" ]; then
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for_diff_buildtypes=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}&parallel_deploy_for_diff_buildtypes=1"
		else
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=xxxxxxxxxxxxxx&product=${SD_PROD_NAME}&bType=${SD_BUILD_TYPE}&buildUrl=${DOWNLOAD_BUILD_URL}"

		fi
	fi
	echo "ZohoUpgrade trigger started"
	echo "curl -m 10 ${UPGRADE_URL_LOG}"
	curl -m 10 "${UPGRADE_URL}"
}

CustomWebURLCall() {
	if [ ! -z "${WEBHOOK_URL}" ]; then
		echo "CustomWebURLCall started at : " $(date "+%Y-%m-%d %T")
		if [ ! -z ${WEBHOOK_URL_PARAM} ]; then
			WEBHOOK_CALL_URL="${WEBHOOK_URL}?url=${BLD_URL}&buildlog_id=${WH_BUILD_ID}&${WEBHOOK_URL_PARAM}"
		else
			WEBHOOK_CALL_URL="${WEBHOOK_URL}?url=${BLD_URL}&buildlog_id=${WH_BUILD_ID}"
		fi
		if [ ! -z ${WEBHOOK_BRANCH_NAMES} ]; then
			for wbranch in $(echo ${WEBHOOK_BRANCH_NAMES} | tr "," " "); do
				if [ "${ARG}" = ${wbranch} ]; then
					echo "Custom web url call after build completion... Branch::${wbranch}"
					echo "curl -m 10 ${WEBHOOK_CALL_URL}"
					curl -m 10 "${WEBHOOK_CALL_URL}"
					weburl_status=$(echo $?)
				fi
			done
		else
			echo "Custom web url call after build completion..."
			echo "curl -m 10 ${WEBHOOK_CALL_URL}"
			curl -m 10 ${WEBHOOK_CALL_URL}
			weburl_status=$(echo $?)
		fi
		if [ ${weburl_status} -ne 0 ]; then
			echo "Web url call failed with ${weburl_status} .."
		else
			echo "Web url call function completed ..."
		fi
		echo "CustomWebURLCall Ended at : " $(date "+%Y-%m-%d %T")
	fi
}

zohoUpgrade_Auth() {
	if [ -n "${SD_UPGRADEZIP_NAME}" ]; then
		zohoUpgrade_Auth_common
	fi
	if [ -n "${SD_MULTI_UPGRADEZIP_NAME}" ]; then
		for i in $(echo $SD_MULTI_UPGRADEZIP_NAME | tr "," " "); do
			SD_LOCAL_PRODUCT_NAME=$(echo $i | cut -d ":" -f1)
			SD_UPGRADEZIP_NAME=$(echo $i | cut -d ":" -f2)
			zohoUpgrade_Auth_common
		done
	fi
	sdapi_call_notify_mail "zohoUpgrade_Auth" "localzoho"
}
zohoUpgrade_Auth_common() {
	DOWNLOAD_BUILD_URL=${BLD_URL}/${SD_UPGRADEZIP_NAME}
	if [ "${PRODUCT_NAME}" = "ZOHOLIVESUPPORT" ]; then
		UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1&parallel_products=ZOHOLIVESUPPORT_MOBVTS&parallel_update=1&parallel_deploy_for_diff_buildtypes=1"
		UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=XXXXXX&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1&parallel_products=ZOHOLIVESUPPORT_MOBVTS&parallel_update=1&parallel_deploy_for_diff_buildtypes=1"
	else

		if [ "${PARALLEL_UPDATE_NEEDED}" = "YES" -a ! -z "${SD_PARALLEL_DEPLOY_FORDIFF}" ]; then
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1&parallel_update=1&parallel_deploy_for_diff_buildtypes=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=XXXXX&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1&parallel_update=1&parallel_deploy_for_diff_buildtypes=1"

		elif [ "${PARALLEL_UPDATE_NEEDED}" = "YES" ]; then
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1&parallel_update=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=XXXXX&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1&parallel_update=1"

		elif [ "${PARALLEL_DEPLOY_FOR}" = "YES" ]; then

			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&parallel_deploy_for=1&enable_automation=1&retry=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=XXXXX&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&parallel_deploy_for=1&enable_automation=1&retry=1"

		else
			UPGRADE_URL="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=${sdauthtokenapi}&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1"
			UPGRADE_URL_LOG="https://sd.csez.zohocorpin.com/api/startupgrade?authtoken=XXXXX&product="${SD_LOCAL_PRODUCT_NAME}"&bType=local&buildUrl="${DOWNLOAD_BUILD_URL}"&enable_automation=1&retry=1"

		fi
	fi

	echo "ZohoUpgrade trigger with Auth-token started"
	echo "curl -m 10 ${UPGRADE_URL_LOG}"
	curl -m 10 "${UPGRADE_URL}"
}

sdapi_call_notify_mail() {
	SD_APICALL_ERR_SUBJECT="${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}) SD api call notification ."
	ERROR_SDAPI_MAIL_ID="karthiga.c@zohocorp.com,petchimuthu@zohocorp.com"
	mail -r "integration-team@zohocorp.com" -s "${SD_APICALL_ERR_SUBJECT}" "${ERROR_SDAPI_MAIL_ID}" <<-EOF
		        Dear Team,


		        $1 method is calling for ${PRODUCT_NAME} in $2

	EOF

}

sanityRegressionreport() {
	if [ "${SANITY_REGRESSION_NEEDED}" = "YES" ]; then
		echo "sanityRegressionreport started at : " $(date "+%Y-%m-%d %T")
		echo "Sanity Regression Started"
		echo "rexec ${SANITY_SERVER_AUTH} ${REMOTE_SERVER} ${SAN_EXEC_COMMAND} ${BLD_URL}/ Sanity"
		rexec ${SANITY_SERVER_AUTH} ${REMOTE_SERVER} ${SAN_EXEC_COMMAND} ${BLD_URL}/ Sanity &
		echo "sanityRegressionreport ended at : " $(date "+%Y-%m-%d %T")

	fi
}

callSdApihook() {
	#sdauthtokenval=`eval echo \\${${MODULE_NAME}}`

	if $(echo "$MODULE_NAME" | grep -q "cobbler"); then
		sdauthtokenval=${zorro_cobbler_val}
		echo "cobbler"
	elif $(echo "$MODULE_NAME" | grep -q "puppet\|dc"); then
		sdauthtokenval=${zorro_puppet_val}
		echo "puppet& DC"
	fi

	if [ -n "${sdauthtokenval}" ]; then
		echo "callSdApihook started at : " $(date "+%Y-%m-%d %T")
		if [ "${GROUP_ID}" -eq "25" ]; then
			echo "Zorro Sd Param details1: ${BLD_URL}/${sd_commonzip_name} ${sd_product_name} ${sd_build_type} ${PRODUCT_NAME}_${WH_BUILD_ID} 'zorro-l3-alerts@zohocorp.com'"
			python ${WORK_DIR}/hg_utils/build/sd_api_call.py ${sdauthtokenval} ${BLD_URL}/${sd_commonzip_name} ${sd_product_name} ${sd_build_type} ${PRODUCT_NAME}_${WH_BUILD_ID} "zorro-l3-alerts@zohocorp.com" &
			echo "Zorro SD api call done for SD_PROD_NAME=${sd_product_name} & SD_BTYPE=${sd_build_type}"
		else
			echo "Zorro Sd Param details2: ${BLD_URL}/${sd_commonzip_name} ${sd_product_name} ${sd_build_type} ${PRODUCT_NAME}_${WH_BUILD_ID} 'zorro-l3-alerts@zohocorp.com'"
			python ${WORK_DIR}/hg_utils/build/sd_api_call.py ${sdauthtokenval} ${BLD_URL}/${sd_commonzip_name} ${sd_product_name} ${sd_build_type} ${PRODUCT_NAME}_${WH_BUILD_ID} ${SUCCESS_MAIL_ID} &
			echo "callSdApihook ended at : " $(date "+%Y-%m-%d %T")
		fi
	fi
}

callSecreport() {
	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then

		cd ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		apklist=$(find . -iname "*.apk")
		apklist_count=$(echo $apklist | wc -w)

		if [ $apklist_count = 0 ]; then
			apks_list=$(find . -iname "*.apks")
			commonzip_name=$(echo $apks_list | sed 's/\.\///g' | sed 's/ /,/g')
		else
			commonzip_name=$(echo $apklist | sed 's/\.\///g' | sed 's/ /,/g')

		fi
		cd -
	fi
	#if [ "${GROUP_ID}" -eq "15" -o "${GROUP_ID}" -eq "20" -o "${GROUP_ID}" -eq "21" ]
	#then
	#        cd ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
	#        ziplist=`find . -iname "*.zip"`
	#        commonzip_name=`echo $ziplist | sed 's/\.\///g' | sed 's/ /,/g'`
	#        cd -
	#fi

	if [ "$SECURITY_REPORTS_NEEDED" = "TRUE" ]; then
		SEC_REPORT_PRODUCTS="ZOHOLOGSERVER MICKEYLITE DEVICE_MGMT_FRAMEWORK MDM MDMP SASLITE DESKTOPCENTRAL CMTOOLS_IOS RECORDS"
		SEC_REPORT_PRODUCT_SEARCH=$(echo ${SEC_REPORT_PRODUCTS} | grep -w "${PRODUCT_NAME}")
		SECURITY_FLAG="TRUE"
	elif [ "${BUILD}" = "CI" -a "${PRODUCT_ID}" != "516" ]; then
		SEC_REPORT_PRODUCTS="ZOHOLOGSERVER MICKEYLITE DEVICE_MGMT_FRAMEWORK MDM MDMP SASLITE DESKTOPCENTRAL CMTOOLS_IOS RECORDS"
		SEC_REPORT_PRODUCT_SEARCH=$(echo ${SEC_REPORT_PRODUCTS} | grep -w "${PRODUCT_NAME}")
		SECURITY_FLAG="TRUE"
	fi
	if [ "${GROUP_ID}" = "16" -o "${GROUP_ID}" = "18" ]; then
		SECURITY_FLAG="TRUE"
	fi
	if [ "${SECURITY_REPORTS_NEEDED}" = "TRUE" -a "${GROUP_ID}" = "5" ]; then
		SECURITY_FLAG="TRUE"
	fi
	if [ "${SECURITY_REPORTS_NEEDED_BY_DEFAULT}" = "YES" ]; then
		SECURITY_FLAG="TRUE"
	fi
        if [ "${PRODUCT_NAME}" = "BUILD_SERVER" ]
        then
               cmtoolsnewapi_domain_name="http://integ-bm14.csez.zohocorpin.com:8095/"
        fi
	if [ "${SECURITY_FLAG}" = "TRUE" ]; then
		ORIG=$IFS
		IFS=,
		if [ "${GROUP_NAME}" = "ZOHO" -o "${GROUP_NAME}" = "ZOHO_ANDROID" -o "${GROUP_NAME}" = "ME_ANDROID" -o "${GROUP_NAME}" = "WEBNMS_ANDROID" -o "${GROUP_NAME}" = "ME" -o "${GROUP_NAME}" = "ZOHO_ELECTRON" -o "${GROUP_NAME}" = "FRAMEWORK" -o "${GROUP_NAME}" = "INTEG" -o "${GROUP_NAME}" = "OPENSOURCE" -o "${GROUP_NAME}" = "THIRDPARTY" ]; then
			echo "posting data started"
			BUILD_URL=${BLD_URL}/${productname}.zip
			SOURCE_ZIP="${commonzip_name}"
			echo "Post URL"
			echo "${cmtoolsnewapi_domain_name}/api/v1/hacksaw?build_url=${BUILD_URL}"
			nohup curl -m 10 -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --insecure "${cmtoolsnewapi_domain_name}/api/v1/hacksaw?build_url=${BUILD_URL}" >> ${LOGS_DIR}/hacksaw_response.log
			echo "posting data completed"
		fi
		IFS=$ORIG
	fi
}

callMESecreport() {
	if [ "$SECURITY_REPORTS_NEEDED" = "TRUE" ]; then
		ME_SEC_URL="http://jarviss/api/build?action=analyse"
		curl --request POST --url "${ME_SEC_URL}" --header "cache-control: no-cache" --header "content-type: multipart/form-data" --form "product=${PRODUCT_ID}" --form "rules=[ALL]" --form "url=${BLD_URL}" --form "mail=${SUCCESS_MAIL_ID}"

		if [ $? -ne 0 ]; then
			mail -r "${ERROR_NOTIFY_MAIL_ID}" -s "Problem in security report generation" "security-audit-notify@zohocorp.com" <<-EOF

				                        Dear Team,

				                        There is some issue in security report generation ..

				                        Kindly check the same ..

				                        Build Url : ${ME_SEC_URL}

				                        Thanks & Regards,
				                        Integration Team
			EOF

		fi
	fi
}

post_buildURL() {
	echo "post_buildURL started at : " $(date "+%Y-%m-%d %T")
	export BUILD_LABEL
	export BLD_URL
	export BUILD_STATUS
	export BUILD_DURATION
	export BUILD_STARTED
	export BUILD_ENDED
	if [ -n "${POST_URL}" ]; then
		if [ -n "${POST_BRANCH}" ]; then
			for branchname in $(echo ${POST_BRANCH} | tr "," " "); do
				if [ "${branchname}" = "${ARG}" ]; then
					posturl
				fi
			done
		else
			posturl
		fi
	fi
	teamSpecificposturl
	echo "post_buildURL ended at : " $(date "+%Y-%m-%d %T")
}
posturl() {
	BUILD_URL=${URL}/${BUILD_DLOAD_DIR}
	POSTBUILD_URL=${POST_URL}${BUILD_URL}
	echo "POSTBUILD_URL=${POST_URL}${BUILD_URL}"
	echo "curl -m 10 ${POSTBUILD_URL}"
	echo "posing data started"
	curl -m 10 ${POSTBUILD_URL}
	echo "posing data started"
}

clientside_framework() {
	echo "clientside_framework started at : " $(date "+%Y-%m-%d %T")
	client_pkg_txt=${HOME}/WH_DIR/${CUR_DATE}/client_pkg.txt
	if [ ! -f "" ]; then
		touch ${HOME}/WH_DIR/${CUR_DATE}/client_pkg.txt
	fi

	cd ${SOURCE_BASE_DIR}
	local_dir_path="WebContent jsapps webapps"
	for i in $(echo $local_dir_path); do
		lyte=$(egrep -Riw 'Lyte.Component|Lyte.Router' echo $i)
		if [ -z $lyte ]; then
			val="lyte package not avialble"
		else
			echo "PRODUCT_NAME=${PRODUCT_NAME}:BRANCH_NAME=${ARG}:Pkg_Details:LYTE" >>${client_pkg_txt}
			echo "-------" >>${client_pkg_txt}
		fi
		react=$(egrep -Riw 'react|redux|react-dom' echo $i)
		if [ -z $react ]; then
			val_re="react package not avialble"
		else
			echo "PRODUCT_NAME=${PRODUCT_NAME}:BRANCH_NAME=${ARG}:Pkg_Details:REACT" >>${client_pkg_txt}
			echo "-------" >>${client_pkg_txt}
		fi
		angular_2=$(egrep -Riw '@angular/core|@angular' echo $i)
		if [ -z $angular_2 ]; then
			val_ang_2="anguler_js_2 package not avialble"
		else
			echo "PRODUCT_NAME=${PRODUCT_NAME}:BRANCH_NAME=${ARG}:Pkg_Details:Angular" >>${client_pkg_txt}
			echo "-------" >>${client_pkg_txt}
		fi
		anguler_js=$(egrep -Riw 'angular.module|ng-app' echo $i)
		if [ -z $anguler_js ]; then
			val_ang="anguler_js package not avialble"
		else
			echo "PRODUCT_NAME=${PRODUCT_NAME}:BRANCH_NAME=${ARG}:Pkg_Details:Angular2" >>${client_pkg_txt}
			echo "-------" >>${client_pkg_txt}
		fi
	done
	echo "clientside_framework ended at : " $(date "+%Y-%m-%d %T")

}
fontCheck() {
	echo "fontCheck started at : " $(date "+%Y-%m-%d %T")
	###font_file_txt="${HOME}/Font_details.txt"
	font_file_txt=$1
	cd ${WORK_DIR}
	pattern_match="Arial Verdana Helvetica Gothic Century DIN Avenir Antiqua Impact Calibri Cambria Tahoma Wingdings Comic"
	for pattern in $(echo ${pattern_match}); do

		FILE_LIST=$(find . -iname "*${pattern}*.*" | grep -iEv "\.m|\.h|\.sh|\.java|\.jsp|\.xml|\.png|\.img|\.swift|\.strings|ProximaNova|\.sample|\.h|\.m|.xib|\.storyboard|\.plist|\.pdf|\.jpg|\.tiff|\.c|\.C|\.entitlements|\.pch|\.jpeg|\.json|\.sh|\.xcconfig|\.xcscheme|\.ics|\.provisionprofile|\.doc|\.dat|\.nib|\.gif|\.svg|\.txt|\.xccheckout|\.js|\.css|\.zip|\.properties|\.kt|\.pro|\.keystore|\.webp|\.jar|\.store|\.launch|\.imageset|\.xcassets|\.vcxproj|\.ds|\.ftl|\.sln|\.less|\.dll|\.nse|\.so|\.rb|\.xsd|\.py|\.pyc|\.wav|\.scss|\.vbs|\.bat|\.ism|\.out|\.frm|\.ibd|\.rul|\.frx|\.vbw|\.fla|\.yml|\.scala|\.pod|\.log|\.tcl|\.rdb|\.pug|\.gyp|\.node")

		if [ "${FILE_LIST}" != "" ]; then
			echo "PRODUCT_NAME=${PRODUCT_NAME}" >>${font_file_txt}
			echo "   " >>${font_file_txt}
			echo "File_List=${FILE_LIST}" >>${font_file_txt}
			echo "-------" >>${font_file_txt}

			fontlist=$(echo $FILE_LIST | egrep "eot|otf|ttf|woff|eoff")
			if [ "${fontlist}" != "" ]; then
				font_check_notify_mail
			fi

			##updateBuildErrorStatus "The build has been stopped due to font check violation"
			##exit 1
		fi
		logTime "eot|ttf|woff|eoff font check" "Ended"

	done
	echo "fontCheck ended at : " $(date "+%Y-%m-%d %T")

}

font_check_notify_mail() {
	TTF_FONT_ERR_SUBJECT="${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}) Build Stopped - Due to mono type font usage"
	ERROR_TTF_FONT_MAIL_ID="cm-notify@zohocorp.com"
	mail -r "integration-team@zohocorp.com" -s "${TTF_FONT_ERR_SUBJECT}" "${ERROR_TTF_FONT_MAIL_ID}" <<-EOF
		        Dear Team,

		        The build has been stopped due to below listed Font file is available ,

			${FILE_LIST}

		        Please remove the same and try to put webhost build.

		        Kindly get back to us for further support in this regard.

		        Thanks & Regards,
		        Integration Team
	EOF

}

replaceMacPkgPasswdProperty() {
	### _macpkg_passwd template removal changes started
	ant_prop_files=$(find ${SOURCE_BASE_DIR} -iname "ant.properties" | tr "\n" " ")
	if [ "${ant_prop_files}" != "" ]; then
		perl -w -e "s@^(.*)_macpkg_passwd=(.*)@#@@g" -p -i ${ant_prop_files}
	fi
	### _macpkg_passwd template removal changes ended
}

getbowerDepdencyDetails() {
	cd ${SOURCE_BASE_DIR}/
	bower_det_json=$(find -iname "bower.json")
	if [ $? -eq 0 ]; then
		echo "getbowerDependency Details process started at : " $(date "+%Y-%m-%d %T")
		for i in $(echo $bower_det_json); do
			cat $i | grep "${http_domain_name}" | grep -iEv '#' >bower_lyte_module.txt
			rem_space=$(cat bower_lyte_module.txt | tr -d "[:space:]")
			echo $rem_space | sed 's@"@@g' | sed 's@:http@=http@g' | sed 's@,@\n@g' | sed 's@zip@zip<br>@g' >>lyte_zip_details.txt
		done
		echo "getbowerDependency Details process ended at : " $(date "+%Y-%m-%d %T")
	fi
	cd -

}

replaceNPMRegistryURL() {
	cd ${SOURCE_BASE_DIR}/
	echo "Registry URL Grep Command Started at $(date) "
	file_list="$(grep -Erl "(http://cm-npmregistry|http://cm-npmregistry.csez.zohocorpin.com|http://integ-docker:4873|http://integ-docker.csez.zohocorpin.com:4873|http://integ-docker1|http://integ-docker1.csez.zohocorpin.com)" | grep -Ev "(log|xml|node_modules)" | sed ':a;N;$!ba;s/\n/ /g')"
	echo "Grep Result ${file_list}"
	if [ -n "${file_list}" ]; then
		echo "File List is Not Empty, Hence started the NPM Registry replacement process."
		sed -i "s@http://cm-npmregistry@https://cm-npmregistry.csez.zohocorpin.com@g" ${file_list}
		sed -i "s@http://cm-npmregistry.csez.zohocorpin.com@https://cm-npmregistry.csez.zohocorpin.com@g" ${file_list}
		sed -i "s@http://integ-docker:4873@https://cm-npmregistry.csez.zohocorpin.com@g" ${file_list}
		sed -i "s@http://integ-docker.csez.zohocorpin.com:4873@https://cm-npmregistry.csez.zohocorpin.com@g" ${file_list}
		sed -i "s@http://integ-docker1@https://cm-npmregistry.csez.zohocorpin.com@g" ${file_list}
		sed -i "s@http://integ-docker1.csez.zohocorpin.com@https://cm-npmregistry.csez.zohocorpin.com@g" ${file_list}
		echo "NPM Registry Replacement proces ended."
	else
		echo "Not Set"
	fi
	echo "Registry URL Grep Command Ended at $(date)"
	cd -
}

get_githgclone_src_changeset() {
	echo "get_gitclone_src_changeset Details process started at : " $(date "+%Y-%m-%d %T")
	clone_txt_file="gitclone.txt,zrepohgclone.txt"
	repochangeset_val=""
	for fle in $(echo $clone_txt_file | tr "," " "); do
		if [ -f "${BUILD_DIR}/$fle" ]; then
			CHANGESET_VALUES=""
			chang_val=$(cat ${BUILD_DIR}/$fle | grep -i "CLONE_CHANGESET" | cut -d "=" -f2)
			if [ -n "$chang_val" ]; then
				for fle_val in $chang_val; do
					api_mod_name=$(echo $fle_val | cut -d ":" -f1)
					SUB_API_PRD_NAME=$(curl -k -X GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${cmtools_domain_name}/api/v1/products?module_name=${api_mod_name}" | cut -d ":" -f4 | cut -d "," -f1 | sed -e s@\"@@g)
                                        if [ -n "${SUB_API_PRD_NAME}" ]
                                        then
					    fle_prd=$(echo $fle_val | sed s@${api_mod_name}@${SUB_API_PRD_NAME}@g)
					    repochangeset_val=$(echo $fle_prd),$repochangeset_val
                                        else
                                            echo "CMTools product configuration not available for the sub-product cloned through ant script so respective entry not added in SOURCE_CHANGESET_VALUE"
                                        fi

				done
			fi
		fi

	done
	if [ ! -z $repochangeset_val ]; then
		CHANGESET_VALUES="${repochangeset_val},${CHANGESET_VALUES}"
		CHANGESET_VALUES="$(echo ${CHANGESET_VALUES} | sed 's/,*$//g')"
		echo $CHANGESET_VALUES

	fi
	echo "get_gitclone_src_changeset Details process ended at : " $(date "+%Y-%m-%d %T")
}

androidBBCheck() {
	echo "Android Maven URL Check Strated ..."
	jitpack_line_matches=$(grep -irl "jitpack.io" ${WORK_DIR}/${PRODUCT_NAME}_DBUILD | grep -v ".sh" 2>/dev/null | sort -u)
	allProject_result=$(androidDepURLMatch "allprojects")
	buildScript_result=$(androidDepURLMatch "buildscript")
	androidScript_result=$(androidDepURLMatch "android")

	if [ ! -z "${allProject_result}" -o ! -z "${buildScript_result}" -o ! -z "${androidScript_result}" ]; then
		echo -e "${allProject_result} ${buildScript_result} ${androidScript_result}" >${WORK_DIR}/${PRODUCT_NAME}_DBUILD/build/build.log
		errormail
		updateBuildErrorStatus "The build has been stopped due to jitpack.io url not placed at end of gradle file."
		exit 1
	fi
	echo "Android Maven URL Check Ended ..."
}

androidDepURLMatch() {
	string_match="${1}"
	for mline in $(echo "${jitpack_line_matches}"); do
		if [ ${string_match} = "android" ]; then
			allproj_match=$(grep -zPo 'android (\{([^{}]++|(?1))*\})' $mline | tr -cd '\11\12\15\40-\176' | grep -zPo 'repositories (\{([^{}]++|(?1))*\})' | tr -cd '\11\12\15\40-\176' | grep -iw "url" | grep "jitpack.io" >/tmp/allproj.txt)
		else
			allproj_match=$(grep -zPo ''${string_match}' (\{([^{}]++|(?1))*\})' $mline | tr -cd '\11\12\15\40-\176' | grep -iw "url" | grep "jitpack.io" >/tmp/allproj.txt)
		fi
		if [ -s /tmp/allproj.txt ]; then
			if [ ${string_match} = "android" ]; then
				endline_match=$(grep -zPo ''${string_match}' (\{([^{}]++|(?1))*\})' $mline | tr -cd '\11\12\15\40-\176' | grep -zPo 'repositories (\{([^{}]++|(?1))*\})' | tr -cd '\11\12\15\40-\176' | grep -iw "url" | awk '/./{line=$0} END{print line}' | grep "jitpack.io")
				fout_last_occurrence=$(grep -zPo ''${string_match}' (\{([^{}]++|(?1))*\})' $mline | tr -cd '\11\12\15\40-\176' | grep -zPo 'repositories (\{([^{}]++|(?1))*\})' | tr -cd '\11\12\15\40-\176' | tr -d '{}' | sed '$d' | awk '/./{line=$0} END{print line}' | grep 'google()\|mavenCentral()\|jcenter()' | tr -d '\t' | tr -d ' ')
			else
				endline_match=$(grep -zPo ''${string_match}' (\{([^{}]++|(?1))*\})' $mline | tr -cd '\11\12\15\40-\176' | grep -iw "url" | awk '/./{line=$0} END{print line}' | grep "jitpack.io")
				fout_last_occurrence=$(grep -zPo ''${string_match}' (\{([^{}]++|(?1))*\})' $mline | tr -cd '\11\12\15\40-\176' | tr -d '{}' | sed '$d' | awk '/./{line=$0} END{print line}' | grep 'google()\|mavenCentral()\|jcenter()' | tr -d '\t' | tr -d ' ')
			fi

			duplicated_lines=$(cat /tmp/allproj.txt | wc -l)
			if [ ${duplicated_lines} -gt 1 ]; then
				duplicated_files="${duplicated_files}\njitpack.io url duplicated ${duplicated_lines} times inside ${string_match} {} in $mline file. Delete duplicate entry and then try build."
			elif [ -z "${endline_match}" ]; then
				endline_result="${endline_result}\njitpack.io url not at end of the ${string_match} function in $mline file, kindly add at end and try a build."
			elif [ "${fout_last_occurrence}" != "" ]; then
				last_occurrence_result="${last_occurrence_result}\n$fout_last_occurrence found as last occurrence of ${string_match} function in $mline file, kindly move it to top and jitpack.io should be at end."
			fi
		fi
	done
	matched_string_result="${duplicated_files}${endline_result}${last_occurrence_result}"
	echo "${matched_string_result}"
}

buildProject() {
	sed -i "s@https://build.zohocorp.com/@http://build/@g" `find ${WORK_DIR}/${PRODUCT_NAME}_DBUILD/ -type f -iname "bower.json"`
	docker_pull
	docker_save_tar
	getbowerDepdencyDetails
	#replaceNPMRegistryURL

	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		androidBBCheck
		IS_ANDROID_BUILD="YES"
	fi

	#replaceUrls "pre"
	#replaceMacPkgPasswdProperty
	###fontCheck ${HOME}/Font_preBuild.txt
	###fontCheck ${WORK_DIR}/Font_preBuild.txt
	#createTempDload
	if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
		GIT_PROJ_CLONE_TIME=$(cat ${CRON_BLD_TIME_FILE} | grep "Total Cloning" | awk -F " " '{print $NF}' | sed "s@\(.*\)min\(.*\)@\1@g")
		if [ "${GIT_PROJ_CLONE_TIME}" -gt "3" ]; then
			mail -r "integration-team@zohocorp.com" -s "Clone time is exceeded for ${ARG} of ${PRODUCT_NAME}" "petchimuthu@zohocorp.com,cjayaprakash@zohocorp.com,karthiga.c@zohocorp.com,kaleeswaran.n@zohocorp.com,arunkumar.arumugam@zohocorp.com,${SUCCESS_MAIL_ID},${ERROR_MAIL_ID}" <<-EOF
				Dear Team,

				Clone time is more than 3 mins for ${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}) ...

				Please take care ...

				Thanks & Regards,
				Integration-Team
			EOF
		fi
	fi

	cd ${BUILD_DIR}
	if [ "${PRODUCT_NAME}" = "ZOHOCRM" ]; then
                echo "Invoking replaceTPComponentsBuildUrl method for [${PRODUCT_NAME}]..."
		replaceTPComponentsBuildUrl
	fi
        if [ ! -f "${CONF_DIR}/patch_build.properties" -a "${BUILD_TASKS}" == "JAVA_JSP" ]; then
                cp -fv ${WORK_DIR}/hg_utils/build/patch_build.properties ${CONF_DIR}/patch_build.properties
                cp -fv ${WORK_DIR}/hg_utils/build/update.sh ${CONF_DIR}/
        fi
	if [ -f "${CONF_DIR}/patch_build.properties" -a "${PREV_DBUILD_URL}" != "" ]; then
		if [ "${PRODUCT_NAME}" = "ZOHODESK" -a "${BUILD_TASKS}" = "JAVA_JSP_DEV" ]; then
			#getModifiedSource
			source ${CONF_DIR}/buildmergecheck.conf
			if [ "${IS_ENABLE_PARTIAL_BUILD}" = "YES" ]; then
				echo "Patch build calling"
				getModifiedsource_api
			fi
		else
			if [ "${BUILD_TASKS}" = "JAVA_JSP" ]; then
				echo $PRE_BUILD_CHANGESET
				getModifiedsource_api $PRE_BUILD_CHANGESET
			fi

		fi

		#getModifiedSource
		if [ "${BUILD_TASKS}" = "JAVA_JSP" ]; then
			cp -f ${CONF_DIR}/patch_build.properties ${BUILD_DIR}/ant.properties
			cp -f ${CONF_DIR}/update.sh ${BUILD_DIR}/
			cp -f ${CONF_DIR}/patch.conf ${BUILD_DIR}/
			pre_dir_path=$(dirname $PREV_DBUILD_URL)
			BUILD_OPTS="${BUILD_OPTS} -Dtarget=target -Dprev_build_url=${PREV_DBUILD_URL} -Dprev_build_dir_path=${pre_dir_path}"
		fi

		if [ "${BUILD_TASKS}" = "JAVA_JSP" -a "${PATCH_BUILD_SRC_COMPILATION}" = "FULL" ]; then
			echo "Patch build full source compilation.."
			rm -rf ${SOURCE_BASE_DIR}/source
			mv ${WORK_DIR}/PATCH_SRC_TEMP/source ${SOURCE_BASE_DIR}
		fi

	fi
	#if [ -f "${HOME}/downloads/jdk_ant.txt" ]
	#then
	#       echo "${PRODUCT_NAME}:${ARG}:${WH_BUILD_ID}:${JAVA_HOME}:${ANT_HOME}" >> ${HOME}/downloads/jdk_ant.txt
	#fi

	utility_check=$(grep -r "cmtp_hgroot" ${BUILD_DIR}/ant.properties | grep -v "#")
	if [ "${utility_check}" != "" ]; then
		cp -rf ${HOME}/REPOSITORY/utility_packages/** ${WORK_DIR}/${CHECKOUT_DIR}/build/${BUILD_BASE_DIR}

	fi

	sed -i "s@\${env.JAVA_HOME}@${JAVA_HOME}@g" ${BUILD_DIR}/ant.properties
	sed -i "s@\${env.ANT_HOME}@${ANT_HOME}@g" ${BUILD_DIR}/ant.properties
	if [ "${PRODUCT_NAME}" = "ZOHOREPOSITORY_MIGRATION" ]; then
		sed -i "s@<PRIVATE_TOKEN>@${GIT_WGET_PRIVATE_TOKEN}@g" ${BUILD_DIR}/../scripts/get_project_members.py
		sed -i "s@<HG_PRIVATE_TOKEN>@${CMSUITE_PRIVATE_TOKEN}@g" ${BUILD_DIR}/../scripts/get_project_members.py
		sed -i "s@<CMTOOLS_PRIVATE_TOKEN>@${PRIVATE_TOKEN}@g" ${BUILD_DIR}/../scripts/get_project_members.py
	fi
	if [ "${PRODUCT_NAME}" = "CONFIGTOOL" ]; then
		sed -i "s@<DB_HOST>@${CM_DB_HOST}@g" ${BUILD_DIR}/../config/database.yml
		sed -i "s@<DB_PASSWORD>@${CM_DB_PASSWORD}@g" ${BUILD_DIR}/../config/database.yml
		sed -i "s@<DB_USERNAME>@${CM_DB_USERNAME}@g" ${BUILD_DIR}/../config/database.yml
	fi
	echo " " >>${CONF_DIR}/${CONF_FILE_NAME}
	echo "BUILD_OPTS=\"${BUILD_OPTS}\"" >>${CONF_DIR}/${CONF_FILE_NAME}
	echo "BUILD_FUNCTION=\"${BUILD_FUNCTION}\"" >>${CONF_DIR}/${CONF_FILE_NAME}
	echo "CHOOSE_BUILD_TYPE=\"${CHOOSE_BUILD_TYPE}\"" >>${CONF_DIR}/${CONF_FILE_NAME}
	echo "BUILD_TASKS=\"${BUILD_TASKS}\"" >>${CONF_DIR}/${CONF_FILE_NAME}
	echo "IMAGE USED FOR BUID IS ${IMAGE_NAME}"
	getmachineTime="$(date "+%Y-%m-%d %T %Z")"
	build_gettime_file=${WORK_DIR}/gettime.txt
	touch ${WORK_DIR}/gettime.txt

	DEFAULT_PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin

	BUILD_SCRIPT="sh ${WORK_DIR}/hg_utils/build/createDockerBuild.sh ${CONF_DIR}/${CONF_FILE_NAME} ${ARG} ${WH_BUILD_ID} ${build_info_file} ${getmachineTime} ${build_gettime_file} ${WORK_DIR}/hg_utils/build > build.log 2>&1"
	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		PATH=${TEAM_BUILD_ENVIRONMENT_PATH}:$DEFAULT_PATH:$ANDROID_HOME:/etc/ansible_downloads/android/android-sdk-linux_x86/tools/:$JFLEX_PATH/bin:$FLUTTER_HOME/bin
		BUILD_ENVIRONMENT="-e ANDROID_HOME="/etc/ansible_downloads/android/android-sdk-linux_x86/" -e ANDROID_USER_HOME="/etc/ansible_downloads/android/android-sdk-linux_x86/" -e ANDROID_NDK_HOME="/etc/ansible_downloads/android-ndk-r21/" -e FLUTTER_HOME="/etc/ansible_downloads/android/flutter/" "
        elif [ "${GROUP_ID}" -eq "30" ]
        then
               PATH=${TEAM_BUILD_ENVIRONMENT_PATH}:$DEFAULT_PATH:/usr/java/zulujdk11.41.23/bin:/usr/ant/apache-ant-1.10.5/bin
               BUILD_ENVIRONMENT="-e JAVA_HOME="/usr/java/zulujdk11.41.23" -e ANT_HOME="/usr/ant/apache-ant-1.10.5" "
	else
		PATH=$DEFAULT_PATH:${TEAM_BUILD_ENVIRONMENT_PATH}
	fi

	BUILD_ENVIRONMENT="-v /etc/localtime:/etc/localtime:ro ${BUILD_ENVIRONMENT} ${TEAM_BUILD_ENVIRONMENT} -e PATH=${PATH} --log-driver none -v /zoho/build/downloads/resolv.conf:/etc/resolv.conf:ro -v /zoho/build/downloads/bowerrc:/.bowerrc:ro -v /zoho/build/downloads/static_reference/nexusMaven:/root/nexusMaven:ro -v /zoho/build/downloads/.env.conf:/zoho/build/downloads/.env.conf:ro -v /zoho/build/downloads/static_reference/nexusMaven/mavenSettings/settings.xml:/root/.m2/settings.xml:ro -v /zoho/build/downloads/static_reference/nexusMaven/mavenSettings/settings-security.xml:/root/.m2/settings-security.xml:ro -v /zoho/build/downloads/static_reference/cm_static_ref/gradle.properties:/root/.gradle/gradle.properties:ro "

	if [ "${PRODUCT_NAME}" = "DEVICE_AUTH_GO" -o "${PRODUCT_NAME}" = "PILOT_NGINX" -o "${PRODUCT_NAME}" = "EBPF_AGENT" -o "${PRODUCT_NAME}" = "POSTGRES" -o "${PRODUCT_NAME}" = "SITE24X7_HELP" -o "${PRODUCT_NAME}" = "ZOHOCRM" -o "${PRODUCT_NAME}" = "DISTRIBUTEDDB" -o "${PRODUCT_NAME}" = "ZCAL_WEB_CLIENT" -o "${PRODUCT_NAME}" = "EXTENSIONS_BUILDER" -o "${PRODUCT_NAME}" == "ZOHOPAGES" ]; then
		BUILD_ENVIRONMENT="${BUILD_ENVIRONMENT} --security-opt seccomp:unconfined"
	fi
	if [ "${PRODUCT_NAME}" = "JETTY" -o "${PRODUCT_NAME}" = "TOMCAT_NATIVE" -o "${PRODUCT_NAME}" = "ZOHO_CONFERENCING" -o "${PRODUCT_NAME}" = "ZPHOTOS" -o "${PRODUCT_NAME}" = "CRMINTELLIGENCEPY" ]; then
		BUILD_ENVIRONMENT="${BUILD_ENVIRONMENT} --privileged"
	fi
        if [ "${PRODUCT_NAME}" = "ZOHOREPOSITORY_TPCOMPONENTS" ]
        then
               BUILD_ENVIRONMENT="${BUILD_ENVIRONMENT} --net=host"
        fi
	jdk_prd_status=$(cat ${WORK_DIR}/hg_utils/build/JDK_CONTAINER_PRD_DETAILS.txt | grep -w "${PRODUCT_NAME}")
	if [ $? -eq 0 ]; then
		JDKANT_SHARED_VARIABLE=" --volumes-from=jdk "
	else
		JDKANT_SHARED_VARIABLE=" -v /zoho/build/downloads/ant/:/usr/ant/:ro -v /zoho/build/downloads/java/:/usr/java/:ro -v /zoho/build/downloads/protobuf:/usr/protobuf:ro -v /zoho/build/downloads/gradle:/usr/gradle:ro -v /zoho/build/downloads/maven:/usr/maven:ro -v /zoho/build/downloads/node:/usr/node:ro -v /zoho/build/downloads/go:/usr/go:ro -v /zoho/build/downloads/uglifyjs:/usr/uglifyjs:ro -v /zoho/build/downloads/flutter:/usr/flutter:ro -v /zoho/build/downloads/aspectj:/usr/aspectj:ro"
	fi

	if [ -z "${BUILD_RETRY}" ]; then
		CONTAINER_NAME="${PRODUCT_NAME}_${WH_BUILD_ID}"
	else
		CONTAINER_NAME="${PRODUCT_NAME}_${WH_BUILD_ID}_${RETRY_COUNT}"
		if [ -f ${BUILD_DIR}/build.log ]; then
			#Renaming the last generated build.log with retry count
			mv ${BUILD_DIR}/build.log ${LAST_BUILD_LOG_FILE}
			sed -i 's@custom_library.xml@custom_library_1.xml@g' ${BUILD_DIR}/build.xml
		fi
	fi

	echo "${CONTAINER_NAME}" >>${LOGS_DIR}/container_name.txt
	if [ ! -z "${TEAM_WORK_DIR}" ]; then
		BLD_DIR=${TEAM_WORK_DIR}
	else
		BLD_DIR=${BUILD_DIR}
	fi
	if [ -n "${CEPH_URL_MATCH}" ]; then
		CEPH_SHARED_FOLDER=" -v /zoho/build/downloads:/zoho/build/downloads:ro "
	fi
	if [ "${DOCKER_USER}" = "" ]; then
		DOCKER_USER="root"
	fi
	dockerCommandAvailable=$(grep -irw "sudo docker run\|docker run" $BLD_DIR/ | grep -v "hg_utils")
	echo "--------------------------"
	if [ -n "$dockerCommandAvailable" ]; then
		echo "Docker-In-Docker Available. So, userID and groupID mapping disabled it."
	else
		echo "Docker-In-Docker Not Available. Hence, userID and groupID mapping enabled."
	fi
	#USERMAP_UID=$(id -u build)
	#USERMAP_GID=$(id -u build)
	#DOCKER_USERID_OPTS=" --user ${USERMAP_UID}:${USERMAP_GID} "
	echo "--------------------------"

	jdk_container_status=$(sudo docker ps | grep -i "jdk")
	if [ -z "$jdk_container_status" ]; then
		JDKANT_SHARED_VARIABLE="-v /zoho/build/downloads/ant/:/usr/ant/:ro -v /zoho/build/downloads/java/:/usr/java/:ro -v /zoho/build/downloads/protobuf:/usr/protobuf:ro -v /zoho/build/downloads/gradle:/usr/gradle:ro -v /zoho/build/downloads/maven:/usr/maven:ro -v /zoho/build/downloads/node:/usr/node:ro -v /zoho/build/downloads/go:/usr/go:ro -v /zoho/build/downloads/uglifyjs:/usr/uglifyjs:ro -v /zoho/build/downloads/flutter:/usr/flutter:ro -v /zoho/build/downloads/aspectj:/usr/aspectj:ro"
	fi
	if [ -n "${TEAM_SPECIFIC_AUCONFIG_FOLDER}" ]; then
		AUTH_CONFIGURATION_FILE=" -v /zoho/build/downloads/.netrc:/.netrc:ro -v /zoho/build/downloads/.netrc:/root/.netrc:ro -v /zoho/build/downloads/.hgrc:/.hgrc:ro -v /zoho/build/downloads/.hgrc:/root/.hgrc:ro -v /zoho/build/downloads/.netrc:${TEAM_SPECIFIC_AUCONFIG_FOLDER}/.netrc:ro -v /zoho/build/downloads/integ/aes.jar:/root/integ/aes.jar:ro -v /zoho/build/downloads/static_reference/cm_static_ref:/root/integ/pfx:ro -v /zoho/build/downloads/.wgetrc:/.wgetrc:ro -v /zoho/build/downloads/.wgetrc:/root/.wgetrc:ro "
	else
                if [ "${PRODUCT_NAME}" = "ZOHOREPOSITORY_TPCOMPONENTS" ]; then
                        AUTH_CONFIGURATION_FILE=" -v /zoho/build/downloads/integ/aes.jar:/root/integ/aes.jar:ro -v /zoho/build/downloads/static_reference/cm_static_ref:/root/integ/pfx:ro -v /zoho/build/downloads/.wgetrc:/.wgetrc:ro -v /zoho/build/downloads/.wgetrc:/root/.wgetrc:ro "
                else
		        AUTH_CONFIGURATION_FILE=" -v /zoho/build/downloads/.netrc:/.netrc:ro -v /zoho/build/downloads/.netrc:/root/.netrc:ro -v /zoho/build/downloads/.hgrc:/.hgrc:ro -v /zoho/build/downloads/.hgrc:/root/.hgrc:ro -v /zoho/build/downloads/integ/aes.jar:/root/integ/aes.jar:ro -v /zoho/build/downloads/static_reference/cm_static_ref:/root/integ/pfx:ro -v /zoho/build/downloads/.wgetrc:/.wgetrc:ro -v /zoho/build/downloads/.wgetrc:/root/.wgetrc:ro "
                fi
	fi
	: <<'COMMENT'
	logserver_usage=`cat ${WORK_DIR}/ant.properties | grep -v "#" | sed -e "s@\"@@g" | grep "${http_domain_name}/framework/zohologserver/"`
	logserver_url=""
	if [ -n "${logserver_usage}" ]
	then
            logserver_url=`echo ${logserver_usage} | cut -d "=" -f2`
	fi
	if [ "${PRODUCT_NAME}" = "EAR" ]
	then
            echo "ZohoLogAgent Validation Started" > ${WORK_DIR}/zlogvalidation.log
            error_message=`sh -x  ${WORK_DIR}/hg_utils/build/ZLogAgentValidation.sh ${logserver_url} ${BUILD_BASE_DIR}/ >> ${WORK_DIR}/zlogvalidation.log`
            if [ "${error_message}" = "true" ]
            then
                mail -s "Reg: ZohoLogserver Agent Validation" "kaleeswaran.n@zohocorp.com,${SUCCESS_MAIL_ID},${ERROR_MAIL_ID}" <<-EOF
                        Dear Team,

                        ZohoLogserver Agent Validation failed for  ${ARG} of ${PRODUCT_NAME} (${WH_BUILD_ID}), hence build failed.

                        Kindly check with Logserver Team to suriya.v regarding the build failure.

                        Thanks & Regards,
                        Integration-Team
EOF
            fi
            echo "ZohoLogAgent Validation Ended" >> ${WORK_DIR}/zlogvalidation.log
        fi
COMMENT
	if [ ! -z "$(echo ${TEAM_SPECIFIC_SHARED_FOLDER} | grep -w 'id_rsa')" ]; then
		TEAM_SPECIFIC_SHARED_FOLDER=$(echo ${TEAM_SPECIFIC_SHARED_FOLDER} | sed -e s"@-v /zoho/build/downloads/ssh/id_rsa.pub:/root/.ssh/id_rsa.pub@@g" | sed -e s"@ -v /zoho/build/downloads/ssh/id_rsa:/root/.ssh/id_rsa@@g")
		TEAM_SPECIFIC_SHARED_FOLDER="${TEAM_SPECIFIC_SHARED_FOLDER} -v /zoho/build/downloads/ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro -v /zoho/build/downloads/ssh/id_rsa:/root/.ssh/id_rsa:ro "
	fi

	if [ "${GROUP_ID}" -eq "15" -o "${GROUP_ID}" -eq "20" ]; then
		if [ -z "${TEAM_SPECIFIC_SHARED_FOLDER}" ]; then
			TEAM_SPECIFIC_SHARED_FOLDER="${TEAM_SPECIFIC_SHARED_FOLDER} -v /zoho/build/downloads/ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro -v /zoho/build/downloads/ssh/id_rsa:/root/.ssh/id_rsa:ro "
		fi
	fi
	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		if [ -z "${TEAM_SPECIFIC_SHARED_FOLDER}" ]; then
			TEAM_SPECIFIC_SHARED_FOLDER=" -v /zoho/build/downloads/static_reference/cm-andrd-ref:/root/${WH_BUILD_ID}_ZAND:ro "
		else
			TEAM_SPECIFIC_SHARED_FOLDER="${TEAM_SPECIFIC_SHARED_FOLDER} -v /zoho/build/downloads/static_reference/cm-andrd-ref:/root/${WH_BUILD_ID}_ZAND:ro "
		fi
	fi

	if [ "${PRODUCT_NAME}" = "ZOHOREPORTS" ]; then
		echo "sudo docker run -t -u ${DOCKER_USER} --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT}"
		sudo docker run -t -u ${DOCKER_USER} --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT} >build.log 2>&1
:<<COMMENT
                halt_bool=`cat build.log | grep -E "192.168.112.119:5000"`
            if [ -n "$halt_bool" ]
            then
                    health_script_execution_status=`ps -auwxxx | grep "${docker_health_check}" | grep -v "grep"`
                    if [ $? -ne 0 ]; then
                            result=`sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check`
                    else
                            echo "Docker Registry was down - restart in progress. Please wait for sometime to proceed build process."
                            sleep 10s
                            result=`sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check`
                    fi
                    if [ -n "echo "$result" | grep -iE (HTTP/1.1 200 OK)" ]
                    then
                        echo "Retrying the build by fixing the docker registry issue. `date`"
                        sudo docker run ${BUILD_NETWORK} -t -u ${DOCKER_USER} --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT} >> build.log 2>&1
                    fi
            fi
COMMENT
		#thinpool_status=`cat ${BLD_DIR}/build.log | grep "free data blocks\|use dm.min_free_space" | grep -v "grep"`
		#if [ -n "${thinpool_status}" ]
		#then
		#        status=`ps -auwxx | grep "docker_cleanup.sh" | grep -v "grep"`
		#        if [ ${?} -ne 0 ]
		#        then
		#            sh /zoho/build/downloads/docker_cleanup.sh >> /zoho/build/docker_cleanup.log 2>&1 &
		#        fi
		#        sleep 1m
		#        sudo docker run -t -u ${DOCKER_USER} --name="${CONTAINER_NAME}_RETRY" ${BUILD_ENVIRONMENT} ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT} > build.log 2>&1
		#fi
	else
		if [ "${PRODUCT_NAME}" = "CONFIGTOOL" ]; then
                    ENTRYPOINT=" --entrypoint= "
                fi
		echo "sudo docker run ${ENTRYPOINT} -t -u ${DOCKER_USER} --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} -e TZ="IST" ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT}"
		sudo docker run ${ENTRYPOINT} -t -u ${DOCKER_USER} --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} -e TZ="IST" ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT} >build.log 2>&1
:<<COMMENT
                halt_bool=`cat build.log | grep -E "192.168.112.119:5000"`
            if [ -n "$halt_bool" ]
            then
                    health_script_execution_status=`ps -auwxxx | grep "${docker_health_check}" | grep -v "grep"`
                    if [ $? -ne 0 ]; then
                            result=`sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check`
                    else
                            echo "Docker Registry was down - restart in progress. Please wait for sometime to proceed build process."
                            sleep 10s
                            result=`sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check`
                    fi
                    if [ -n "echo "$result" | grep -iE (HTTP/1.1 200 OK)" ]
                    then
                        echo "Retrying the build by fixing the docker registry issue. `date`"
                        sudo docker run ${BUILD_NETWORK} -t -u ${DOCKER_USER} --rm --name="${CONTAINER_NAME}" ${BUILD_ENVIRONMENT} -e TZ="IST" ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT} > build.log 2>&1
                    fi
            fi
COMMENT
		#thinpool_status=`cat ${BLD_DIR}/build.log | grep "free data blocks\|use dm.min_free_space" | grep -v "grep"`
		#if [ -n ${thinpool_status} ]
		#then
		#        status=`ps -auwxx | grep "docker_cleanup.sh" | grep -v "grep"`
		#        if [ ${?} -ne 0 ]
		#        then
		#            sh /zoho/build/downloads/docker_cleanup.sh >> /zoho/build/docker_cleanup.log 2>&1 &
		#        fi
		#        sleep 1m
		#        sudo docker run -t -u ${DOCKER_USER} --name="${CONTAINER_NAME}_RETRY" ${BUILD_ENVIRONMENT} ${AUTH_CONFIGURATION_FILE} -v ${WORK_DIR}:${WORK_DIR} ${TEAM_SPECIFIC_SHARED_FOLDER} ${CEPH_SHARED_FOLDER} ${JDKANT_SHARED_VARIABLE} -w="${BLD_DIR}" ${IMAGE_NAME} ${BUILD_SCRIPT} > build.log 2>&1
		#fi
	fi
	notifyTPCompilation
	checkTeamSpecificBuildStatus
	if [ -L "${DLOAD_DIRECTORY}/webhost" ]; then
		echo "${DLOAD_DIRECTORY}/webhost is a symlink to a directory"
		if [ ! -d "${DLOAD_DIRECTORY}/webhost" ]; then
			echo "${DLOAD_DIRECTORY}/webhost Directory does not exists. Hence creating it."
			mkdir -p $(readlink -f ${DLOAD_DIRECTORY}/webhost)
		else
			echo "${DLOAD_DIRECTORY}/webhost Directory exists."
		fi
	fi
	get_githgclone_src_changeset
	#if [ "${GROUP_NAME}" != "ME" ]
	#then
	#        integ_storage_Sync "pre" &
	#fi

	if [ ! -d "/zoho/build/downloads/dload/" ]; then
		build_output_Sync "pre"
	fi

}

dockerContainerRemoval() {
	echo "Container Removal started at $(date)"
	if [ -n "${1}" ]; then
		container_id="$(sudo docker ps -q --filter "name=${1}")"
		if [ ! -n "${container_id}" ]; then
			echo "INFO >>>>> ContainerName : ${1} associated with the ContainerID : ${container_id} - Going to be removed."
			sudo docker rm ${1}
			if [ $? -eq 0 ]; then
				echo "INFO >>>>> Container Removal Succeeded"
			else
				echo "INFO >>>>> Problem in Container Removal Process"
			fi
		else
			echo "INFO >>>>> Container ( $1} ) is still alive, so unable to remove the container"
		fi
	else
		echo "INFO >>>>> Container Removal Failed due to the container name passed seems empty."
	fi
	echo "Container Removal ended at $(date)"
}

createTempDload() {
	echo "createTempDload started at : " $(date "+%Y-%m-%d %T")

	mkdir -p ${DLOAD_DIRECTORY}/Running_Builds
	cd ${DLOAD_DIRECTORY}/Running_Builds
	ln -s ${BUILD_OUTPUT} ${BUILDBY}_${WH_BUILD_ID}
	cd -
	echo "createTempDload ended at : " $(date "+%Y-%m-%d %T")

}

notifyTPCompilation() {
	echo "notifyTPCompilation started at : " $(date "+%Y-%m-%d %T")

	tp_cmp_st=$(grep -rl "thirdparty_sources/" ${BUILD_DIR}/buildlogs/compilesrc_*.log)

	if [ "${tp_cmp_st}" != "" ]; then
		echo "${PRODUCT_NAME}:${ARG}:${JAVA_HOME}" >>${WORK_DIR}/tp_source_compilation.txt
	fi
	echo "notifyTPCompilation ended at : " $(date "+%Y-%m-%d %T")

}
createParallelBuildLog() {
	echo "createParallelBuildLog started at : " $(date "+%Y-%m-%d %T")

	if [ -z "$BUILD_PARALLEL_LOG_DIR" ]; then
		if [ "${BUILD_STYLE}" = "PARALLEL" ]; then
			BUILD_LOG_BASE_DIR=${DLOAD_DIRECTORY}/processinfo/${BUILDBY}/${WH_BUILD_ID}
			BUILD_PARALLEL_LOG_DIR=${BUILD_LOG_BASE_DIR}/Build_Log
		fi
	fi
	if [ -d ${BUILD_PARALLEL_LOG_DIR} ]; then
		echo "${BUILD_PARALLEL_LOG_DIR} Directory Exists"
	else
		echo "${BUILD_PARALLEL_LOG_DIR} Directory not Exists . ${BUILD_PARALLEL_LOG_DIR} creation started"
		mkdir -p ${BUILD_PARALLEL_LOG_DIR}
	fi
	BUILD_CRON_LOG_FILE=${BUILD_PARALLEL_LOG_DIR}/cron_process.shtml
	echo "<html>" >${BUILD_CRON_LOG_FILE}
	echo "<head>" >>${BUILD_CRON_LOG_FILE}
	echo "<meta http-equiv=\"refresh\" content=\"1\" >" >>${BUILD_CRON_LOG_FILE}
	echo "</head>" >>${BUILD_CRON_LOG_FILE}
	echo "<body>" >>${BUILD_CRON_LOG_FILE}
	echo "<xmp>" >>${BUILD_CRON_LOG_FILE}
	echo "<!--#exec cmd=\"tail --lines=35 ${STATUS_LOG}\"-->" >>${BUILD_CRON_LOG_FILE}
	echo "</xmp>" >>${BUILD_CRON_LOG_FILE}
	echo "<pre>BUILD COMPILATION LOG LINK IS BELOW: </pre><a href="${BUILD_LOG_URL}" target='_blank'>${BUILD_LOG_URL}</a>" >>${BUILD_CRON_LOG_FILE}
	echo "</body>" >>${BUILD_CRON_LOG_FILE}
	echo "</html>" >>${BUILD_CRON_LOG_FILE}
	if [ -f ${BUILD_CRON_LOG_FILE} ]; then
		echo "${BUILD_CRON_LOG_FILE} Link Exists"
	else
		echo "${BUILD_CRON_LOG_FILE} Link not Exists . ${BUILD_CRON_LOG_FILE} creation started"
		ln -s ${WORK_DIR}/logs/cron_process.shtml ${BUILD_CRON_LOG_FILE}
	fi
	echo "createParallelBuildLog started at : " $(date "+%Y-%m-%d %T")
}
cleanParallelBuildLog() {
	echo "cleanParallelBuildLog started at : " $(date "+%Y-%m-%d %T")

	sudo checkAndCleanDir "${BUILD_LOG_BASE_DIR}"
	echo "cleanParallelBuildLog ended at : " $(date "+%Y-%m-%d %T")
}
setBuildVariables() {
	BLD_NO_FILE="${HOME}/BUILD_DETAILS/.${productname}_builds_no.txt"
	if [ -z "${build_details_txt}" ]; then
		build_details_txt=${productname}.txt
	fi
	build_version_txt=version.txt
	confile=${DLOAD_DIRECTORY}/prod_size.txt
	release_confile=${DLOAD_DIRECTORY}/release.conf
	checkout_log=${LOGS_DIR}/checkout.log
	sub_src_checkout_log=${LOGS_DIR}/sub_src_checkout.log
	tagging_log=${LOGS_DIR}/tagging.log
	removal_log=${LOGS_DIR}/removal.log
	if [ -z "${CHECKOUT_MODULE}" ]; then
		CHECKOUT_MODULE="${MOD_NAME}"
	fi
	if [ -z "${CHECKOUT_DIR}" ]; then
		CHECKOUT_DIR="${PRODUCT_NAME}_DBUILD"
	fi
	SOURCE_BASE_DIR=${WORK_DIR}/${CHECKOUT_DIR}
	BUILD_DIR=${SOURCE_BASE_DIR}/build
	if [ -z "${BUILD_BASE_DIR}" ]; then
		BUILD_BASE_DIR="${BUILD_DIR}/${PRODUCT_NAME}"
	else
		BUILD_BASE_DIR="${BUILD_DIR}/${BUILD_BASE_DIR}"
	fi
	BUILD_OUTPUT=${BUILD_BASE_DIR}/output
	if [ -z "${REPORTS_CONF_FILE}" ]; then
		REPORTS_CONF_FILE=${build_info_file}
	fi
	reports_log=${LOGS_DIR}/reports.log
}
createBlogFile() {
	echo "Create blog started at : " $(date "+%Y-%m-%d %T")

	echo "Module=${PRODUCT_NAME}" >${build_details_txt}
	echo "SourceCoLabel=${ARG}" >>${build_details_txt}
	echo "BuildDate=${TODAY}" >>${build_details_txt}
	echo "BuildTime=${STIME}" >>${build_details_txt}
	echo "BuildLabel=${LABEL}" >>${build_details_txt}
	echo "build-timestamp= $(date +"%s")" >>${build_details_txt}
	if [ -n "${STATICDIR}" ]; then
		echo "STATIC_DIR=${STATIC_DIRNAME}" >>${build_details_txt}
	else
		echo "StaticVersion=${STATIC_DIRNAME}" >>${build_details_txt}

	fi
	echo "Module=${PRODUCT_NAME}" >${build_version_txt}
	echo "BuildLabel=${LABEL}" >>${build_version_txt}
	echo "Build_Number=${WH_BUILD_ID}" >>${build_version_txt}

	if [ -n "${milestone_name_txt}" ]; then
		echo "STATIC_DIR=${STATIC_DIRNAME}" >${milestone_name_txt}
	fi

	echo "Current_Build_Url=${URL}/${BUILD_DLOAD_DIR}" >>${build_details_txt}
	echo "Source_Changeset=${TIP_CHANGESET}" >>${build_details_txt}
	echo "Source_Changeset=${TIP_CHANGESET}" >>${build_version_txt}
	echo "BranchName=${ARG}" >>${build_version_txt}
	echo "BuildType=${BUILD}" >>${build_version_txt}
	echo "Build_Comment=${BUILDCOMMENT}" >>${build_version_txt}
	echo "Build_Comment=${BUILDCOMMENT}" >>${build_details_txt}
	echo "Build_Date=$(date +"%d-%m-%y")" >>${build_version_txt}
	echo "build-timestamp= $(date +"%s")" >>${build_version_txt}
	echo "Current_Build_Url=${URL}/${BUILD_DLOAD_DIR}" >>${build_version_txt}

	if [ ! -z "${STATIC_DIRNAME}" ]; then
		echo "Static_Version=${STATIC_DIRNAME}" >>${build_version_txt}
	fi
	if [ -n "${STATICVERSIONTXT}" ]; then
		echo "STATIC_DIR=${STATIC_DIRNAME}" >>${build_version_txt}
	fi

	if [ "${PATCH_BUILD_ENABLED}" = "YES" ]; then
		echo "PATCH_BUILD_URL=${PREV_DBUILD_URL}" >>${build_version_txt}
		echo "PATCH_BASE_BUILD_CHANGESET=${PREV_SRC_CHANGESET}" >>${build_version_txt}
	fi

	echo "Create blog ended at : " $(date "+%Y-%m-%d %T")
}
createLyteCredJsonFile() {
	cat <<EOF >${WORK_DIR}/${CHECKOUT_DIR}/build/lyte_authtoken.json
{
        "userName" :"${WH_BUILD_ID}",
        "password" :"${LYTE_AUTH_TOKEN}"
}
EOF

}

zohologserver_blog_update() {
	if [ "${PRODUCT_NAME}" = "ZOHOLOGSERVER" -o "${zohologserver_blog_update_needed}" = "yes" ]; then
		echo "zohologserver_blog_update started at : " $(date "+%Y-%m-%d %T")
		cd ${BUILD_OUTPUT}

		ziplist="$(grep -ir 'blog/version.txt' $(find -iname "*.zip"))"
		mkdir temp_build
		for zipfile in $(echo $ziplist | sed "s@matches@@g" | sed "s@Binary file @@g" | sed "s@./@@g"); do
			echo $zipfile
			zip_dirname=$(echo $zipfile | sed "s@.zip@@g")
			zip_dirname_val=$(echo $zipfile | sed "s@.zip@@g" | tr [:lower:] [:upper:])
			unzip -q $zipfile -d ${zip_dirname_val}
			cd ${zip_dirname_val}

			file_path=$(find . -path "*/blog/version.txt")
			echo "name=${zip_dirname_val}" >>$file_path
			zip -r -q ${zip_dirname}.zip .

			cd -
			mv $zipfile temp_build/

			mv ${zip_dirname_val}/${zip_dirname}.zip .
			mv ${zip_dirname_val}/ temp_build/
			rm -rf temp_build/
		done

		cd -
		echo "zohologserver_blog_update ended at : " $(date "+%Y-%m-%d %T")
	fi

}

ubi_files_removal() {
	echo "UBI files removal method  started at : " $(date "+%Y-%m-%d %T")
	if [ -f "UBI_files_to_be_removed.txt" ]; then
		full_cont=$(cat UBI_files_to_be_removed.txt)
		for i in $(echo $full_cont); do
			ubi_files_rm=$(echo $i | grep "${PRODUCT_NAME}" | cut -d ":" -f1)
			if [ ! -z $ubi_files_rm ]; then
				zip_files_rm=$(cat UBI_files_to_be_removed.txt | grep "${PRODUCT_NAME}" | cut -d ":" -f2)
				cont_files_rm=$(cat UBI_files_to_be_removed.txt | grep "${PRODUCT_NAME}" | cut -d ":" -f3)
				echo $cont_files_rm >>${BUILD_OUTPUT}/${zip_files_rm}_files_to_be_removed.txt
			fi

		done
	fi

	echo "UBI files removal method ended at : " $(date "+%Y-%m-%d %T")

}

get_md5_list() {

	all_binary=$(find -maxdepth 1 -type f \( -iname "*.zip" -o -iname "*.exe" -o -iname "*.bin" -o -iname "*.ppm" -o -iname "*.war" -o -iname "*dmg" -o -iname "*.dll" -o -iname "*.tar.gz" \))
	echo "#FILENAME,MD5SUM,SHASUM,DATE&TIME"
	for all_bin in $(echo $all_binary); do
		bin1=$(md5sum $all_bin)
		shasum=$(sha256sum $all_bin | cut -d " " -f1)
		md5=$(echo $bin1 | cut -d " " -f1)
		bname=$(echo $bin1 | cut -d " " -f2 | sed -e "s@./@@g")
		time=$(date "+%Y-%m-%d %T")
		echo $bname","$md5","$shasum","$time

	done

}

copyBuildoutput() {
	perl -w -e "s@https://build-temp:.*@${CLONE_VALUE}@g" -p -i ${WORK_DIR}/logs/checkout.log
	perl -w -e "s@https://build-temp:.*@https://build-temp:XXX@g" -p -i ${WORK_DIR}/logs/submodule_checkout.log

	echo "Get Md5sum started at : " $(date "+%Y-%m-%d %T")
	cd ${BUILD_OUTPUT}
	get_md5_list >>${BUILD_OUTPUT}/md5sum.txt
	cd -
	echo "Get Md5sum ended at : " $(date "+%Y-%m-%d %T")

	ubi_files_removal
	zohologserver_blog_update
	echo "Copy Build output started at : " $(date "+%Y-%m-%d %T")
	if [ "${BUILD}" = "CI" ]; then
		if [ "${PRODUCT_NAME}" = "ZOHOREPOSITORY" ]; then
			realsebuildchk=$(echo $RELEASED_BRANCHES | grep -w "$ARG")
			if [ -n "$realsebuildchk" ]; then
				sed -i "s@REPORT_NEEDED=\"FALSE\"@REPORT_NEEDED=\"true\"@g" ${build_info_file}
				RAND_DIR='${HOME}/REPORTS/'${RAND_PATH}
				REPORT_NEEDED="true"
				export REPORT_NEEDED
			fi
		fi
	fi
	echo ${CONF_FILE}
	sed -i 's@http://sd\/@https://sd.csez.zohocorpin.com\/@g' ${CONF_FILE}
	OUTPUT_COPY_STARTED="$(date "+%Y-%m-%d %T")"
	if [ "${PRODUCT_NAME}" = "OPMUNIFIED" ]; then
		cd ${BUILD_OUTPUT}
		if [ "${Binary_32bit_Zip_Needed}" = "No" -o "${Binary_32bit_Zip_Needed}" = "" ]; then
			find -maxdepth 1 -type f -name "*32bit.zip" -exec rm -f {} \;
			find -maxdepth 1 -type f -name "*32.zip" -exec rm -f {} \;
		fi

		if [ "${ARG}" = "OPMUNIFIED_REVIEWED" -o "${ARG}" = "OPMUNIFIED_SITE24_7_128238_BRANCH_BRANCH" ]; then
			find -maxdepth 1 -type f -name "*_64bit.zip" ! -name "OpManager_OpMPlus_windows_64bit.zip" ! -name "OpManager_OpMPlus_linux_64bit.zip" -exec rm -f {} \;
		else
			find -maxdepth 1 -type f -name "*_64bit.zip" -exec rm -f {} \;
		fi
		find -maxdepth 1 -type f -name "source*.zip" -exec rm -f {} \;
		cd -
	fi
	mkdir -p ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/
	cp -f ${BUILD_DIR}/java_jsp_source.zip ${BUILD_OUTPUT}/java_jsp_source.zip
	cp -f ${BUILD_DIR}/js_source.zip ${BUILD_OUTPUT}/js_source.zip
	cp -f ${BUILD_DIR}/java_jsp_source_post.zip ${BUILD_OUTPUT}/java_jsp_source_post.zip

	if [ -f "${BUILD_OUTPUT}/ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/ROOT.war
	fi

	if [ -f "${BUILD_OUTPUT}/Charm_ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/Charm_ROOT.war
	fi
	if [ -f "${BUILD_OUTPUT}/ehr_ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/ehr_ROOT.war
	fi
	if [ "${PRODUCT_NAME}" != "SASLITE" -a "${PRODUCT_NAME}" != "GAC" -a "${PRODUCT_NAME}" != "DC_CLOUD" ]; then
		if [ -f "${BUILD_OUTPUT}/grid.war" ]; then
			rm -f ${BUILD_OUTPUT}/grid.war
		fi
	fi

	if [ "${BUILD_TASKS}" = "JAVA_JSP" ]; then
		PREV_BUILD_DLOAD_DIR="/zoho/build/downloads/dload/"
		PREV_BUILD_DLOAD_PATH=$(echo ${PREV_DBUILD_URL} | sed "s@${http_domain_name}@${PREV_BUILD_DLOAD_DIR}@g")
		JAVA_JSP_FILE=$(dirname ${PREV_BUILD_DLOAD_PATH})
		if [ -f "${JAVA_JSP_FILE}/java_jsp_source.zip" ]; then
			mv ${BUILD_OUTPUT}/java_jsp_source.zip ${BUILD_OUTPUT}/java_jsp_source_patch.zip
			cp -f ${JAVA_JSP_FILE}/java_jsp_source.zip ${BUILD_OUTPUT}/java_jsp_source.zip
		fi

	fi

	EXC_PRD=$(cat ${WORK_DIR}/hg_utils/build/OS_Specific_zipexclude_products.txt | grep -w "${PRODUCT_NAME}")
	if [ -z "${EXC_PRD}" ]; then
		echo "Inside the Windows Linux Mac Zips removal for ${PRODUCT_NAME}"
		if [ -d "${BUILD_OUTPUT}" ]; then
			cd ${BUILD_OUTPUT}
			echo "Availale in the Directory $(pwd)"

			find . -type f -iname "*_windows.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_windows64.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_windows_*.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_Linux.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_Linux64.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_Linux_*.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "Linux_*_source.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*Windows.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*Linux.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*mac.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "sample.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			cd -
		fi
	fi

	if [ -s "$WORK_DIR/exclude_files.txt" ]; then
		echo "File is not empty"
		EXCLUDE_ZIPLIST=$(cat $WORK_DIR/exclude_files.txt | tr "\n" "|")
		EXCLUDE_ZIPS=$(echo ${EXCLUDE_ZIPLIST} | sed -e "s/|$//g")
	fi
	if [ -n "${EXCLUDE_ZIPS}" ]; then
		cp -rf $(ls -A ${BUILD_OUTPUT}/** | grep -vE "$EXCLUDE_ZIPS") ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		copy_op_status=$?
	else
		cp -rf ${BUILD_OUTPUT}/** ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
		copy_op_status=$?
	fi
	mkdir -p ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	if [ "${BUILD_STATUS}" = "SUCCESS" -a "${PRODUCT_NAME}" = "COMPONENTS" ]; then
		echo "INFO :::: SBOM Script Trigger StartedAt ($(date "+%Y-%m-%d %T"))"
		sh ${WORK_DIR}/hg_utils/build/generate_sbom.sh "${HACKSAW_BINARY_DETAILS}" "${DLOAD_DIR}/${BUILD_DLOAD_DIR}" "${WH_BUILD_ID}" >${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/sbom.log 2>&1
		echo "INFO :::: SBOM Script Trigger EndedAt ($(date "+%Y-%m-%d %T"))"
	fi
	cp -rf ${BUILD_DIR}/buildlogs ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -rf ${BUILD_DIR}/build.log ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -rf ${BUILD_DIR}/post_build.log ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -rf ${BUILD_DIR}/combine.js ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -rf ${BUILD_DIR}/lyte_docker_creation.log ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -f ${CONF_FILE} ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -f ${BUILD_DIR}/README.html ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs
	cp -rf ${EVAL_REPORT_FILE} ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
	cp -rf ${build_info_file} ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/
	cp -rf ${WORK_DIR}/logs ${DLOAD_DIR}/${BUILD_DLOAD_DIR}

	if [ ! -z "${gruntstaticzip_name}" ]; then
		cp -rf ${BUILD_DIR}/${gruntstaticzip_name} ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
	fi
	sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@ACCESS_VALUE=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/sub_src_checkout.log
	sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/checkout.log

	if [ "${PRODUCT_NAME}" = "CONFIGTOOL" ]; then
		sed -i "s@TEAM_SPECIFIC_INFO=\(.*\)@@g" ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	fi

	HTUSER_NAME=${WH_BUILD_ID}
	HTPASSWORD=${PRODUCT_ID}_${BUILDBY}
	if [ "${SRC_ZIP_PASSWORD_PROTECT}" = "YES" ]; then
		if [ -d "${DLOAD_DIR}/${BUILD_DLOAD_DIR}/zips" ]; then
			cd ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/zips
			htpasswd -b -c .htpasswd $HTUSER_NAME $HTPASSWORD
			cat_htaccess ${DLOAD_DIR}/${BUILD_DLOAD_DIR}/zips >.htaccess
		fi
	fi
	cd -
	OUTPUT_COPY_ENDED="$(date "+%Y-%m-%d %T")"
	time_cal "Output Copy Duration" "${OUTPUT_COPY_STARTED}" "${OUTPUT_COPY_STARTED}"
	echo "OUTPUT_COPY_DURATION=\"${TOTAL_BDUR}\"" >>${build_details_txt}
	if [ "${BUILD}" = "CI" ]; then
		Autolink
	fi
	if [ -z "$(echo ${AUTO_LINK_BRANCH_LIST} | grep -w "${ARG}")" -a "${BUILD_FROM}" = "${BUILD}" -a "${BUILD_DAY}" = "$(date +%A)" ]; then
		Autolink
	fi

	link_module="$(echo $BUILD_LINK_BRANCH_LIST | grep -w "${ARG}")"
	if [ $? -eq 0 ]; then
		Autolink
	fi

        if [ "${GROUP_ID}" -eq "30" ]
        then
            Autolink
        fi

	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		findAndDeleteRestrictedFile "${DLOAD_DIR}/${BUILD_DLOAD_DIR}" "${ZAK_SHA256_HASH}" "${DLOAD_DIR}/${BUILD_DLOAD_DIR}/logs/restricted_file_log.txt" &
	fi

	echo "Copy Build output ended at : " $(date "+%Y-%m-%d %T")
}

findAndDeleteRestrictedFile() {
	build_pkg_dir=${1}
	checksum_hash_tofind=${2}
	restricted_log_file_path=${3}
	if [ -d ${build_pkg_dir} ]; then
		cd ${build_pkg_dir}
		for cksum_file in $(find ${PWD} -type f -iname "*" | grep -v "android_dependency_report.zip\|android_java_classes.zip"); do
			# finding the hash value in all files
			file_type=$(file -b "$cksum_file")
			file_checksum=$(sha256sum "${cksum_file}" | cut -d " " -f1)
			if [ "${file_checksum}" = "${checksum_hash_tofind}" ]; then
				echo "Restricted file found and deleted: $cksum_file :: sha256sum : ${checksum_hash_tofind}" >>${restricted_log_file_path}
				rm -fv "${cksum_file}"
			fi

			# finding the hash value inside .zip format files
			if echo "$file_type" | grep -q "archive\|gzip"; then
				filename_withextn=$(basename ${cksum_file})
				filename_withoutextn=${filename_withextn##*.}
				if [ ${filename_withoutextn} = "zip" -o ${filename_withoutextn} = "jar" -o ${filename_withoutextn} = "apk" -o ${filename_withoutextn} = "ipa" -o ${filename_withoutextn} = "aab" ]; then
					zip -T ${cksum_file} >/dev/null
					if [ $? -eq 0 ]; then
						unzip -Z1 ${cksum_file} | while read -r zipfile; do
							zip_archive_file_checksum=$(unzip -p ${cksum_file} "$zipfile" | sha256sum | cut -d " " -f1)
							if [ "${zip_archive_file_checksum}" = "${checksum_hash_tofind}" ]; then
								echo "Restricted file found and deleted: $cksum_file :: ${zipfile} :: ${checksum_hash_tofind}" >>${restricted_log_file_path}
								zip -d ${cksum_file} $zipfile >>${restricted_log_file_path}
							fi
						done
					fi
				fi
				# finding the hash value inside .tar format files
				if [ ${filename_withoutextn} = "tar" -o ${filename_withoutextn} = "gz" -o ${filename_withoutextn} = "xz" -o ${filename_withoutextn} = "bz2" ]; then
					tar -tf ${cksum_file} >/dev/null
					if [ $? -eq 0 ]; then
						tar -tf ${cksum_file} | while read -r tarfile; do
							tar_archive_checksum=$(tar -Oxzf archive.tar.gz "$tarfile" | sha256sum | cut -d " " -f1)
							if [ ${tar_archive_checksum} = "${checksum_hash_tofind}" ]; then
								echo "Restricted file found and deleted: $cksum_file :: ${tarfile} :: ${checksum_hash_tofind}" >>${restricted_log_file_path}
								tar --delete -vf ${cksum_file} ${tarfile}
							fi
						done
					fi
				fi

			fi
		done
		if [ -s ${restricted_log_file_path} ]; then
			echo -e "Dear Team,\n\n\t Find the details in below link,\n\nBUILD_BY: ${BUILDBY}\n\nBRANCH_NAME : ${ARG}\n\n $BLD_URL/logs/restricted_file_log.txt \n\n Thanks,\nIntegration-team." | mail -r "integration-team@zohocorp.com" -s "Restricted file found in ${PRODUCT_NAME} : ${ARG} : ${WH_BUILD_ID}" arunkumar.arumugam@zohocorp.com,cm-notify@zohocorp.com
		fi
	fi
}

Autolink() {
	echo "Autolink started at : " $(date "+%Y-%m-%d %T")

	AUTOLINKDIR="${DLOAD_DIR}/${BUILD_DLOAD_DIR}"
	LINKCHECKDIR="${DLOAD_DIRECTORY}/${ARG}/latest"

	echo "AUTOLINKDIR ${AUTOLINKDIR}"
	echo "LINKCHECKDIR ${LINKCHECKDIR}"

	touch ${AUTOLINKDIR}/locked
	mkdir -p ${DLOAD_DIRECTORY}/${ARG}
	tp_readlink=$(readlink -f $LINKCHECKDIR)
	rm -f ${tp_readlink}/locked
	unlink ${LINKCHECKDIR}

	echo "ln -s ${AUTOLINKDIR}/ ${LINKCHECKDIR}"
	ln -s ${AUTOLINKDIR}/ ${LINKCHECKDIR}

	echo "Autolink ended at : " $(date "+%Y-%m-%d %T")

}
cat_htaccess() {
	cat <<END
	AuthName "restricted stuff"
	AuthType Basic
	AuthUserFile ${1}/.htpasswd
	require valid-user
END
}

copyBuilderrorlogs() {
	echo "Copy Error Build log started at : " $(date "+%Y-%m-%d %T")
	perl -w -e "s@https://build-temp:.*@${CLONE_VALUE}@g" -p -i ${WORK_DIR}/logs/checkout.log
	perl -w -e "s@https://build-temp:.*@https://build-temp:XXX@g" -p -i ${WORK_DIR}/logs/submodule_checkout.log

	mkdir -p ${ERROR_DLOAD_DIR}/logs
	if [ -f "${BUILD_OUTPUT}/ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/ROOT.war
	fi
	if [ -f "${BUILD_OUTPUT}/Charm_ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/Charm_ROOT.war
	fi
	if [ -f "${BUILD_OUTPUT}/ehr_ROOT.war" ]; then
		rm -f ${BUILD_OUTPUT}/ehr_ROOT.war
	fi

	if [ "${PRODUCT_NAME}" = "OPMUNIFIED" ]; then
		cd ${BUILD_OUTPUT}
		if [ "${Binary_32bit_Zip_Needed}" = "No" -o "${Binary_32bit_Zip_Needed}" = "" ]; then
			find -maxdepth 1 -type f -name "*32bit.zip" -exec rm -f {} \;
			find -maxdepth 1 -type f -name "*32.zip" -exec rm -f {} \;
		fi
		find -maxdepth 1 -type f -name "*_64bit.zip" -exec rm -f {} \;
		find -maxdepth 1 -type f -name "source*.zip" -exec rm -f {} \;
		cd -
	fi

	EXC_PRD=$(cat ${WORK_DIR}/hg_utils/build/OS_Specific_zipexclude_products.txt | grep -w "${PRODUCT_NAME}")
	if [ -z "${EXC_PRD}" ]; then
		echo "Inside the Windows Linux Mac Zips removal for ${PRODUCT_NAME}"
		if [ -d "${BUILD_OUTPUT}" ]; then
			cd ${BUILD_OUTPUT}
			echo "Availale in the Directory $(pwd)"

			find . -type f -iname "*_windows.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_windows64.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_windows_*.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_Linux.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_Linux64.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*_Linux_*.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "Linux_*_source.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*Windows.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*Linux.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			find . -type f -iname "*mac.zip" | sed -e "s@^./@@g" >>$WORK_DIR/exclude_files.txt
			cd -
		fi
	fi

	if [ -s "$WORK_DIR/exclude_files.txt" ]; then
		echo "File is not empty"
		EXCLUDE_ZIPLIST=$(cat $WORK_DIR/exclude_files.txt | tr "\n" "|")
		EXCLUDE_ZIPS=$(echo ${EXCLUDE_ZIPLIST} | sed -e "s/|$//g")
	fi
	if [ -n "${EXCLUDE_ZIPS}" ]; then
		cp -rf $(ls -A ${BUILD_OUTPUT}/** | grep -vE "$EXCLUDE_ZIPS") ${ERROR_DLOAD_DIR}
	else
		cp -rf ${BUILD_OUTPUT}/** ${ERROR_DLOAD_DIR}
	fi
	cp -rf ${BUILD_DIR}/build.log ${ERROR_DLOAD_DIR}/logs
	cp -rf ${BUILD_DIR}/buildlogs ${ERROR_DLOAD_DIR}/logs
	cp -rf ${BUILD_DIR}/post_build.log ${ERROR_DLOAD_DIR}/logs
	cp -rf ${BUILD_DIR}/combine.js ${ERROR_DLOAD_DIR}/logs
	cp -rf ${BUILD_DIR}/lyte_docker_creation.log ${ERROR_DLOAD_DIR}/logs
	cp -f ${CONF_FILE} ${ERROR_DLOAD_DIR}/logs
	cp -f ${BUILD_DIR}/README.html ${ERROR_DLOAD_DIR}/
	cp -rf ${EVAL_REPORT_FILE} ${ERROR_DLOAD_DIR}
	cp -rf ${build_info_file} ${ERROR_DLOAD_DIR}/logs/
	cp -rf ${WORK_DIR}/logs/** ${ERROR_DLOAD_DIR}/logs

	if [ -f "${ERROR_DLOAD_DIR}/js_source.zip" ]; then
		rm -f ${ERROR_DLOAD_DIR}/js_source.zip
	fi

	sed -i "s@TOOLS_REFERENCE_VALUE=\(.*\)@@g" ${ERROR_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@GEN_REP_VALUE=\(.*\)@@g" ${ERROR_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@ACCESS_VALUE=\(.*\)@@g" ${ERROR_DLOAD_DIR}/logs/${PRODUCT_NAME}.txt
	sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${ERROR_DLOAD_DIR}/logs/sub_src_checkout.log
	sed -i "s@Authorization:Zoho-oauthtoken\(.*\)@@g" ${ERROR_DLOAD_DIR}/logs/checkout.log

	if [ "${GROUP_ID}" -eq "16" -o "${GROUP_ID}" -eq "18" -o "${GROUP_ID}" -eq "19" ]; then
		findAndDeleteRestrictedFile "${ERROR_DLOAD_DIR}" "${ZAK_SHA256_HASH}" "${ERROR_DLOAD_DIR}/logs/restricted_file_log.txt" &
	fi

	echo "Copy Error Build log ended at : " $(date "+%Y-%m-%d %T")
}

getErrorTasks() {
	echo "getErrorTasks started at : " $(date "+%Y-%m-%d %T")
	Error_strings="errors can't_get unable_to Java_Result:_1 HTTP_Authorization_failure 1_error"
	for str in $(echo ${Error_strings}); do
		match_str=$(echo ${str} | tr "_" " ")
		grep_match=$(grep -rl "${match_str}" ${ERROR_DLOAD_DIR}/logs/buildlogs/*_err.log)
		if [ "${grep_match}" = "" ]; then
			grep_match=$(grep -rl "${match_str}" ${ERROR_DLOAD_DIR}/logs/buildlogs/*.log)
		fi
		if [ "${grep_match}" != "" ]; then
			for err_file in $(echo ${grep_match} | tr "\n" " "); do

				filename=$(echo ${err_file} | cut -d ":" -f1)
				fname=$(basename $filename)
				echo "<a href=\"${ERROR_URL}/logs/buildlogs/${fname}\" target=\"_blank\">$fname</a>" >>${ERROR_DLOAD_DIR}/logs/error.html
			done
		fi
	done
	echo "getErrorTasks ended at : " $(date "+%Y-%m-%d %T")
}

getExactError() {
	echo "getExactError started at : " $(date "+%Y-%m-%d %T")
	fileName=${ERROR_DLOAD_DIR}/logs/buildlogs/taskname.txt
	if [ "${GROUP_ID}" = "15" -o "${GROUP_ID}" = "20" -o "${GROUP_ID}" = "21" ]; then
		exacterr_message="$(sed -n 'H; /^exec:macbuild.*/h; ${g;p}' ${ERROR_DLOAD_DIR}/logs/build.log | grep -r "error:\|FAILED\|Error:" ${ERROR_DLOAD_DIR}/logs/build.log | grep -v "BUILD FAILED" | grep -v "note:" | grep -v "warning:")"
	else
		exacterr_message="$(cat ${ERROR_DLOAD_DIR}/logs/buildlogs/exacterr_message.txt)"
	fi
	echo "exacterr_message"
	echo $exacterr_message
	if [ -f "${fileName}" -a -s "${fileName}" ]; then
		for line in $(cat ${ERROR_DLOAD_DIR}/logs/buildlogs/taskname.txt); do
			isStarted="$(echo $line | egrep -c "_started$")"
			if [ $isStarted -eq 1 ]; then
				endStr="$(echo $line | sed 's/_started$/_ended/' | awk '{print $NF}')"
				endCount="$(grep -c "$endStr" $fileName)"
				if [ $endCount -eq 1 ]; then
					echo "" >/dev/null
				elif [ $endCount -gt 1 ]; then
					echo "" >/dev/null
				else
					cd ${ERROR_DLOAD_DIR}/logs/buildlogs/
					endStr_1="$(echo $line | sed 's/_started$//' | awk '{print $NF}')"
					endStr_2="$(echo $endStr_1 | sed 's/:/_/' | sed "s@srccompile@compilesrc@g")"
					under_score="_"
					filename="$(find -name "$endStr_2$under_score*" | grep -v "**_err.log")"
					echo "filename"
					echo $filename
					echo $filename >>${ERROR_DLOAD_DIR}/logs/buildlogs/ExactError.txt
					for i in $(echo "${filename}"); do
						exfilename="$(echo $i | sed "s@\.\/@@g")"
						echo "exfilename"
						echo $exfilename
						echo "<a href=\"${ERROR_URL}/logs/buildlogs/${exfilename}\" target=\"_blank\">$exfilename</a> <br>" >>${ERROR_DLOAD_DIR}/logs/ExactError.html
						echo "${ERROR_URL}/logs/buildlogs/${exfilename}" >>${ERROR_DLOAD_DIR}/logs/buildlogs/ExactErrormail.txt
						if [ -f "${ERROR_DLOAD_DIR}/logs/buildlogs/${exfilename}" ]; then
							if [ -s "${ERROR_DLOAD_DIR}/logs/buildlogs/${exfilename}" ]; then
								exacterr_message="$(tail -n 50 ${ERROR_DLOAD_DIR}/logs/buildlogs/${exfilename})"
								exacterr_message="${exacterr_message}  "
							else
								exacterr_message="File is empty"
							fi
						fi

					done
				fi
			fi
		done
	fi
	echo "getExactError ended at : " $(date "+%Y-%m-%d %T")

}

checkAndCleanDir() {
	echo "Within Clean Directory"
	local dir=$1
	if [ "${dir}" = "" ]; then
		echo -e "Directory specified for cleaning is empty. Please specify a valid directory"
		echo -e "Hence exiting ...."
		SendMail "Build Failed ${PRODUCT_NAME}" "Directory specification is empty" "Directory specified for cleaning is empty. Please specify a valid directory. Hence exiting ...." "${ERROR_NOTIFY_MAIL_ID}"
		EXIT_MESSAGE="Directory specified for cleaning is empty. Please specify a valid directory. Hence exiting ...."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		exit 1
	fi
	if [ "${dir}" = "${HOME}" -o "${dir}" = "${HOME}/" ]; then
		echo -e "Directory "${dir}" cannot be removed as it is home directory."
		echo -e "Hence exiting ........."
		SendMail "Build Failed ${PRODUCT_NAME}" "Directory "${dir}" cannot be removed" "Directory "${dir}" cannot be removed as it is home directory. Hence exiting ........." "${ERROR_NOTIFY_MAIL_ID}"
		EXIT_MESSAGE="Directory "${dir}" cannot be removed as it is home directory. Hence exiting ........."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		exit 1
	fi
	Rem_dir=$(dirname "${dir}")
	if [ "${Rem_dir}" = "/zoho" -o "${Rem_dir}" = "${HOME}/dload" ]; then
		echo -e "Directory "${dir}" cannot be removed as it is zoho or dload directory."
		echo -e "Hence exiting ........."
		SendMail "Build Failed ${PRODUCT_NAME}" "Directory "${dir}" cannot be removed" "Directory "${dir}" cannot be removed as it is zoho or dload directory. Hence exiting ........." "${ERROR_NOTIFY_MAIL_ID}"
		EXIT_MESSAGE="Directory "${dir}" cannot be removed as it is zoho or dload directory. Hence exiting ........."
		echo "${EXIT_MESSAGE}"
		echo "REASON_FOR_BUILD_FAILURE=\"Pre_Build_Failure:${EXIT_MESSAGE}\"" >>${build_info_file}
		REASON_FOR_BUILD_FAILURE="Pre_Build_Failure:${EXIT_MESSAGE}"
		export REASON_FOR_BUILD_FAILURE
		exit 1
	fi
	if [ -d "${dir}" ]; then
		echo -e "Removing the contents of directory. "${dir}""
		rm -rfv ${dir}
	fi
}
SendMail() {
	local MAIL_SUBJECT=$1
	local MAIL_CONTENT=$2
	MAIL_ID="$3"
	mail -r "integration-team@zohocorp.com" -s "${MAIL_SUBJECT}" ${MAIL_ID} <<-EOF
		Dear Team,

		${MAIL_CONTENT}

		Thanks,
		Integration-Team
	EOF
}
dockerpullwithretry(){
        docker_health_check='sh configtool/registry_health_check.sh'
        docker_err_msg=`sudo docker pull ${1}`
        result=" "
        if [ $? -ne 0 ]
        then
                halt_bool=`echo "$docker_err_msg" | grep -i "Failed\|refused"`
                if [ -n "$halt_bool" ]
                then
                        health_script_execution_status=`ps -auwxxx | grep "${docker_health_check}" | grep -v "grep"`
                        if [ $? -ne 0 ]; then
                                result=`sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check`
                        else
                                echo "Docker Registry was down - restart in progress. Please wait for sometime to proceed build process."
                                sleep 10s
                                result=`sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check`
                        fi
                        if [ -n "echo "$result" | grep -iE (HTTP/1.1 200 OK)" ]
                        then
                                sleep 5s
                                sudo docker pull ${1}
                                if [ $? -eq 0 ]
                                then
                                    export IMAGE_NAME="${1}"
                                    echo "IMAGE CREATION SUCCESS" >> ${LOGS_DIR}/docker.log
                                else
                                        echo "IMAGE CREATION FAILURE" >> ${LOGS_DIR}/docker.log
                                        mail -r "integration-team@zohocorp.com" -s "Error while pulling docker image ${1} in ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID},${IMAGE_CREATION_NOTIFY_MAIL_ID}" <<-EOF
                                        Dear Team,

                                        There was an issue while pulling the docker image ${1} in ${PRODUCT_NAME} with retry.

                                        Please contact integration team for further support.

                                        Thanks & Regards,
                                        Integration Team
EOF

                                fi
                        fi
                fi
        else
            export IMAGE_NAME="${1}"
                echo "IMAGE CREATION SUCCESS" >> ${LOGS_DIR}/docker.log
        fi
}
buildDockerFile()
{
        echo "buildDockerFile started at : " `date "+%Y-%m-%d %T"`
        if [ "${GROUP_ID}" -ne "16" -a "${GROUP_ID}" -ne "18" -a "${GROUP_ID}" -ne "19" -a "${GROUP_ID}" -ne "15" -a "${GROUP_ID}" -ne "20" -a "${PRODUCT_NAME}" != "ZOHOSEARCH_MISC" -a "${PRODUCT_NAME}" != "HG_UTILS" ]
        then
             sed -i "s@cmtools.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" $(grep -irl "cmtools.csez.zohocorpin.com:5000" `find ${WORK_DIR}/${CHECKOUT_DIR} -type f -maxdepth 4`)
             sed -i "s@integ-cm.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" $(grep -irl "integ-cm.csez.zohocorpin.com:5000" `find ${WORK_DIR}/${CHECKOUT_DIR} -type f -maxdepth 4`)
        fi
        cp -fv "${WORK_DIR}/${CHECKOUT_DIR}/build/Dockerfile" ${CONF_DIR}
        if [ "${#productname}" -eq "3" ]
        then
                export dockerNamespace="`echo "${productname}_zoho" | sed s@\-@_@g`"
        else
                export dockerNamespace="`echo "${productname}" | sed s@\-@_@g`"
        fi
    	echo "dockerNamespace : ${dockerNamespace}" >> ${LOGS_DIR}/docker.log
        if [ -f "${BUILD_DIR}/Dockerfile" ] #-a "${PRODUCT_NAME}" != "ZOHOREPORTS" ]
        then
	       #if [ "${PRODUCT_NAME}" = "IGNITE" -o "${PRODUCT_NAME}" = "ZOHOCHATWMS" -o "${PRODUCT_NAME}" = "OPMUNIFIED" ]; then
	           sed -i "s@cmtools.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" ${BUILD_DIR}/Dockerfile
                   sed -i "s@integ-cm.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" ${BUILD_DIR}/Dockerfile
               #fi
                echo "INFO :::: Inside ${BUILD_DIR}/Dockerfile directory." >> ${LOGS_DIR}/docker.log
                sh ${WORK_DIR}/hg_utils/build/rmcntrlm.sh ${BUILD_DIR}/Dockerfile
                PARENT_IMAGE_NAME=`cat ${BUILD_DIR}/Dockerfile | grep "FROM" | grep -v "#" | awk -F' ' '{print $2}'`
        elif [ -f "${CONF_DIR}/Dockerfile" ]
        then
	       #if [ "${PRODUCT_NAME}" = "IGNITE" -o "${PRODUCT_NAME}" = "ZOHOCHATWMS" -o "${PRODUCT_NAME}" = "OPMUNIFIED" ]; then
	           sed -i "s@cmtools.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" ${CONF_DIR}/Dockerfile
                   sed -i "s@integ-cm.csez.zohocorpin.com:5000@integ-cm.csez.zohocorpin.com@g" ${CONF_DIR}/Dockerfile
               #fi
                echo "Inside ${CONF_DIR}/Dockerfile directory." >> ${LOGS_DIR}/docker.log
                sh ${WORK_DIR}/hg_utils/build/rmcntrlm.sh ${CONF_DIR}/Dockerfile
                PARENT_IMAGE_NAME=`cat ${CONF_DIR}/Dockerfile | grep "FROM" | grep -v "#" | awk -F' ' '{print $2}'`
        else
                PARENT_IMAGE_NAME=""
        fi
        if [ ! -z "${PARENT_IMAGE_NAME}" ]
        then
            echo "Inside PARENT_IMAGE_NAME(${PARENT_IMAGE_NAME}) value not empty check." >> ${LOGS_DIR}/docker.log
                export PARENT_IMAGE_NAME="${PARENT_IMAGE_NAME}"
                export PARENT_IMAGE_ID=`sudo docker images | grep "${PARENT_IMAGE_NAME} " | awk -F' ' '{print $3}'`
        else
                echo "Inside ${PARENT_IMAGE_NAME} variable empty check ${PRODUCT_NAME}" >> ${LOGS_DIR}/docker.log
                export PARENT_IMAGE_NAME="integ-cm.csez.zohocorpin.com/me/centos7"
                export PARENT_IMAGE_ID="centos"
        fi
        BRANCH_NAME="`echo ${ARG} | tr '[:upper:]' '[:lower:]'`"
        export dockerRepo="`echo "${BRANCH_NAME}" | sed "s@\/@_@g" | sed "s@|@_@g" | sed "s@__@_@g"`"
        if [ -f "${BUILD_DIR}/Dockerfile" ] #-a "${PRODUCT_NAME}" != "ZOHOREPORTS" ]
        then
                dockerpullwithretry ${PARENT_IMAGE_NAME}
                IMAGE_PUSH="TRUE"
        elif [ -f "${CONF_DIR}/Dockerfile" ]
        then
                dockerpullwithretry ${PARENT_IMAGE_NAME}
                IMAGE_PUSH="TRUE"
        else
                echo "USING DEFAULT IMAGE" >> ${LOGS_DIR}/docker.log
        fi
        IMAGE_NAME_WITHOUT_TAG="`echo ${IMAGE_NAME} | cut -d ":" -f1-2`"
        IMAGE_NAME_OF_TAG="`echo ${IMAGE_NAME} | cut -d ":" -f3`"
        echo "Image Name without TAG :::: ${IMAGE_NAME_WITHOUT_TAG}"
        echo "Image Name of TAG :::: ${IMAGE_NAME_OF_TAG}"
        if [ ! -n "${IMAGE_NAME_OF_TAG}" ]; then
            IMAGE_ID=`sudo docker images | grep "${IMAGE_NAME}" | awk -F' ' '{print $3}'`
        else
            IMAGE_ID=`sudo docker images | grep "${IMAGE_NAME_WITHOUT_TAG}" | grep "${IMAGE_NAME_OF_TAG}" | awk -F' ' '{print $3}'`
        fi
        export IMAGE_ID
        echo "IMAGE_ID=${IMAGE_ID}" >> ${LOGS_DIR}/docker.log
        echo "IMAGE_PUSH=${IMAGE_PUSH}"
        echo "IMAGE_NAME=${IMAGE_NAME}"
        echo "IMAGE_ID=${IMAGE_ID}"
    echo "buildDockerFile started at : " `date "+%Y-%m-%d %T"`
}

buildDockerFile_Old() {
	echo "buildDockerFile started at : " $(date "+%Y-%m-%d %T")

	cp -fv "${WORK_DIR}/${CHECKOUT_DIR}/build/Dockerfile" ${CONF_DIR}
	if [ "${#productname}" -eq "3" ]; then
		export dockerNamespace="$(echo "${productname}_zoho" | sed s@\-@_@g)"
	else
		export dockerNamespace="$(echo "${productname}" | sed s@\-@_@g)"
	fi
	echo "dockerNamespace : ${dockerNamespace}" >>${LOGS_DIR}/docker.log
	if [ -f "${BUILD_DIR}/Dockerfile" ]; then #-a "${PRODUCT_NAME}" != "ZOHOREPORTS" ]
                if [ "${PRODUCT_NAME}" = "IGNITE" ]; then
                    sed -i "s@cmtools.csez@integ-cm.csez@g" ${BUILD_DIR}/Dockerfile
                fi
		echo "Inside ${BUILD_DIR}/Dockerfile directory check ${PRODUCT_NAME}" >>${LOGS_DIR}/docker.log
		PARENT_IMAGE_NAME=$(head -n 1 ${BUILD_DIR}/Dockerfile | awk -F' ' '{print $2}')
	elif [ -f "${CONF_DIR}/Dockerfile" ]; then
                if [ "${PRODUCT_NAME}" = "IGNITE" ]; then
                    sed -i "s@cmtools.csez@integ-cm.csez@g" ${CONF_DIR}/Dockerfile
                fi
		echo "Inside ${CONF_DIR}/Dockerfile directory check ${PRODUCT_NAME}" >>${LOGS_DIR}/docker.log
		PARENT_IMAGE_NAME=$(head -n 1 ${CONF_DIR}/Dockerfile | awk -F' ' '{print $2}')
	else
		PARENT_IMAGE_NAME=""
	fi
        migrated_product_matched="`grep -E "^${PRODUCT_NAME}$" ${WORK_DIR}/hg_utils/build/new_server_migrated_product.txt`"
        if [ -n "${migrated_product_matched}" -a -n "${PARENT_IMAGE_NAME}" ]; then
            PARENT_IMAGE_NAME="`echo ${PARENT_IMAGE_NAME} | sed -e "s@cmtools.csez@integ-cm.csez@g"`"
        fi
	if [ ! -z "${PARENT_IMAGE_NAME}" ]; then
		echo "Inside ${PARENT_IMAGE_NAME} variable not empty check ${PRODUCT_NAME}" >>${LOGS_DIR}/docker.log
		export PARENT_IMAGE_NAME="${PARENT_IMAGE_NAME}"
		export PARENT_IMAGE_ID=$(sudo docker images | grep "${PARENT_IMAGE_NAME} " | awk -F' ' '{print $3}')
	else
		echo "Inside ${PARENT_IMAGE_NAME} variable empty check ${PRODUCT_NAME}" >>${LOGS_DIR}/docker.log
		export PARENT_IMAGE_NAME="integ-cm.csez.zohocorpin.com/me/centos7"
		export PARENT_IMAGE_ID="centos"
	fi
	IMAGE_PUSH="FALSE"
	BRANCH_NAME="$(echo ${ARG} | tr '[:upper:]' '[:lower:]')"
	export dockerRepo="$(echo "${BRANCH_NAME}" | sed "s@\/@_@g" | sed "s@|@_@g" | sed "s@__@_@g")"
	docker_health_check='sh configtool/registry_health_check.sh'
	if [ -f "${BUILD_DIR}/Dockerfile" ]; then #-a "${PRODUCT_NAME}" != "ZOHOREPORTS" ]
		docker_err_msg=$(sudo docker pull ${PARENT_IMAGE_NAME})
		if [ $? -ne 0 ]; then
			halt_bool=$(echo "$docker_err_msg" | grep -i "Failed\|refused")
			if [ -n "$halt_bool" ]; then
				result=$(sshpass -f ${passphrase} ssh -l nobody cmtools $docker_health_check)
				if [ -n "echo "$result" | grep -i HTTP" ]; then
					sleep 5s
					sudo docker pull ${PARENT_IMAGE_NAME}
				fi
			fi
		fi
		if [[ "${PARENT_IMAGE_NAME}" != *"android" ]]; then
			export IMAGE_NAME="cmtools.csez.zohocorpin.com/${dockerNamespace}/${dockerRepo}"
			addCACertificates ${BUILD_DIR}
			sudo docker build -t "${IMAGE_NAME}" "${BUILD_DIR}"
		else
			export IMAGE_NAME="${PARENT_IMAGE_NAME}"
		fi
		IMAGE_PUSH="TRUE"
	elif [ -f "${CONF_DIR}/Dockerfile" ]; then
		sudo docker pull ${PARENT_IMAGE_NAME}
		if [[ "${PARENT_IMAGE_NAME}" != *"android" ]]; then
			export IMAGE_NAME="cmtools.csez.zohocorpin.com/${dockerNamespace}/${dockerRepo}"
			echo "Inside not android base image name ${IMAGE_NAME}" >>${LOGS_DIR}/docker.log
			addCACertificates ${CONF_DIR}
			sudo docker build -t "${IMAGE_NAME}" "${CONF_DIR}"
		else
			export IMAGE_NAME="${PARENT_IMAGE_NAME}"
		fi
		IMAGE_PUSH="TRUE"
	else
		echo "USING DEFAULT IMAGE" >>${LOGS_DIR}/docker.log
	fi
	export EXISTING_IMAGE_ID=$(sudo docker images | grep "cmtools.csez.zohocorpin.com/${dockerNamespace}/${dockerRepo} " | awk -F' ' '{print $3}')
	export IMAGE_ID=$(sudo docker images | grep "${IMAGE_NAME} " | awk -F' ' '{print $3}')
	echo "EXISTING_IMAGE_ID=${EXISTING_IMAGE_ID}" >>${LOGS_DIR}/docker.log
	echo "IMAGE_ID=${IMAGE_ID}" >>${LOGS_DIR}/docker.log
	if [ $? -eq 0 -a "${IMAGE_PUSH}" = "TRUE" ]; then
		echo "IMAGE CREATION SUCCESS" >>${LOGS_DIR}/docker.log
		if [ "${EXISTING_IMAGE_ID}" != "${IMAGE_ID}" ]; then
			if [[ "${PARENT_IMAGE_NAME}" != *"android" ]]; then
				echo "DOCKER IMAGE IS PUSHING" >>${LOGS_DIR}/docker.log
				sudo docker push ${IMAGE_NAME}
				if [ $? -ne 0 ]; then
					mail -r "integration-team@zohocorp.com" -s "Error while pushing docker image ${IMAGE_NAME} in ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID},${IMAGE_CREATION_NOTIFY_MAIL_ID}" <<-EOF
						Dear Team,

						There was a issue while pushing ${IMAGE_NAME} in ${PRODUCT_NAME} docker registry..

						Please contact integration team for further support.

						Thanks & Regards,
						Integration Team
					EOF
				fi
			else
				export IMAGE_NAME=${PARENT_IMAGE_NAME}
			fi
		fi
	elif [ $? -ne 0 -a "${IMAGE_PUSH}" = "TRUE" ]; then
		mail -r "integration-team@zohocorp.com" -s "Error while creating docker image ${IMAGE_NAME} for ${PRODUCT_NAME}" "${ERROR_NOTIFY_MAIL_ID},${IMAGE_CREATION_NOTIFY_MAIL_ID}" <<-EOF
			Dear Team,

			There was a issue while pushing ${IMAGE_NAME} in ${PRODUCT_NAME} docker registry..

			Hence quitting the build. Please contact integration team for further support.

			Thanks & Regards,
			Integration Team
		EOF
	fi
	echo "IMAGE_PUSH=${IMAGE_PUSH}"
	echo "IMAGE_NAME=${IMAGE_NAME}"
	echo "IMAGE_ID=${IMAGE_ID}"
	echo "buildDockerFile started at : " $(date "+%Y-%m-%d %T")

}

addCACertificates() {
	if [ -d ${1} ]; then
		cd ${BUILD_DIR}
		grep -r "npminstall\|npm\|integ-docker\|lyte\|bower" | grep -v "#\|node_modules" | grep "ant.properties\|package.json\|build.sh\|build_script.sh"
		if [ "$?" = "0" ]; then
			echo -e "\nRUN git config --global http.sslVerify false" >>${1}/Dockerfile
		fi
		if [ "${PRODUCT_NAME}" = "ZOHOREPORTS" ]; then
			echo -e "\nRUN npm install -g npx" >>${1}/Dockerfile
		fi
		cd -
	fi
}

evalRestriction() {
	S_NO=0
	S_NO=$(expr ${S_NO} + 1)
	EVAL_PATTERN_COUNT=0
	EVAL_FILE_COUNT=0
	TMP_PRDNAME=$(echo ${PRODUCT_NAME} | tr "[A-Z]" "[a-z]")
	EVAL_REPORT_FILE="${BUILD_DIR}/eval_usage.html"
	export EVAL_REPORT_FILE EVAL_PATTERN_COUNT EVAL_FILE_COUNT
	for i in $(find ${WORK_DIR}/${CHECKOUT_DIR} -iname "*.jsp" -o -iname "*.jspf" -o -iname "*.js"); do
		MATCH=$(cat $i | grep -Ev "^[[:space:]]*//" | grep -Ec "(^eval)|([=[:space:].]+eval)[[:space:]]*\(" | grep -wc "eval")
		CNT=$(echo ${MATCH} | cut -d ":" -f2)
		if [ $CNT -ne 0 ]; then
			EVAL_PATTERN_COUNT=$(expr ${EVAL_PATTERN_COUNT} + ${CNT})
			EVAL_FILE_COUNT=$(expr ${EVAL_FILE_COUNT} + 1)
			MODULE_LENGTH=$(echo ${CHECKOUT_MODULE} | wc -c)
			FILE_PATH=$(echo $i | cut -c${MODULE_LENGTH}- | sed "s@^/@@g")
			REPO_FILE_PATH=$(echo $i | sed "s@${WORK_DIR}/${CHECKOUT_DIR}/@@g")
			if [ "${REPOSITORY_TYPE}" = "GIT" ]; then
				TMP_GIT_URL=$(echo ${CLONE_VALUE} | sed "s@\.git@@g")
				REP_URL="${TMP_GIT_URL}/blob/master/${REPO_FILE_PATH}"
			else
				REP_URL="${cmsuite_domain_name}/${TMP_PRDNAME}/browse/default/filecontent/?changeset=default&filename=${REPO_FILE_PATH}"
			fi
			echo "<br><br><a href=\"${REP_URL}\" target=\"_blank\">$REPO_FILE_PATH</a><br><br>" >>${EVAL_REPORT_FILE}
			cat $i | grep -En "(^eval)|([=[:space:].]+eval)[[:space:]]*\(" | grep -w "eval" | grep -Ev "^[0-9]+:[[:space:]]*//" >>${EVAL_REPORT_FILE}
		fi
	done
	echo "EVAL_DETAILS=\"EVAL_FILE_COUNT=${EVAL_FILE_COUNT},EVAL_PATTERN_COUNT=${EVAL_PATTERN_COUNT}\"" >>${build_info_file}
	if [ -f "${EVAL_REPORT_FILE}" ]; then
		sed -i "s@\([0-9]\-\)[[:space:]]*\(.*\)@\1\2@g" ${EVAL_REPORT_FILE}
		sed -i "s@\([0-9]:\)[[:space:]]*\(.*\)@\1\2@g" ${EVAL_REPORT_FILE}
		sed -i "s@\(.*\)eval[[:space:]](\(.*\)@\<b\>\<xmp\>\1eval[[:space:]]*(\2\</xmp\>\</b\>\<br\>@g" ${EVAL_REPORT_FILE}
		sed -i "s@\(^[0-9].*\)@\<xmp\>\1\</xmp\>\<br\>@g" ${EVAL_REPORT_FILE}
	fi
}

compareThirdpartyLabels() {
	if [ "${TP_LBL_DIFF_NOTIFY}" = "TRUE" -a -n "${TP_CO_LABEL}" -a -n "${ACTUAL_TP_LBL}" ]; then
		if [ "${ACTUAL_TP_LBL}" != "${TP_CO_LABEL}" ]; then
			mail -r "integration-team@zohocorp.com" -s "Thirdparty Label differs for ${PRODUCT_NAME}" "cjayaprakash@zohocorp.com,arunkumar.arumugam@zohocorp.com,karthiga.c@zohocorp.com,kaleeswaran.n@zohocorp.com,petchimuthu@zohocorp.com" <<-EOF
				Dear Team,

				Thirdparty label configured from functions.sh and ant.properties are not same ..

				Thirdparty label in ant.properties            : ${ACTUAL_TP_LBL}
				Thirdparty label configured from functions.sh : ${TP_CO_LABEL}
				Build Id : ${WH_BUILD_ID}
				Branch   : ${ARG}

				Thanks,
				Integration-Team
			EOF
		fi
	fi
}
getIDCbuildDetails
