function IdeOverride(Lyte,_LC){
// var _LC = LyteComponent;
// var _LyteComponent = Lyte.Component;
_LC.core._constructor.prototype.executeBlockHelpers = function(updateHelpers, node) {
    var originalUpdateHelpers = Array.from(updateHelpers);
    _LC.core.executeBlockHelpers.call(this,updateHelpers);
    if(node){
        for(var i=0;i<originalUpdateHelpers.length;i++) {
            var lastNode = originalUpdateHelpers[i].lastNode;
            if(lastNode._placeHolder) {
                lastNode = lastNode._placeHolder;
            }
            lastNode.__lyteHelper = node;
        }
    }   
}
_LC.core._constructor.prototype.updateForHelper = function(node, options, contextSwitchInfo, establishBindings, staticTempArr,yieldComp) {
    if(options){
        if(options.type !== "remove" && node._forContent && node._forContent.length === 1 && node._forContent[0].length === 1 && node._forContent[0][0].__lyteHelper === node &&
        node._forContent[0][0].nodeType === 3) {
            node._forContent[0][0].remove();
            node._forContent=[];
        }
    }
    var ret =  _LC.core.updateForHelper.call(this, node, options, contextSwitchInfo, establishBindings, staticTempArr,yieldComp)
    if(node.tagName !== "TEMPLATE") {
        node  = node._origTemplate;
    }
    node._placeHolder.__lytehelper = node._placeHolder._helper;
    node._placeHolder._actTemplate = node;
    if(options && options.type !== "remove") {
        if(!node._fRender){
            node._forContent.forEach(function(arr){
                arr.forEach(function(ele){
                    ele.__lyteHelper = node;	
                })  
            })
        } 
    }
    var lastNode = node;
    var items =  node._attributes.items; //node._items;
    if(!items || items.length === 0){
        var emptyTextNode = document.createTextNode("");
        node._forContent[0]=[emptyTextNode];
        emptyTextNode.__lyteHelper = node; 
        // _LC.unbound = initialUnbound;
        if(options.type !== "default") { 
            lastNode._placeHolder.parentNode.insertBefore(emptyTextNode, lastNode._placeHolder)
        }
    }
    return ret;
}
_LC.core._constructor.prototype.updateForInHelper = function(node, options, contextSwitchInfo, establishBindings,yieldComp) {
    if(options){
        if(options.type !== "remove" && node._forContent && node._forContent.helperLink && node._forContent.helperLink[0].__lyteHelper === node &&
            node._forContent.helperLink[0].nodeType === 3) {
              node._forContent.helperLink[0].remove();
              delete node._forContent.helperLink;
          }
    }
    var ret = _LC.core.updateForInHelper.call(this,node, options, contextSwitchInfo, establishBindings,yieldComp);
    if(node.tagName !== "TEMPLATE") {
        node  = node._origTemplate;
    }
    node._placeHolder.__lytehelper = node._placeHolder._helper;
    node._placeHolder._actTemplate = node;
    if(node._currentObject && options && options.type !== "remove") {
        node._keysArray.forEach(function(itemKey){
            node._forContent[itemKey].forEach(function(item) {		
                item.__lyteHelper = node;		        
            });
        })
    }
    var lastNode = node;
        if((!node._keysArray || node._keysArray.length === 0)){
            var emptyTextNode = document.createTextNode("");
            node._forContent.helperLink = [emptyTextNode];
            emptyTextNode.__lyteHelper = node;
            if(options.type !== "default") {   
                lastNode._placeHolder.parentNode.insertBefore(emptyTextNode, lastNode._placeHolder)
            }  	
        }
    return ret; 
}
    _LC.core._constructor.prototype.updateSwitchHelper = function(type,node, contextSwitchInfo, update, establishBindings,yieldComp,templateCaseNode,helperNode){
        var ret = _LC.core.updateSwitchHelper.call(this,type,node, contextSwitchInfo, update, establishBindings,yieldComp,templateCaseNode,helperNode);
        if(node.tagName !== "TEMPLATE") {
            node  = node._origTemplate;
        }
        node._placeHolder.__lytehelper = node._placeHolder._helper;
        node._placeHolder._actTemplate = node;
        node._caseContent.forEach(function(item) {		
            item.__lyteHelper = node;		
        })
        return ret;
    }

// _LC.modifyTemplate = function(componentName,template){
//     // this.constructor._registeredCommonClass['client-comp1'].activeInstances
//     var registryClass = this.constructor;
//     if(registryClass._reRegisteredComponents.indexOf(componentName) == -1){
//         registryClass._reRegisteredComponents.push(componentName);
//     }
//     if(registryClass._registeredCommonClass[componentName]) {
//         // var comp = registryClass._registeredCommonClass[componentName];
//         var compClassDef = this._registeredComponents[componentName];
//         if(compClassDef.activeInstances > 0) {
//             console.warn("There are active instances of the component " + componentName + " and hence cannot be unregistered");
//         }
//         else{
//             if(registryClass.Compile.getDynamicNodes) {
//                 var returnVal = registryClass.Compile.getDynamicNodes(componentName, undefined, template);
//                 if(returnVal.errors){
//                     console.error("Error in the component",returnVal.componentName,returnVal.errors);
//                     return false;
//                 }else{  
//                     // var docTemplate = _LC.lyteComponentsDiv.querySelector("template[tag-name="+componentName+ "]")//check
//                     var lyteComponentsDiv = _LC.getComponentsDiv(_LC.lyteComponentsDiv,registryClass.name);
//                     var docTemplate = lyteComponentsDiv.querySelector("template[tag-name="+componentName+ "]");
//                     if(docTemplate) {
//                         // var docTemplateCopy = Array.from(_LC.lyteComponentsDiv.querySelectorAll("template[tag-name="+componentName+ "]"));
//                         var docTemplateCopy = Array.from(lyteComponentsDiv.querySelectorAll("template[tag-name="+componentName+ "]"));
//                         // Array.from(document.querySelectorAll("template[tag-name="+componentName+ "]")).forEach(el => el.remove());	
//                         docTemplateCopy.forEach(function(el){
//                             el.remove()
//                         });
//                     }
//                     if(compClassDef._depthTemp) {
//                         compClassDef._depthTemp.remove();    
//                     }
//                     compClassDef._depthTemp = document.createElement("template");
//                     // compClassDef.originalDef._template =returnVal.template;
//                     // compClassDef.originalDef._dynamicNodes = returnVal.dynamicNodes;
//                     // compClassDef.originalDef._templateAttributes = returnVal._templateAttributes;
//                     compClassDef._template =returnVal.template;
//                     compClassDef._dynamicNodes = returnVal.dynamicNodes;
//                     compClassDef._templateAttributes = returnVal._templateAttributes;
//                     // debugger;
//                     compClassDef._registered = false;
//                     registryClass.registerComponent(componentName,compClassDef)//,compClassDef.originalOpt,compClassDef,this
//                 }
//             }
//         }
//     }
//     else{
//     console.warn(componentName , "is not registered");
//     }
// }

_LC.core._constructor._registerComponent = function(a,b,c,d,e){
    if(d._reRegisteredComponents.indexOf(a) != -1){
        c._template = JSON.parse(c._template);
    }
    _LC.core._registerComponent.call(this,a,b,c,d,e);
}
_LC.registerComponent = function(componentName, componentClass ,registryInstance){
    // var def = Lyte.prototype.deepCopyObject(definition);
    // var originalOpt;
    // if(options && options.mixins){
    //     originalOpt = Lyte.prototype.deepCopyObject(options);
    // }
    // var registryClass = registryInstance;
    let registry = componentClass._registryClass;
    _LC.core.registerComponent.call(this,componentName, componentClass, registryInstance);

    // componentClass.originalDef = {};
    // var def = componentClass.originalDef;
    // def._data = componentClass._data;
    // def._actions = componentClass._actions;
    // def._methods = componentClass._methods;
    // def.__observers = componentClass.__observers;
    // def.includeRegistry = componentClass.includeRegistry;
    // def._dynamicNodes = componentClass._dynamicNodes;
    // def.dc = componentClass.dc;
    // def._callBacks = componentClass._callBacks;
    // def._observedMethodAttributes = componentClass._observedMethodAttributes;


    // _LC._registeredComponents[componentName].originalOpt = originalOpt;
    // registryClass._registeredCommonClass[componentName].originalDef = def;
    // registryClass._registeredCommonClass[componentName].originalOpt = originalOpt;
    if(registry._reRegisteredComponents.indexOf(componentName) != -1){
        registry._reRegisteredComponents.splice(registry._reRegisteredComponents.indexOf(componentName),1);
    }
}
}
export default IdeOverride;