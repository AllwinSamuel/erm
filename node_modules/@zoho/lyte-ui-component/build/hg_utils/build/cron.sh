#$Id$
#!/bin/bash
#set -x
main()
{
	perl -w -e "s@^SERVER_NAME=.*@SERVER_NAME=\"`hostname`\"@g" -p -i ${WORK_DIR}/${PRODUCT_NAME}.txt
	. ${WORK_DIR}/${PRODUCT_NAME}.txt
	PRD_CONF_DIR=conf
	CONF_DIR=${WORK_DIR}/${PRD_CONF_DIR}
	if [ -z ${CONF_DIR} ]
	then
		echo "conf variable not set"
		exit 1
	fi
	CONF_CO_LABEL="HEAD"
	CONF_FILE_NAME=`basename ${CONF_FILENAME}`
	export CONF_FILE=${CONF_DIR}/${CONF_FILE_NAME}
	START=`date +%b_%d_%Y@%T`
	MOD_NAME=`echo ${CONF_FILENAME} | cut -d "/" -f1`
	CRON_BLD_TIME_FILE="${WORK_DIR}/logs/cronbuildtime.html"
	cd ${WORK_DIR}
	#. ${WORK_DIR}/hg_utils/build/functions_parallel.sh
	if [ ! -z "${TEAM_SPECIFIC_INFO}" ]
        then
                for i in `echo "${TEAM_SPECIFIC_INFO}" | tr "," " "`
                do
                        export "$i"
                done
        fi

        #. ${WORK_DIR}/hg_utils/build/functions_parallel.sh
	PATCH_PRD=`cat ${WORK_DIR}/hg_utils/build/reports_products.txt | grep -E "ZM|ZOHOMAIL" | grep -w "${PRODUCT_NAME}"`
        if [ ! -z "${PATCH_PRD}" -a "${BUILD_TASKS}" = "JAVA_JSP" ]
        then
                echo "Patch build"
                mv ${WORK_DIR}/hg_utils ${WORK_DIR}/hg_utils_O
                cd ${WORK_DIR}
                unzip ~/downloads/dload/integ/hg_utils/webhost/PATCH_BRANCH/May_08_2023/hg_utils.zip
		unzip -od utility_packages ~/downloads/dload/integ/hg_utils/webhost/PATCH_BRANCH/May_08_2023/build_reports.zip
                if [ -n "${PATCH_PRD}" ]; then
                    cp -fv hg_utils/build/build_mail.xml hg_utils/build/build.xml
                    cp -fv hg_utils/build/library_mail.xml hg_utils/build/library.xml
                    cp -fv hg_utils/build/allowed_dependency_urls.txt hg_utils/build/allowed_dependency_urls.txt
                fi
                . ${WORK_DIR}/hg_utils/build/functions_parallel.sh
                
                cd -
        else
                echo "Default build"
              . ${WORK_DIR}/hg_utils/build/functions_parallel.sh
        fi


	if [ -z "${BUILD_RETRY}" ]
	then
		echo "${ARG} BUILD STARTED" > ${CRON_BLD_TIME_FILE}
		echo "<br><br><br>" >> ${CRON_BLD_TIME_FILE}
		echo "BUILD STARTED AT ${START}"
		echo "WINDOWS_CONNECTION=FALSE" > ${WORK_DIR}/${PRODUCT_NAME}_stop.out
		checkDloadSize
		getRepositoryType
                if [ ${GROUP_ID} -ne 30 ]; then
		    echo "Conf File Checkout process started at : `date +%b_%d_%Y@%T`"
                    get_conf_file  >> ${conf_checkout_log} 2>&1
                    echo "Conf File Checkout process ended at : `date +%b_%d_%Y@%T`"
                    sed -i "s@http://build/@https://build.zohocorp.com/@g" ${CONF_FILE}
		    . ${CONF_FILE}
                fi
		setBuildVariables
		STATUS_LOG=${LOGS_DIR}/status.log
		echo "Clean process started at : `date +%b_%d_%Y@%T`"
		clean >> ${LOGS_DIR}/clean_prcess.log
		echo "Clean process ended at : `date +%b_%d_%Y@%T`"
		echo "PRE BUILD FUNCTION IS STARTED.........." >> ${STATUS_LOG}
		prebuild
		dobuild
		END=`date +%b_%d_%Y@%T`
		echo "BUILD COMPLETED AT ${END}"
		time_cal ${ARG}_BUILD ${START} ${END}
		echo "POST BUILD FUNCTION IS STARTED........." >> ${STATUS_LOG}
		postbuild
		if [ "${BUILD_STATUS}" = "FAILURE" ]
		then
			exit 1
		else
			exit 0
		fi
	else

		echo "${ARG} BUILD RESTARTED AT ${START}" >> ${CRON_BLD_TIME_FILE}
		echo "BUILD RESTARTED AT ${START}"
		resolvebuild_type
                if [ ${GROUP_ID} -ne 30 ]; then
                    sed -i "s@http://build/@https://build.zohocorp.com/@g" ${CONF_FILE}
		    source ${CONF_FILE}
                fi
		setBuildVariables
		set_variables
		if [ "${BUILD_RETRY}" = "SOURCE" ]
		then
			if [ -f "${WORK_DIR}/${PRODUCT_NAME}_${BUILD_ID}_retry.txt" ]
			then
				source ${WORK_DIR}/${PRODUCT_NAME}_${BUILD_ID}_retry.txt
			fi
			TIP_CSET_RETRY=$(getTipChangeSetOnRetry)
			echo "${TIP_CSET_RETRY}"
			if [ ${TIP_CSET_RETRY} != "" -a ${TIP_CSET_RETRY} != "NA" ]
			then
				if [ "${TIP_CHANGESET}" != "${TIP_CSET_RETRY}" ]
				then
					getModifiedFilesOnRetry ${TIP_CSET_RETRY}
					resolvTipChangesetOnRetry ${TIP_CSET_RETRY}
					source_checkout
				else
					echo "[BUILD RETRY INFO] ========== WARNING ON BUILD RETRY WITH LATEST SRC ============"
					echo "[BUILD RETRY INFO] There is no new commit found after ${TIP_CHANGESET} in ${ARG} so build continue to retry without src update .."
					echo "[BUILD RETRY INFO] =============================================================="
				fi
			fi
		else
			echo "[BUILD RETRY INFO] Build retry started with existing source .."
		fi
		dobuild
		END=`date +%b_%d_%Y@%T`
		echo "BUILD COMPLETED AT ${END}"
		time_cal ${ARG}_BUILD ${START} ${END}
		echo "POST BUILD FUNCTION IS STARTED........." >> ${STATUS_LOG}
		postbuild
		if [ "${BUILD_STATUS}" == "FAILURE" ]
		then
			exit 1
		else
			exit 0
		fi
        fi
}
prebuild()
{
	resolvebuild_type
	set_variables
	CSTART=`date +%b_%d_%Y@%T`
	echo "PRODUCT SOURCE CHECKOUT IS STARTED............." >> ${STATUS_LOG}
	source_checkout
	buildSubModules
	preBuildTeamSpecificFunction
	CEND=`date +%b_%d_%Y@%T`
	time_cal "Source_Checkout" ${CSTART} ${CEND}
}
dobuild()
{
	echo "PATHARG"
	echo $PATH
	echo "PATHARG"
	callant
}
set_variables()
{
	getBuildNumber
	ModifyBuildNumber
	resolveTeamSpecificInfo
	resolveWebHost
	resolveVariables
	resolveBuildDloadDir
	resolveErrorLogsDir
	resolveTarget
	setBuildLabel
	changeSelectedDependency
	SUCCESS_SUBJECT="${LABEL} ${ARG} build available"
	ERROR_SUBJECT="Error in ${LABEL_VAR}_${ERR_DL_DIR} ${ARG} Build"
        if [ -z "${BUILD_RETRY}" ]
        then
        	if [ "${DEP_BUILDS}" != "NA" ]
        	then
			echo "resolveBuildDependency started at : `date +%b_%d_%Y@%T`"
                	resolveBuildDependency >> ${LOGS_DIR}/resolveBuildDependency.log 2>&1
	                echo "resolveBuildDependency ended at : `date +%b_%d_%Y@%T`"
        	fi
		getBuildoptions
	fi
	echo "========= ${ARG} ============"
	echo "========= ${BUILD_DIR} =========="
	echo "========= ${DLOAD_DIR} =========="
	echo "========= ${LABEL} =============="
	echo "========= ${BUILD_OPTS} ========="
}
callant()
{
	echo "BUILDING PROJECT IS STARTED........." >> ${STATUS_LOG}
	cd ${BUILD_DIR}
	createBlogFile
	createTeamSpecificBlogFile
	if [ -z ${BUILD_RETRY} ]
	then
		buildDockerFile >> ${LOGS_DIR}/docker.log
	else
		export IMAGE_NAME=$(grep -oP '(?<=IMAGE_NAME=)[^ ]*' ${LOGS_DIR}/docker.log)
	fi
	grep -r "IMAGE CREATION SUCCESS\|USING DEFAULT IMAGE" ${LOGS_DIR}/docker.log
	if [ $? -eq 0 -a -z "${PREBUILDFUNCTION_STATUS}" ]
	then
		buildProject
		echo "${WORK_DIR}" >> ${HOME}/created_dirs.txt
		echo "BUILDING PROJECT IS COMPLETED........." >> ${STATUS_LOG}
		sudo chown -R build.build ${WORK_DIR}/
		sh ${WORK_DIR}/hg_utils/build/rmcntrlm.sh ${BUILD_DIR}/build.log
                cat -v ${BUILD_DIR}/build.log > ${BUILD_DIR}/build_temp.log #To_remove_binary_content_in_build_log_file
                cp -fv ${BUILD_DIR}/build_temp.log ${BUILD_DIR}/build.log
		if [ -s "${BUILD_DIR}/build.log" ]
		then
			FAILED_STATUS=`grep -r "BUILD FAILED" ${BUILD_DIR}/build.log | sed -e 's@[[:space:]]*\$@@g' | sed -e 's@^[[:space:]]*@@g'`
			SUCCESS_STATUS=`grep -o "BUILD SUCCESSFUL" ${BUILD_DIR}/build.log | sed -e 's@[[:space:]]*\$@@g' | sed -e 's@^[[:space:]]*@@g'`
			if [ -n "${SUCCESS_STATUS}" -a "${FAILED_STATUS}" = "" ]
			then
				echo "ANT TASK COMPLETED" >> ${WORK_DIR}/${PRODUCT_NAME}_stop.out
				mkdir -p ${DLOAD_DIR}/${BUILD_DLOAD_DIR}
				export BUILD_STATUS="SUCCESS"
				copyBuildoutput "SUCCESS"
				copyTeamSpecificoutput "SUCCESS"
				writeDownloadPath
				createPatch
				cp -rfv ${HOME}/REPOSITORY/utility_packages/** ${WORK_DIR}
				TEND=`date +%b_%d_%Y@%T`
			else
				export BUILD_STATUS="FAILURE"
				errormail
				writeErrorDirPath
				copyTeamSpecificoutput "FAILURE"
			fi
		else
			export BUILD_STATUS="FAILURE"
			errormail
			writeErrorDirPath
			copyTeamSpecificoutput "FAILURE"
		fi
	else
		export BUILD_STATUS="FAILURE"
		echo "ELSE CASE IS WORKING.."
		sudo chown -R build.build ${WORK_DIR}/
		errormail
		writeErrorDirPath
	fi
}
main $*
