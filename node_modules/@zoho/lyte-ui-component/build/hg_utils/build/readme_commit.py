import os, re, datetime, sys, textwrap

branch = sys.argv[1]
random_dir = sys.argv[2]
if len(sys.argv) == 4:
    old_milestone_url=(sys.argv[3],)
else:
    old_milestone_url=None

saslite_repo_dir = random_dir
saslite_readme_fpath = saslite_repo_dir + os.sep + 'product_package' + os.sep + 'blog' + os.sep + 'readme.txt'
formatted_date = datetime.datetime.today().strftime('%d/%B/%Y')
prod_name = 'SASLITE'
db_host = "cmtools"
db_name = "ConfigTool"
db_user = "guest"
db_pswd = "12*AhyJ#v2"

def commitReadme():
    os.chdir(saslite_repo_dir)
    updateRepository(branch)

    if old_milestone_url == None and branch.endswith('_HOTFIX_BRANCH') == True:
        base_hotfix = branch.split('_HOTFIX')[0]
        rev_det_cmd = "hg log -rtip:"+ base_hotfix + " --exclude 'product_package/blog/readme.txt' --template '{author}^{node|short}\n' -b " + branch

    elif branch == "SASLITE_TESTING_BRANCH":
        rev_det_cmd = "hg log --exclude 'product_package/blog/readme.txt' --template '{author}^{node|short}\n' -b " + branch

    else:
        prev_ml_name = old_milestone_url[0]
        rev_det_cmd = "hg log -rtip:" + prev_ml_name + " --exclude 'product_package/blog/readme.txt' --template '{author}^{node|short}\n' -b " + branch

    revdetinfo = os.popen(rev_det_cmd).read().strip().split('\n')
    s_no = 1
    commitdetinfo = ""
    for i in revdetinfo:
        author = i.split('^')[0]
        revision = i.split('^')[1]
        desc_det_cmd = "hg log --template '{desc}' -r " + revision
        description = os.popen(desc_det_cmd).read()
        input_text = str(s_no) + ". [" + author + "] " + description

        wrapped_text  = []
        for line  in input_text.split('\n\n'):
            text = textwrap.wrap(line, width=70, replace_whitespace=True, fix_sentence_endings=True, subsequent_indent="        ", initial_indent="        ")
            wrapped_text = wrapped_text + [''] + text
        commitdetinfo = commitdetinfo + "\n".join(wrapped_text)

        s_no = s_no + 1
    with open(saslite_readme_fpath, 'r') as relnoteobj:
        relnoteinfo = relnoteobj.readlines()
    patt = re.compile("Build : \w+")
    for line in range(0, len(relnoteinfo)):
        version_match = patt.findall(relnoteinfo[line])
        print "Matched Version ====>"
        print version_match
        if len(version_match) > 0:
            break
    if  branch.endswith('_HOTFIX_BRANCH') == True and old_milestone_url == None:
        major_version = version_match[0].split('_')[0]
        mid_version = version_match[0].split('_')[1] + '_1'
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + '_' + mid_version + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')

    elif branch.endswith('_HOTFIX_BRANCH') == True and old_milestone_url != None:
        major_version = version_match[0].split('_')[0]
        mid_version = version_match[0].split('_')[1]
        minor_version = int(version_match[0].split('_')[2]) + 1
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + '_' + mid_version + '_' + str(minor_version) + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')

    elif branch == "SASLITE_TESTING_BRANCH" and old_milestone_url == None:
        major_version = version_match[0].split('_')[0].split(':')[0]
        minor_version = branch + '_1'
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + ': ' + minor_version + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')
    elif branch == "SASLITE_TESTING_BRANCH" and old_milestone_url != None:
        major_version = version_match[0].split(':')[0] + ':' + version_match[0].split(':')[1][:23]
        minor_version = int(version_match[0].split(':')[1].split('_')[3]) + 1
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + '_' + str(minor_version) + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')

    elif branch == "SASLITE_BUILD_PROCESS_BRANCH" and old_milestone_url == None:
        major_version = version_match[0].split('_')[0].split(':')[0]
        minor_version = branch + '_1'
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + ': ' + minor_version + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')
    elif branch == "SASLITE_BUILD_PROCESS_BRANCH" and old_milestone_url != None:
        major_version = version_match[0].split(':')[0] + ':' + version_match[0].split(':')[1][:29]
        minor_version = int(version_match[0].split(':')[1].split('_')[4]) + 1
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + '_' + str(minor_version) + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')

    else :
        major_version = version_match[0].split('_')[0]
        minor_version = int(version_match[0].split('_')[1]) + 1
        relnoteinfo.insert(2, '* ' + formatted_date + ' -- ' + major_version + '_' + str(minor_version) + '\n------------------------------------------------------------------------------' + commitdetinfo + '\n\n')
    relnoteinfo = "".join(relnoteinfo)
    with open(saslite_readme_fpath, 'w') as relnoteobj:
        relnoteobj.write(relnoteinfo)

    if branch == "SASLITE_TESTING_BRANCH" and old_milestone_url == None:
    
        commit_cmd = 'hg ci -u build -m \"' + str(minor_version) + ' changes updated\"; hg push'
    else:

        commit_cmd = 'hg ci -u build -m \"' + major_version.split(' ')[2] + '_' + str(minor_version) + ' changes updated\"; hg push'
    os.popen(commit_cmd)

def revertReadme(changeset, branch):
    os.chdir(saslite_repo_dir)
    updateRepository(branch)
    repo_desc_cmd = 'hg log -r' + changeset + ' --template "{desc}"'
    description = os.popen(repo_desc_cmd).read()
    if description.find('Removed tag ') > -1:
        cmtools_cur = getMysqlConnection(db_host, db_user, db_pswd, db_name)
        reverted_ml_name = description.split(' ')[2]
        reverted_ml_det = "select location, buildlog_id from build_moved_details where location like '%" + reverted_ml_name + "' limit 1;"
        doQueryExecution(cmtools_cur, reverted_ml_det)
        reverted_ml_result = cmtools_cur.fetchone()
        reverted_ml_loc = reverted_ml_result[0]
        reverted_ml_id = reverted_ml_result[1]
        prev_ml_det = "select SUBSTRING_INDEX(t2.location,'/',-1) as loc from buildlogs as t1, build_moved_details as t2 where t1.id=t2.buildlog_id and t2.location like '%" + str(prod_name) + "%' and t1.checkout_label=SUBSTRING_INDEX(SUBSTRING_INDEX('" + str(reverted_ml_loc) + "','/',2),'/',-1) and t2.buildlog_id < '" + str(reverted_ml_id) + "' order by t2.buildlog_id desc limit 1;"
        doQueryExecution(cmtools_cur, prev_ml_det)
        if old_milestone_url == None:
            prev_ml_name = branch.split('_HOTFIX')[0]

        else:
            prev_ml_name = old_milestone_url[0]
        revert_cmd = 'hg revert -r' + prev_ml_name + ' product_package/blog/readme.txt; hg ci -m \"Removed tag ' + reverted_ml_name + '\"; hg push'
        os.popen(revert_cmd)

def getMysqlConnection(dbhost, dbuser, dbpasswd, dbname):
    getconn = MySQLdb.connect(host=dbhost, user=dbuser, passwd=dbpasswd, db=dbname)
    cur = getconn.cursor()
    return cur
def doQueryExecution(cursor, query):
    execute_qry = cursor.execute(query)
    return execute_qry
def updateRepository(branch):
    os.chdir(saslite_repo_dir)
    repo_upd_cmd = 'hg pull; hg upd -r '+ branch +' -C'
    os.popen(repo_upd_cmd)


commitReadme()
