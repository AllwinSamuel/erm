import java.nio.file.Files

plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.guardsquare:proguard-gradle:7.4.0' 
}

task runProguard(type: JavaExec) {
    main = 'proguard.ProGuard'
    classpath = sourceSets.main.runtimeClasspath

   doFirst {
    def inputPaths = project.hasProperty('inputJars') ? project.property('inputJars') : 'default/inputJars'
    def outputPaths = project.hasProperty('outputJars') ? project.property('outputJars') : 'default/outputJars'
    def javaHomePath = project.hasProperty('JRE_HOME') ? project.property('JRE_HOME') : 'default/JAVA_HOME-path'
    def encodedProguardFilePath = project.hasProperty('proguardFile') ? file(project.proguardFile) : file('default/trimmer.conf')
    def decodedProguardFilePath = file('proguard-rules.pro')
    def injarsList = inputPaths.split(',')*.trim()
    def outjarsList = outputPaths.split(',')*.trim()
    def libraryjars = javaHomePath
    if (outjarsList.isEmpty() || outjarsList[0].isEmpty()) {
        throw new IllegalArgumentException("Outjars path is empty or invalid!")
    }
    if (libraryjars.isEmpty()) {
        throw new IllegalArgumentException("Library jars path is empty or invalid!")
    }
    try {
        byte[] encodedProguardBytes = Files.readAllBytes(encodedProguardFilePath.toPath())
        byte[] decodedProguardBytes = Base64.getDecoder().decode(encodedProguardBytes)
        Files.write(decodedProguardFilePath.toPath(), decodedProguardBytes)
    } catch (IOException e) {
        throw new RuntimeException("Failed to read or write ProGuard files: ${e.message}", e)
    }
    def proguardArgs = []
    injarsList.eachWithIndex { injar, index ->
        if (index < outjarsList.size()) {
            proguardArgs += ["-injars", injar]
            proguardArgs += ["-outjars", outjarsList[index]]
        } else {
            throw new IllegalArgumentException("Mismatch in number of input and output jars!")
        }
    }
    proguardArgs += ["-libraryjars", libraryjars, "@${decodedProguardFilePath}"]
    args = proguardArgs
    println "ProGuard Args: ${proguardArgs}"
}

}
