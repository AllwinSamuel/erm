main()
{
	SetSDVariables $*
	GetSDProductDetails
	CreateSDProductFile
	UploadZip

}
SetSDVariables()
{
	PRODUCT_NAME=$1
        SD_PRODUCT_NAME=$2
        SD_STATIC_ZIP_NEED=$3
        UPL_URL=$4
        LOG_FILE=$5
        BUILD_DIR=$6
	ERROR_NOTIFY_MAIL_ID="karthi@zohocorp.com"
	ERROR_ID=$7	
	SUCCESS_ID=$8	
	CONFIG_DB_MCN="integ-tools"
	CONFIG_DB="ConfigTool"
	DB_USER="cmuser"
	SD_DB_MCN="sdtools"	
	SD_DB="SAS_UPGRADE_WEBHOST"
	BSTAT="Local Grid Upload Successfully"
	CTIME=`date +%F\ %H:%M`
	upl_login="zohoupgrade"
        upl_mc="sdtools"
        upload_dir="/advent3/zoho_upgrade/local"
        upload_script="/advent3/zoho_upgrade/zohoupgrade_bws/cron_sasupgrade.sh"
}
GetSDProductDetails()
{
	SUB_PRODUCT_NAME=`mysql -h ${CONFIG_DB_MCN} -u ${DB_USER} ${CONFIG_DB} -e "select subprdname from productdetails where productname='$PRODUCT_NAME' ;" | awk '{if (FNR >1){print $0}}'`
	SD_PRODUCT_ID=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select PRODUCT_BUILD_ID from WH_BUILD_INFO where PRODUCT_BUILD_NAME='$PRODUCT_NAME' or PRODUCT_BUILD_NAME='$SUB_PRODUCT_NAME' limit 1;" | awk '{if (FNR >1){print $0}}'`
	
	if [ "${SD_PRODUCT_NAME}" != "NA" ]
	then
		SD_PRODUCT_ID=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select PRODUCT_BUILD_ID from WH_BUILD_INFO where PRODUCT_BUILD_NAME='$SD_PRODUCT_NAME' limit 1;" | awk '{if (FNR >1){print $0}}'`
	fi
	
	if [ -z "${SD_PRODUCT_ID}" ]
	then
		sendErrorMail "Unable to get PRODUCT BUILD ID Details for ${PRODUCT_NAME}" "Unable to get PRODUCT BUILD ID Details for ${PRODUCT_NAME}.Hence Quitting the build."
	fi
	
	SD_PRODUCT_NAME=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select PRODUCT_BUILD_NAME from WH_BUILD_INFO where PRODUCT_BUILD_ID='$SD_PRODUCT_ID' limit 1;" | awk '{if (FNR >1){print $0}}'`	
	
	SD_PRODUCT_ZIP_NAME=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select PRODUCT_ZIP_NAME from WH_BUILD_INFO where PRODUCT_BUILD_NAME='${SD_PRODUCT_NAME}' limit 1;" | awk '{if (FNR >1){print $0}}'`	

	SD_VALUES=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select APP_SERVER_IPS,MASTER_SERVER_IPS,SLAVE_SERVER_IPS,SERVERS_LOGIN,STATIC_SERVER_LOGIN,SERVERS_PASS,STATIC_SERVER_PASS from  WH_BUILD_SERVER_DETAILS where PRODUCT_BUILD_ID ='${SD_PRODUCT_ID}' and BUILD_TYPE='local'" | awk '{if(FNR >1){print $0}}' | tr "\t" "@"`
	STATIC_IPS=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select OLD_STATIC_SERVER_IPS,NEW_STATIC_SERVER_IPS from WH_BUILD_STATICIPS where BUILD_TYPE='local' order by LAST_CHANGED_DATE desc limit 1;" | awk '{if(FNR>1){print $1,$2}}'`
	
	STATIC_EXTRACTDIR=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select STATIC_SERVER_EXTRACTDIR from WH_BUILD_STATICZIP where PRODUCT_BUILD_ID = '${SD_PRODUCT_ID}' and BUILD_TYPE = 'local'" | awk '{if (FNR >1){print $0}}'`
	
	SDLOGIN_DETAILS=`mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "select LOGIN_DETAILS from WH_BUILD_LOG  where PRODUCT_BUILD_ID = '${SD_PRODUCT_ID}' and BUILD_STATUS like '%Successfully%' and BUILD_TYPE='local' order by DAILY_BUILD_ID desc limit 1" | awk '{if (FNR >1){print $0}}'`
	
	APP_SERVER_IPS=`echo $SD_VALUES | cut -d "@" -f1`	
	MASTER_SERVER_IPS=`echo $SD_VALUES | cut -d "@" -f2`	
	SLAVE_SERVER_IPS=`echo $SD_VALUES | cut -d "@" -f3`
	SERVERS_LOGIN=`echo $SD_VALUES | cut -d "@" -f4`
	STATIC_SERVER_LOGIN=`echo $SD_VALUES | cut -d "@" -f5`	
	SERVERS_PASSWORD=`echo $SD_VALUES | cut -d "@" -f6`
	STATIC_SERVER_PASSWORD=`echo $SD_VALUES | cut -d "@" -f7`
	
	VariablesList="MASTER_SERVER_IPS,SLAVE_SERVER_IPS,SERVERS_LOGIN,SERVERS_PASSWORD"
	if [ "${SD_STATIC_ZIP_NEED}" = "yes" ]
        then
		VariablesList="MASTER_SERVER_IPS,SLAVE_SERVER_IPS,SERVERS_LOGIN,SERVERS_PASSWORD,STATIC_IPS,STATIC_EXTRACTDIR"
        fi
	UPLOAD_URL=${UPL_URL}/${SD_PRODUCT_ZIP_NAME}	
	checkEmpty ${VariablesList}	
}
checkEmpty()
{
      local checkList=$1
      echo "Empty Check started for ${checkList} values..."
      for i in `echo ${checkList} | tr "," " "`
      do
		eval value=\$$i
                if [ "${value}" = "" ]
                then
                     echo "${i} value is empty.. ${i} value should not be empty.."
                     echo "Hence quitting the build.."
                     sendErrorMail  "${i} value should not be empty" "${i} value is empty.. ${i} value should not be empty... Hence exiting the build....."
                else
                     echo "Empty check successfully completed for ${i} "
                fi
      done	
      echo "Empty Check ended for ${checkList} values..."

}
CreateSDProductFile()
{
	SD_FILE_NAME=${BUILD_DIR}/${SD_PRODUCT_NAME}.txt
	echo "PRODUCT_NAME=${SD_PRODUCT_NAME}" > ${SD_FILE_NAME}	
	echo "BUILD_TYPE=local"	>> ${SD_FILE_NAME}
	echo "UPLOAD_URL=${UPLOAD_URL}" >> ${SD_FILE_NAME}
	echo "SUCCESS_ID=${SUCCESS_ID}"	>> ${SD_FILE_NAME}
	echo "ERROR_ID=${ERROR_ID}" >> ${SD_FILE_NAME}
	echo "BUILD_BY=${BUILD_BY}" >> ${SD_FILE_NAME}
	echo "BUILD_COMMENT=${BUILD_COMMENT}" >> ${SD_FILE_NAME}
	echo "BUILD_PROCESS=start" >> ${SD_FILE_NAME}
	echo "STATIC_ZIP_NEED=${SD_STATIC_ZIP_NEED}" >> ${SD_FILE_NAME}	
	echo "DYNAMIC_SERVER_NEED=no" >> ${SD_FILE_NAME}
	echo "APP_SERVER_IPS=${APP_SERVER_IPS}" >> ${SD_FILE_NAME}	
	echo "APP_SERVER_LOGIN=sas" >> ${SD_FILE_NAME}	
	echo "MASTER_SERVER_IPS=${MASTER_SERVER_IPS}" >> ${SD_FILE_NAME}	
	echo "SLAVE_SERVER_IPS=${SLAVE_SERVER_IPS}" >> ${SD_FILE_NAME}	
	echo "SERVERS_LOGIN=${SERVERS_LOGIN}" >> ${SD_FILE_NAME}	
	echo "SERVERS_PASSWORD=${SERVERS_PASSWORD}" >> ${SD_FILE_NAME}	
	echo "STATIC_SERVER_LOGIN=${STATIC_SERVER_LOGIN}" >> ${SD_FILE_NAME}	
	echo "STATIC_SERVER_PASSWORD=${STATIC_SERVER_PASSWORD}" >> ${SD_FILE_NAME}	
	echo "STATIC_IPS=${STATIC_IPS}" >> ${SD_FILE_NAME}	
	echo "STATIC_EXTRACTDIR=${STATIC_EXTRACTDIR}" >> ${SD_FILE_NAME}	
}

UploadZip()
{
        
        sed -i "s@UPLOAD_URL=.*@UPLOAD_URL=${UPLOAD_URL}@g" $SD_FILE_NAME
        sed -i "s@BUILD_PROCESS=.*@BUILD_PROCESS=start@g" $SD_FILE_NAME
        rcp $SD_FILE_NAME ${upl_login}@${upl_mc}:${upload_dir}
        rsh -l ${upl_login} ${upl_mc} "sh $upload_script ${SD_PRODUCT_NAME} local; echo $?"
        
	if [ $? -eq 0 ]
        then
	        sed -i "s@BUILD_PROCESS=.*@BUILD_PROCESS=continue@g" $SD_FILE_NAME
        	rcp $SD_FILE_NAME ${upl_login}@${upl_mc}:${upload_dir}
	        rsh -l ${upl_login} ${upl_mc} "sh $upload_script ${SD_PRODUCT_NAME} local; echo $?"
		if [ $? -eq 0 ]
		then
			mysql -h ${SD_DB_MCN} -u ${DB_USER} ${SD_DB} -e "insert into WH_BUILD_LOG values ('${SD_PRODUCT_ID}','','${BUILD_BY}','${upl_mc}','${UPLOAD_URL}','local','${BSTAT}','${CTIME}','','${BUILD_COMMENT}', '${SDLOGIN_DETAILS}')"
		fi
        fi

}
sendErrorMail()
{
   local ERR_SUBJECT=$1
   local ERR_CONTENT=$2

         mail -s "${ERR_SUBJECT}" "${ERROR_ID},${ERROR_NOTIFY_MAIL_ID}"<<-EOF

   Dear Team,

             ${ERR_CONTENT}

   Kindly get back to us for further support in this regard.
   Thanks & Regards,
   Integration Team
EOF
   exit 1
}
main $* > ${5} 2>&1
