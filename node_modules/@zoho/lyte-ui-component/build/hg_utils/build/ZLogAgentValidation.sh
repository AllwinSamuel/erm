main()
{
	setVariables $*
	downloadNdExtractZLogs
	findNdConstructJson
	invokeZLogsClass
}

setVariables()
{
	[ "$2" ] || { echo "Usage : sh <PATH OF ZLogAgentValidation.sh> <ZOHOLOGSERVER_URL> <BUILD_DIRECTORY>" ; exit 1 ; }
	workDir=`pwd`
	zLogsAgentValidationDirectory="$workDir/ZLogsAgentValidation/"
	zLogsAgentValidationLogs="$zLogsAgentValidationDirectory/zlogsagentvalidation.log"

	rm -rf $zLogsAgentValidationDirectory
	if [ ! -z $1 ]
	then
		zohoLogServerURL=$1
		outputDir="`pwd`/$2/output"
		logagentJarPath="logclient/lib/logagent.jar"
		configurationFile="logclient/conf/logsConfigurationFilesForValidation.txt"
	else
		echo "ZohoLogServer URL is empty. Hence quiting the ZohoLogServer Agent validation process." >> $zLogsAgentValidationLogs
		exit 0
	fi
}

downloadNdExtractZLogs()
{
	mkdir $zLogsAgentValidationDirectory -p
	cd $zLogsAgentValidationDirectory

	binaryName=`basename $zohoLogServerURL`
	echo "ZohoLogserver Url ( $zohoLogServerURL ) download started" >> $zLogsAgentValidationLogs
	wget $zohoLogServerURL
	checkStatus $?
	echo "ZohoLogserver Url download ended" >> $zLogsAgentValidationLogs

	echo "$binaryName extraction started" >> $zLogsAgentValidationLogs
	unzip -j $binaryName $logagentJarPath
	checkStatus $?
	echo "$binaryName extraction ended" >> $zLogsAgentValidationLogs

	echo "$configurationFile extraction started" >> $zLogsAgentValidationLogs
	unzip -j $binaryName $configurationFile
	checkStatus $?
	echo "$configurationFile extraction ended" >> $zLogsAgentValidationLogs

	cd -
}

findNdConstructJson()
{
	configFlName=`basename $configurationFile`
	#filesList=`cat $zLogsAgentValidationDirectory/$configFlName | tr '\n' '\|'`
	#echo $filesList

	cd $outputDir

	outputJson="{"
	echo "$outputJson" > $zLogsAgentValidationDirectory/matched_files.json
	for binary in `ls *.zip *.war`
	do
		echo "binary : $binary"
		if [ ! -z `echo $binary | grep -iEv "customer_resources|UnitTest|javadocs|javadoc|README|java_jsp|jsp_java|source" | grep -iEv "logs|reports|dll_logs|exe_logs|ResourceMetaData|Speed|Static"` ]
		then
			echo "Inside Zip condition"
			echo "\"$outputDir/$binary\":{" >> $zLogsAgentValidationDirectory/matched_files.json

			#@@Double ForLoop used because of File Based key entries they need as json format...
			for configfile in `cat $zLogsAgentValidationDirectory/$configFlName`
			do
				matchedFlLoc="`unzip -l $outputDir/$binary | grep -iE "($configfile)" | awk -F ' ' '{print $4}' | tr '\n' ','`"
                        	matchedFlLoc="`echo $matchedFlLoc | sed 's/,$//'`"
				echo "\"$configfile\":[\"$matchedFlLoc\"]," >> $zLogsAgentValidationDirectory/matched_files.json
			done
			sed -i '$ s/,$//' $zLogsAgentValidationDirectory/matched_files.json
			echo "}," >> $zLogsAgentValidationDirectory/matched_files.json

			#@@ The commented line used to construct the json format consolidately instead of file based - it is just for an reference.

			#matchedFlLoc="`unzip -l $outputDir/$binary | grep -iE "($filesList)" | awk -F ' ' '{print $4}' | tr '\n' ','`"
			#matchedFlLoc="`echo $matchedFlLoc | sed 's/,$//'`"
			#outputJson="\"$outputDir/$binary\":[\"$matchedFlLoc\"],"
			#echo "$outputJson" >> $zLogsAgentValidationDirectory/matched_files.json
		fi
	done
	outputJson="}"
	sed -i '$ s/,$//' $zLogsAgentValidationDirectory/matched_files.json
	echo "$outputJson" >> $zLogsAgentValidationDirectory/matched_files.json
	
}

invokeZLogsClass()
{
	classpath="$zLogsAgentValidationDirectory/logagent.jar"
	java -cp $classpath com.zoho.logs.logclient.validator.AgentConfigurationValidator $zLogsAgentValidationDirectory/matched_files.json $zLogsAgentValidationDirectory/violation.txt
	checkStatus $?
}

checkStatus()
{
	if [ $1 -ne 0 ]
	then
		echo "There is an issue in downloading the ZohoLogServer build ( $zohoLogServerURL ). Hence quitting the ZohoLogServer Agent validation process." >> $zLogsAgentValidationLogs
		exit 1
	fi
}
main $*
