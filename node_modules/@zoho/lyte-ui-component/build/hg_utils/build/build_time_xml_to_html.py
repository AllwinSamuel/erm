import logging
import traceback
import build_time
import xml.etree.ElementTree as ET
from datetime import datetime
from collections import OrderedDict


def get_total_time(lists):
    to_time = str(0.0)
    for n in lists:
        if not n.__contains__("."):
            n += ".0"
        if not to_time.__contains__("."):
            to_time += ".0"
        to_time = (datetime.strptime(to_time, time_format[to_time.count(":")]) - datetime(1900, 1, 1)) + (datetime.strptime(n, time_format[n.count(":")]) - datetime(1900, 1, 1))
        to_time = str(to_time)
    if to_time.startswith("0:"):
        to_time = to_time[2:]
    elif to_time.startswith("0:0"):
        to_time = to_time[3:]
    elif to_time.startswith("0:00:0"):
        to_time = to_time[6:]
    if to_time.endswith("000"):
        to_time = to_time[:-3]
    return to_time


def contextpk_order(table_name, tasks, parallelhtml):
    global task_dict, parallel_orders, prev_task_dict, prev_task_list, prev_parallel_orders
    parallelhtml += "<table id='" + table_name + "' align='right' style='border: 1px solid #ddd; margin-right: 0.5px; margin-bottom: 20px;background-color: transparent; " \
                                                 "border-spacing: 0;border-collapse: collapse;width:65%;margin-right:5px;'> "
    contextpk_html = ""
    parallelhtml_pkg = ""
    headers = ["OrderName", "Task", "Task-Name", "TimeTaken"]
    for th in headers:
        parallelhtml += td_format + "bgcolor= 'DCDCDC'><b>" + th + "</b></td>"
    global task_list
    current_order_name = ""
    for order in task_list[:]:
        for sub_task in tasks:
            if sub_task.tag == "subtask" and sub_task.attrib["name"] not in contextpk_list:
                contextpk_list.append(sub_task.attrib["name"])
                temp_html = parallelhtml

                if len(prev_parallel_orders) == 0:
                    prev_task_dict.append(task_dict.copy())
                    prev_task_list.append(task_list[:])
                    prev_parallel_orders.append(parallel_orders[:])
                sub_task_time_fnc(sub_task)
                contextpk_html = contextpk_order(sub_task.attrib["name"].split(":")[1], sub_task, contextpk_html)
                max_time, task = build_time.max_time_fnc(task_dict)
                parallelhtml = temp_html
                parallel_orders = prev_parallel_orders.pop()
                task_list = prev_task_list.pop()
                parallelhtml_pkg += "<tr>" + td_format + "onclick='javascript:this.style.background = \"#e1eff7 \";'  rowspan=" + str(
                    len(task_dict) + 2) + ">" + "contextpkgpara:" + "<a href=#" + sub_task.attrib["name"].split(":")[
                                        1] + ">" + sub_task.attrib["name"].split(":")[1] + "</a><br>(Parallel)</td></tr>"
                for sub_orders in task_dict.items():
                    parallelhtml_pkg += "<tr>" + td_format + " onclick='javascript:this.style.background = \"#e1eff7 \";' colspan=2 ><a href=#" + \
                                        sub_orders[0] + ">" + sub_orders[0] + "</a></td>"
                    parallelhtml_pkg += td_format + " >" + sub_orders[1] + "sec</td></tr>"
                parallelhtml_pkg += "<tr>" + td_format + " colspan=3 align=right >Total Time is <b>" + max_time + "sec</b></td>"
                task_dict = prev_task_dict.pop()

            elif sub_task.attrib["ordername"] == order:
                if current_order_name != sub_task.attrib["ordername"]:
                    current_order_name = sub_task.attrib["ordername"]
                    parallelhtml += "<tbody id='" + sub_task.attrib["ordername"] + "'><tr>" + td_format + "  rowspan=" + str(parallel_orders.count(order) + 2) + "><a name=" + sub_task.attrib["ordername"] + ">" + sub_task.attrib["ordername"] + "</a></td>"
                parallelhtml = row_creation(parallelhtml, sub_task)
        parallelhtml += "<tr>" + td_format + " colspan=3  >Total Time is <b>" + task_dict[order] + " sec </b></td></tr></tbody>"
    parallelhtml += parallelhtml_pkg + "</table>"
    return parallelhtml + contextpk_html


def sub_task_time_fnc(sub_root):
    global task_dict, name, time
    del task_list[:]
    task_dict = {}
    del parallel_orders[:]
    for value in sub_root:
        if value.tag != "subtask":
            name = value.attrib["ordername"]
            time = value.attrib["timetaken"][:-3]

            if name not in task_list:
                parallel_orders.append(name)
                task_list.append(name)
                task_dict[name] = time

            else:
                if not time.__contains__("."):
                    time += ".0"
                if not task_dict[name].__contains__("."):
                    task_dict[name] += ".0"
                parallel_orders.append(name)
                time_to_add = datetime.strptime(time, time_format[time.count(":")]) - datetime(1900, 1, 1)
                total_time = str(time_to_add + (datetime.strptime(task_dict[name], time_format[task_dict[name].count(":")]) - datetime(1900, 1, 1)))
                if total_time.__contains__("."):
                    total_time = total_time[:-3]
                    op_time = total_time
                else:
                    total_time += ".000"
                    op_time = total_time
                if total_time.startswith("0:0"):
                    op_time = total_time[3:]
                elif total_time.startswith("0:00:0"):
                    op_time = total_time[6:]
                task_dict[name] = op_time


def target_count_fnc(roots):
    func_target_count = 0
    sub_task_count = 0
    sub_task_list1 = []
    sub_task_list2 = []
    for target_root in roots:
        if len(target_root) > 1:
            del task_list[:]
            sub_task_count += 1
            for sub_tasks in target_root:
                if sub_tasks.tag != "subtask":
                    if sub_tasks.attrib["ordername"] not in sub_task_list1:
                        sub_task_list1.append(sub_tasks.attrib["ordername"])
                else:
                    for sub_task in sub_tasks:
                        if sub_task.attrib["ordername"] not in sub_task_list2:
                            sub_task_list2.append(sub_task.attrib["ordername"])
            func_target_count += len(sub_task_list1) + 1 + len(sub_task_list2)
        else:
            func_target_count += 1
    return func_target_count+sub_task_count


def row_creation(html_data, task_name):
    tr = "<tr>"
    if task_name.attrib["name"]+"/"+task_name.attrib["variable"] in max_time_tasks:
        tr = "<tr bgcolor='#ffcccb'>"
    html_data += tr + td_format + " >" + task_name.attrib["name"] + "</td>" + td_format + " onclick='javascript:this.style.background = \"#e1eff7 \";' ><a href='" + task_name.attrib["filename"] + "' target='_blank'>" + task_name.attrib["variable"] + "</a></td>" + td_format + " class='timetaken' >" + task_name.attrib["timetaken"] + "</td></tr>"
    return html_data


parallel_orders = []
orders_time_list = OrderedDict()
time_format = ['%S.%f', '%M:%S.%f', '%H:%M:%S.%f']
max_order_tasks = []
task_list = []
task_dict = {}
max_time_tasks = []
parallel_html = ""
contextpk_list = []
time_based_order = {}
prev_task_dict, prev_task_list, prev_parallel_orders = [], [], []
td_format = "<td align=center style='border: 1px solid #ddd; padding: 7px; line-height: 1.42857143; box-sizing: " \
            "border-box;' "
html = '''<html><head><title>Build Time Report</title><script type="text/javascript" src="https://cm-server.csez.zohocorpin.com/integ_reports/jquery/1.7.2/jquery.min.js"></script>
    <script type="text/javascript">//<![CDATA[
$(document).ready(function() {
  $('a[href*="#"]').click(function() {
    $($(this).attr("href")).css("background-color","#ecf8ff");
  });
$(".expand_btn").bind("click", function(){
    var buttonContent = $.trim($(this).html());
    if(buttonContent == "Expand All")
    {
        $("table tr.extras.hideMe").removeClass("hideMe");
        $(this).html("Collapse All").prop("title","Show only top 5 tasks");
    }
    else
    {
        $("table tr.extras").addClass("hideMe");
        $(this).html("Expand All").prop("title","Show all tasks with time-taken > 1 min");
    }
    });
});//]]></script>
<meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
body {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 20px;
}
table .hideMe{
    display: none;
}
#myBtn {
  display: none;
  position: fixed;
  bottom: 32px;
  left: 10px;
  z-index: 99;
  font-size: 18px;
  border: none;
  outline: none;
  background-color: grey;
  color: white;
  cursor: pointer;
  padding: 10px;
  border-radius: 5px;
}
#myBtn:hover {
  background-color: #DCDCDC;
}
</style>
</head>'''
max_task_table = ''
total_tasks_time = "Nil"
logging.basicConfig(filename="build-time-report.log", filemode='a', format='%(asctime)s - %(message)s', level=logging.INFO)
logging.info(" => Build_time.html creation Started.\n")
try:
    max_task_table += "<table id='TimeConsumingTask' align='right' style='border: 1px solid #ddd; margin-top: 0.8px; margin-bottom: 20px;background-color: transparent; " \
                      "border-spacing: 0;border-collapse: collapse;width:65%;margin-right:5px;'> "
    headers = ["OrderName", "Task", "Task-Name", "TimeTaken"]
    temp_max_task_table = ""
    for th in headers:
        temp_max_task_table += td_format + "bgcolor= '#F5F5F5'><b>" + th + "</b></td>"
    with open("task_time.txt") as f:
        content = f.readlines()
        default_view_val = 0
        for max_task in content:
            max_task = max_task.strip().split(";")
            tt_tr = "<tr>"
            if default_view_val >= 5:
                tt_tr = "<tr class='extras hideMe'>"
            else:
                max_time_tasks.append(max_task[1])
            if max_task[0].__contains__("/"):
                tar_order_name = max_task[0].split("/")
                temp_max_task_table += tt_tr + td_format + ">" + tar_order_name[0] + " &#8658; " + tar_order_name[1] + " &#8658; " + tar_order_name[2] + "<br>(Parallel)</td>" + td_format + ">" + max_task[1].split("/")[0] + "</td>" + "</td>" + td_format + " onclick='javascript:this.style.background = \"#e1eff7 \";' ><a href='" + build_time.get_log_filename(max_task[1].replace("/", "_") + "_") + "' target='_blank'>" + max_task[1].split("/")[1] + "</a></td>" + td_format + ">" + max_task[2] + "</td></tr>"
            else:
                temp_max_task_table += tt_tr + td_format + ">" + max_task[0] + "</td>" + td_format + ">" + max_task[1].split("/")[0] + "</td>" + "</td>" + td_format + " onclick='javascript:this.style.background = \"#e1eff7 \";' ><a href='" + build_time.get_log_filename(max_task[1].replace("/", "_") + "_") + "' target='_blank'>" + max_task[1].split("/")[1] + "</a></td>" + td_format + ">" + max_task[2] + "</td></tr>"
            default_view_val += 1
        max_task_table += "<tr>" + td_format + "bgcolor= 'DCDCDC' colspan=4><b>Top Time Consuming Tasks "
        if default_view_val > 5:
            max_task_table += "<span style='float: right; '><button class='expand_btn' title='Show tasks with time-taken > 1 min'> Expand All </button></span>"
        max_task_table += "</td></tr>" + temp_max_task_table
        max_task_table += "</table>"
    logging.info(" => Time Consuming task table created Successfully.\n")
except Exception as e:
    logging.error("Time Consuming task table creation failed.\n" + "ERROR : " + str(e) + "\nTRACEBACK : " + str(traceback.format_exc()))
    max_task_table = ''

try:
    tree = ET.parse("build_time_new.xml")
    root = tree.getroot()
    html += '''<button onclick="topFunction()" id="myBtn" title="Go to top" >&uarr;<br>Top</button>
<script>
var mybutton = document.getElementById("myBtn");
window.onscroll = function () { scrollFunction() };
function scrollFunction() {
    if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
        mybutton.style.display = "block";
    } else {
        mybutton.style.display = "none";
    }
}
function topFunction() {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
}
function sortTable(e) {
    var table, rows, switching, i, x, y, shouldSwitch;
    table = document.getElementById("OrdersTime");
    switching = true;
    sorting_order = $(e).attr("sort");
    while (switching) {
        switching = false;
        rows = table.rows;
        for (i = 2; i < (rows.length - 1); i++) {
            shouldSwitch = false;
            x = rows[i].id;
            y = rows[i + 1].id;
            if (sorting_order == "Sorted by Desc") {
                if (Number(x) > Number(y)) {
                    shouldSwitch = true;
                    break;
                }
                $(e).attr("sort", "Sorted by Asc");
            }
            if (sorting_order != "" && sorting_order == "Sorted by Asc") {
                if (Number(x) < Number(y)) {
                    shouldSwitch = true;
                    break;
                }
                $(e).attr("sort", "Sorted by Desc");
            }
        }
        if (shouldSwitch) {
            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
        }
    }
}
</script>
<link href="https://cm-server.csez.zohocorpin.com/integ_reports/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"/><div class="panel panel-default"><div class="panel-heading"><div class="row"><div class="col-xs-4 text-left"></div><div class="col-xs-4 text-center"><h4>Total Build Time ''' + ": <b>" + str(*root.attrib.values()) + '''</b></h4></div><div class="col-xs-4 text-right"></div></div></div></div>'''
    current_order_name = ""
    if max_task_table != '':
        html += max_task_table
    main_html = "<table id='BuildTime' align='right' style='border: 1px solid #ddd; margin-right: 0.5px;margin-bottom: 20px;background-color: transparent; " \
                "border-spacing: 0;border-collapse: collapse;width:65%;margin-right:5px;'> "
    headers = ["OrderName", "Task", "Task-Name", "TimeTaken"]
    main_html += "<tr>" + td_format + "bgcolor= 'DCDCDC' colspan=6><b>Individual Task Time Irrespective Of Order</b></td></tr>"
    for th in headers:
        main_html += td_format + "bgcolor= '#F5F5F5'><b>" + th + "</b></td>"
    for tag in root:
        if len(tag) > 0:
            target_count = target_count_fnc(tag)
            main_html += "<tbody id='"+tag.attrib["name"]+"'><tr >" + td_format + " rowspan=" + str(target_count + 2) + ">" + (
                tag.attrib["name"]) + "</td></tr>"

            for tasks in tag:
                if tasks.tag == "subtask":
                    sub_task_time_fnc(tasks)
                    parallel_html = contextpk_order(tasks.attrib["name"].split(":")[1], tasks, parallel_html)
                    main_html += td_format + " onclick='javascript:this.style.background = \"#e1eff7 \";'   rowspan=" + str(
                        len(task_dict) + 2) + ">" + "contextpkgpara:" + "<a href=#" + tasks.attrib["name"].split(":")[1] + ">" + tasks.attrib["name"].split(":")[1] + "</a><br>(Parallel)</td></tr>"
                    max_time, task = build_time.max_time_fnc(task_dict)
                    for sub_orders in task_dict.items():
                        main_html += "<tr>" + td_format + " onclick='javascript:this.style.background = \"#e1eff7 \";' ><a href=#" + \
                                sub_orders[0] + ">" + sub_orders[0] + "</a></td>"
                        main_html += td_format + " >" + sub_orders[1] + "sec</td></tr>"
                    main_html += "<tr>" + td_format + " colspan=2 align=right >Total Time is <b>" + max_time + "sec</b></td></tr>"

                else:
                    if current_order_name != tasks.attrib["ordername"]:
                        current_order_name = tasks.attrib["ordername"]
                    main_html = row_creation(main_html, tasks)
            current_order_name = ""
            orders_time_list[tag.attrib["name"]] = tag.attrib["timetaken"]
            main_html += "<tr>" + td_format + " colspan=3  >Total Time is <b>" + tag.attrib[
                "timetaken"] + "</b></td></tr></tbody>"
    order_table = "<table id='OrdersTime' align='left' style='border: 1px solid #ddd; margin-top: 2px ;background-color: transparent; " \
                  "border-spacing: 0;border-collapse: collapse;width:34%;margin-left:5px;'> "
    order_table += "<tr>" + td_format + "bgcolor= 'DCDCDC' colspan=2>" + "<b>Consolidate Tasks Time of Target Orders </b><span style='float: right; '><button class='sort_btn' onclick='sortTable(this)' sort='Sorted by Desc' title='Sorting by order time'> Sort </button></span></td></tr>"
    headers = ["OrderName", "TimeTaken"]
    for th in headers:
        order_table += td_format + "bgcolor= 'F5F5F5'><b>" + th + "</b></td>"
    temp_dict = orders_time_list.copy()
    if len(orders_time_list) > 5:     # No of tasks to be highlighted in Consolidate Tasks Time of Target Orders table.
        no_of_task_to_highlight = 3
    else:
        no_of_task_to_highlight = 1
    order_count = 1
    for order_counts in range(len(orders_time_list)):
        ordermaxtime, order_key = build_time.max_time_fnc(temp_dict)
        temp_dict.pop(order_key)
        if order_count <= no_of_task_to_highlight:
            max_order_tasks.append(order_key)
        time_based_order[order_key] = order_count
        order_count += 1
    for key, value in orders_time_list.items():
        if key in max_order_tasks:
            tr = "<tr bgcolor='#ffcccb' "
        else:
            tr = "<tr "
        order_table += tr + "id='" + str(time_based_order[key]) + "'>" + td_format + "><a href=#" + key + ">" + key + "</a></td>" + td_format + ">" + value + "</td></tr>"
    html += order_table + "</table>" + main_html + "</table>"
    html += parallel_html + "<footer style='text-align: center; background-color: #F5F5F5; color: black;position:fixed;bottom:0;right:0;left:0'><p>For support/clarification, Contact : <a href='https://cliq.zoho.com/channels/integrationteama' target='_blank'>Integration-Channel</a></p></footer></html>"
    logging.info(" => Build_time.html is created successfully .\n")
    with open("buildtime.html", "w") as f:
        f.write(html)
        f.close()
except Exception as e:
    logging.error("Error while creating Build_time.html\n" + "ERROR : " + str(e) + "\nTRACEBACK : " + str(traceback.format_exc()))
