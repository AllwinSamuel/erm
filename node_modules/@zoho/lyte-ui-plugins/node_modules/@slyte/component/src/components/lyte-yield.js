import { _LC, defProp } from "@slyte/component";

class LyteYield extends HTMLElement{
    connectedCallback() {
        this._callee = this._callee || _LC.getCallee(this.parentNode, this);
        let registry,shadowObj,directiveObj;
        if(this._callee){
            registry = this._callee.$component;
           if(registry){
            shadowObj = registry._shadow;
            directiveObj = registry._directive;
           }
        }
        if(directiveObj){
            this._transitionAppend = []
        }
        if(shadowObj && this.shadowRoot){
            shadowObj.insertInLessDiv(this._shadowParent,this._lessDiv)
            shadowObj.updateLessDiv(this._lessDiv,this.shadowRoot._compList);
        }
        if(!this._registerYield && this._callee) {
            var yieldName;
            if(this._callee._fR && this._callee._fR._yieldCallee) {
                this._registerYield = {"_callee" : this._callee._fR._yieldCallee.component.$node};
            } else if(this._callee._yields &&  (yieldName=this.attributes["yield-name"]) && (yieldName = yieldName.nodeValue) && this._callee._yields[yieldName]) {
                this._registerYield = {"_callee" : this._callee._yields[yieldName]._callee};
            }
        }
    }
    disconnectedCallback(){
        if(_LC.ignoreDisconnect || this._deleted) {
            return;
        }
        let shadowObj = this._callee.getShadowObj();
        shadowObj && shadowObj.destroyRef(this);
        let registry = this._callee.$component;
        let directiveObj = registry._directive;
        this._deleted = true;
        if(!this._properties) {
            return;
        }
        var nodeContextSwitchArray = [];
        _LC.adCx(this, nodeContextSwitchArray);
        _LC.removeSelectedBindingDeep(this._properties, this.component.data, true);
        let node = this._registerYield;
        if(!node) {
        return;
        }
        var toAppendContextSwitchArray = [];
        //newContext not needed
        var del = "delete";//for ie 11.0
        _LC.adCx(node, toAppendContextSwitchArray);
        for(let key in this._dynamicProperty) {
            if(this._dynamicProperty[key].isActualNode) {
                this._dynamicProperty[key].isActualNode._helperNodes[del](this);
            }else {
                let helperNodes = node._callee.getProperty(key)._helperNodes;
                if(helperNodes) {
                    helperNodes[del](this);
                }
            }
        }
        this._dynamicProperty = {};
        for(let i=0;i<this._helpers.length;i++) {
            node._callee.removeHelpers(this._helpers[i]);
        }
        this._helpers = [];
        _LC.rmCx(node, toAppendContextSwitchArray);
        _LC.rmCx(this, nodeContextSwitchArray);
        directiveObj && directiveObj.destroyPromises(this);
        // var self = this;
        // setTimeout(function() {
        //     self._registerYield = null
        //     self._callee = null;
        // },0);
    }
    getProperty(key) {
            var arr = key.match(/([^[\].]+|\[\])/g);
            let property = this;
            if(!property._properties[arr[0]]) {
                    property._properties[arr[0]] = {};
            } 
            property = property._properties[arr[0]];
        
            defProp(property, '_path', {enumerable: false, value : arr[0]});
            for(let i=1;i<arr.length;i++) {
                if (arr[i].startsWith("'") || arr[i].startsWith('"')) {//added check
                    arr[i] = arr[i].substring(1, arr[i].length -1);
                }
                    if(!property[arr[i]]) {
                        property[arr[i]] = {};
                        defProp(property[arr[i]], '_path', {enumerable: false, value : property._path + "." + arr[i]});
                }
                property = property[arr[i]];
            }
            return property;
        }
}
customElements.define("lyte-yield", LyteYield);
export default LyteYield;