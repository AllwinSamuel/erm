main (){
    . ${1}
    export PRIVATE_TOKEN="${2}"
    export api_prefix="curl -k -s -X "
    git_domain_name="https://git.csez.zohocorpin.com"
    zgit_domain_name="https://zgit.csez.zohocorpin.com"
    zbgit_domain_name="https://zbgit.csez.zohocorpin.com"
    parallelModuleDownloadProcess
    wait
}
parallelModuleDownloadProcess(){
	if [ -n "${TIP_SUB_PRODUCT_DETAILS}" ]; then
        for sub_module_details in `echo ${TIP_SUB_PRODUCT_DETAILS} | tr "," "\n"`; do
            sub_module_name="`echo ${sub_module_details} | cut -d "=" -f1`"
            sub_module_branch="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f1`"
            sub_module_repo_type="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f2`"
            sub_module_repo_url="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f3-4`"
            sub_module_repo_changeset="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f6`"
            sub_module_repo_id="`echo ${sub_module_details} | cut -d "=" -f2 | cut -d ":" -f7`"

            log_message "****************************************************"
            log_message "SubModuleDetails ${sub_module_details}\n"
            log_message "SubModuleName ${sub_module_name}"
            log_message "SubModuleBranch ${sub_module_branch}"
            log_message "SubModuleRepoType ${sub_module_repo_type}"
            log_message "SubModuleRepoURL ${sub_module_repo_url}"
            log_message "SubModuleRepoChangeset ${sub_module_repo_changeset}"
            log_message "SubModuleZrepoID ${sub_module_repo_id}"
            if ! grep -q "cmsuite" <<< "${sub_module_repo_url}"; then
                module_name="`basename ${sub_module_repo_url}`"
                module_name="`echo ${module_name} | sed -e "s@.git@@g"`"
                log_message "Module_name ${module_name}"
                if [ -n "${sub_module_branch}" ]; then
                    DownloadRepository "${sub_module_repo_id}" "${module_name}" "${sub_module_repo_changeset}" "${sub_module_repo_type}" "SUBMODULE" "${sub_module_repo_url}" &
		    SUB_PRODUCTS_NAME=$SUB_PRODUCTS_NAME,${sub_module_name}
                    build_sub_opt="-Dsubproduct_${sub_module_name}_label=${sub_module_repo_changeset}-Dsubproduct_${sub_module_name}_changeset=${sub_module_repo_changeset}"
                    sub_list="${build_sub_opt} ${sub_list}"
                fi
            fi
        done
	export SUB_PRODUCTS="`echo $SUB_PRODUCTS_NAME | sed "s@\,@ @g"`"
        echo "SUB_PRODUCTS=\""`echo $SUB_PRODUCTS_NAME | sed "s@\,@ @g"`"\"" >> ${WORK_DIR}/sub_product_names.txt
    fi
}
DownloadRepository() {
    cd ${WORK_DIR}
    checkout_zrepo_id="${1}"
    checkout_mod_name="${2}"
    clone_arg="${3}"
    REPO_TYPE="${4}"
    default_directory="${PRODUCT_NAME}_DBUILD"
    if [ -n "${5}" -a "${5}" == "SUBMODULE" ]; then
        default_directory="${checkout_mod_name}"
    fi
    if [ -n "${6}" ]; then
        CLONE_VALUE="${6}"
    fi
    get_zrepo_access_token
    log_message "DownloadRepository Method Initiated"
    cloneToBeDone="FALSE"
    if [ -n "${REPO_TYPE}" ]; then
        export clone_prefix="$(getDVCS ${REPO_TYPE})"
        if grep -q "repository.zoho.com" <<< ${CLONE_VALUE}; then
            wget -nv --header="Authorization:Zoho-oauthtoken ${ZREPO_ACCESS_VALUE}" --header="X-ZR-Email: kaleeswaran.n@zohocorp.com" "https://repository.zoho.com/repos/${checkout_zrepo_id}/api/v1/archive/${clone_arg}/${checkout_mod_name}-${clone_arg}.zip" --no-check-certificate --tries=2
        elif grep -q "git.csez.zohocorpin.com" <<< ${CLONE_VALUE}; then
            get_git_namespace ${CLONE_VALUE} ${git_domain_name}
            log_message "Git namespace ${git_modified_namespace}" "INFO"
            wget -nv --header="Authorization:Zoho-oauthtoken ${ZREPO_ACCESS_VALUE}" "https://zbgit.csez.zohocorpin.com/api/v4/projects/${git_modified_namespace}/repository/archive.zip?sha=${clone_arg}.zip&private_token=${GIT_WGET_PRIVATE_TOKEN}" --no-check-certificate --tries=2
        fi
        if [ -f "${checkout_mod_name}-${clone_arg}.zip" ]; then
            log_message "${checkout_mod_name}-${clone_arg}.zip file downloaded successfully."
            if [[ $(zip -T ${checkout_mod_name}-${clone_arg}.zip | grep "OK") ]]; then
                log_message "Downloaded Binary ${checkout_mod_name}-${clone_arg}.zip is extractable. Source Extraction has started."
                unzip -oq ${checkout_mod_name}-${clone_arg}.zip
		mv ${checkout_mod_name}-${clone_arg} ${checkout_mod_name}
                log_message "Source Extraction has successfully done."
            else
                cloneToBeDone="TRUE"
            fi
        else
            cloneToBeDone="TRUE"
        fi
        if [ "${cloneToBeDone}" == "TRUE" ]; then
            prepareRepoCloneCommand ${REPO_TYPE} ${CLONE_VALUE}
        fi
    else
        log_message "REPO_TYPE (HG/GIT) is not set. Hence, the build terminated" "ERROR"
        exit 1
    fi
    cd -
}
prepareRepoCloneCommand() {
    REPO_TYPE="${1}"
    CLONE_VALUE="${2}"
    repo_clone_command="${clone_prefix} ${clone_option} clone ${CLONE_VALUE} ${checkout_mod_name}-${clone_arg}"
    log_message "RepoCloneCommand ${repo_clone_command}"
    ${repo_clone_command}
    clone_status="$?"
    log_message "RepoClone Status for ${checkout_mod_name} IS :::: ${clone_status}" 
    if [ ${clone_status} -ne 0 ]; then
	    log_message "Issue in repository cloning process for ${checkout_mod_name}." "ERROR"
    fi
}
getDVCS() {
    REPO_TYPE="${1}"
    clone_prefix="$([[ "${REPO_TYPE}" == "HG" ]] && echo "hg" || echo "git")"
    export clone_option="$([[ "${REPO_TYPE}" == "HG" ]] && echo "--config ui.clonebundles=false" || echo " ")"
    echo "${clone_prefix}"
}
log_message() {
    message="${1}"
    LOG_TYPE="INFO"
    if [ -n "${2}" ]; then
        LOG_TYPE="${2}"
    fi
    timestamp="$(date +"%Y-%m-%d %T")"
    echo "${LOG_TYPE} [${timestamp}] :::: ${message}"
}

get_zrepo_access_token() {
    getZrepoAccessTokenFromCMToolsAPI="https://cmtools.csez.zohocorpin.com/api/v1/get_service_access_tokens?service_name=ZCloudRepo"
    log_message "Fetching ZREPO Access Token" "INFO"
    accessToken="$(${api_prefix} GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" ${getZrepoAccessTokenFromCMToolsAPI})"

    #Retrying to fetch the zrepo access token...
    if [ -z "${accessToken}" ]; then
        log_message "Retry to fetch the zrepo access token due to problem at first time." "WARN"
        accessToken="$(${api_prefix} GET -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" ${getZrepoAccessTokenFromCMToolsAPI})"
    fi
    if ! grep -q "DOCTYPE" <<< "${accessToken}"; then
        export global ZREPO_ACCESS_VALUE="`echo ${accessToken} | tr -d '"'`"
    fi
}

get_git_namespace(){
    if [ -n "${1}" ]; then
        log_message "Inside Git NameSpace Changes and Arguments are $*"
        git_namespace="`echo ${1} | sed -e "s@${2}/@@g" -e "s@.git@@g" -e "s@/@%2F@g"`"
        export global git_modified_namespace="${git_namespace}"
    fi
}
main $*
