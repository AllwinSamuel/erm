#! /usr/bin/python

from clonehook import *
import sys, logging

productname = None
checkout_label = None
started_from = None
idc_build_details = None
buildlog_id = None
commtent = None
build_url = None

if len(sys.argv) > 2:
    productname = sys.argv[1]
    if sys.argv[2] == "Move":
        buildlog_id = sys.argv[3]
        comment = sys.argv[4]
    elif sys.argv[2] == "GetDependency":
        build_url = sys.argv[3]
    else:
        checkout_label = sys.argv[2]
        if len(sys.argv) > 3:
            started_from = sys.argv[3]
elif len(sys.argv) == 2:
    productname = sys.argv[1]
    logging.warning("Checkout Label was not available")
else:
    logging.error("python apiwrapper.py <PRODUCT_NAME> [<CHECKOUT_LABEL>]")
    sys.exit(1)

def check_details(details, message, exit=True):
    if not details:
        logging.error(message)

        if exit:
            sys.exit(1)

classObject = updateTime("GET")

if buildlog_id is not None:
    response = classObject.moveBuild(productname, buildlog_id, comment)
    print response
    sys.exit(0)

product_values = classObject.getProductDetails(productname)
exit_msg = "Can't fetch product details for product : "+ productname
check_details(product_values, exit_msg)

product_details = product_values[0]
product_id = product_details['id']
productname = product_details['name']
parallel_status = product_details['is_parallel_enabled']

"""
  Fetching build details
"""

repository_type = classObject.getRepoType(product_details['repository_type_id'])
exit_msg = "Can't get repository type from ConfigTool for repository Id : "+ str(product_details['repository_type_id'])
check_details(repository_type, exit_msg)

group_details = classObject.getGroupDetails(product_details['group_id'])
exit_msg = "Can't get group details from ConfigTool for group Id : "+ str(product_details['group_id'])
check_details(group_details, exit_msg)

build_details = classObject.getBuildDetails(product_id)
exit_msg = "Can't get build details from ConfigTool... Hence Exiting.."
check_details(build_details, exit_msg)

server_details = classObject.getServerDetails(build_details['server_id'])
exit_msg = "Can't get Server details from ConfigTool... Hence Exiting.."
check_details(server_details, exit_msg)

if build_url is not None:
    unavail_download_url = re.search('https://([^/]+)([/]+)([^/]+)([/]+)([^/]+)', build_url).group()
    unavail_dep_loc = build_url.replace(unavail_download_url, '').strip('/')
    dep_prd_id = classObject.getProductIdByDownloadUrl(unavail_download_url)
    if dep_prd_id is not None:
        dep_prd_det = classObject.checkIsDependencyMilestone(dep_prd_id, unavail_dep_loc)
	if dep_prd_det:
            dep_prd_loc = dep_prd_det['location']
            dep_prd_ml_url = dep_prd_det['url']
            dep_prd_ml_loc = dep_prd_ml_url.replace(unavail_download_url, '').strip('/')
            if unavail_dep_loc != dep_prd_ml_loc:
                print unavail_dep_loc, dep_prd_ml_loc
    sys.exit(0)

'''
  Printing all the details
'''

print "PRODUCT_ID=\""+ str(product_id) + "\""
print "PRODUCT_KNOWN_AS=\""+ str(product_details['known_as']) + "\""
print "PRODUCT_SERVICE_NAME=\""+ str(product_details['service_name']) + "\""
print "PRODUCT_IS_RELEASED=\""+ str(product_details['is_released']).lower() + "\""
print "IS_PARALLEL_ENABLED=\""+ str(parallel_status) + "\""
print "TEAM_EMAIL_ID=\""+ str(product_details['team_email_id']) + "\""
print "GROUP_NAME=\""+ group_details['name'] + "\""
print "GROUP_ID=\""+ str(group_details['id']) + "\""
print "REPOSITORY_TYPE=\""+ repository_type + "\""
print "MODULE_NAME=\""+ product_details['module_name'] + "\""
print "DOWNLOAD_URL=\""+ product_details['download_url'] + "\""
print "CLONE_VALUE=\""+ product_details['repository_url'] + "\""
print "LOGIN_NAME=\""+ build_details['login'] + "\""
print "SERVER_NAME=\""+ server_details['name'] + "\""
print "DLOAD_DIRECTORY=\""+ build_details['download_dir'] + "\""
print "DOWNLOAD_THRESHOLD=\""+ str(build_details['download_threshold']) + "\""
print "USED_DISK_SPACE=\""+ str(build_details['used_disk_space']) + "\""

#product_admins = classObject.getProductUsersStr(product_id, user_type=1)
#print "PRODUCT_ADMINS=\""+ product_admins + "\""

"""
  Fetching previous build details
"""

if checkout_label:
    prev_build_label = ""
    prev_build_url = ""
    prev_build_id = ""
    prev_build_loc = ""
    prev_src_changeset = ""
    prev_tp_changeset = ""
    
    if len(sys.argv) == 5:
        if sys.argv[4]: 
            previousBuildDetails = classObject.getIDCbuildChangeset(sys.argv[4]);
    else:
	previousBuildDetails = classObject.getPreviousBuildDetails(product_id, checkout_label, started_from)

    if previousBuildDetails:
        prev_build_id = previousBuildDetails['id']
        prev_build_label = previousBuildDetails['build_label']
        prev_build_url = previousBuildDetails['url']
        prev_build_loc = previousBuildDetails['location']
        if prev_build_id:
            cs_details = classObject.getBuildChangeset(prev_build_id, product_id=product_id)
            if cs_details:
                if cs_details[0]['changeset']:
    	            prev_src_changeset = cs_details[0]['changeset']
                    if cs_details[0]['tp_changeset']:
                        prev_tp_changeset = cs_details[0]['tp_changeset']

    print "PREV_BUILD_ID=\""+ str(prev_build_id) + "\""
    print "PREV_DBUILD_LBL=\""+ str(prev_build_label) + "\""
    print "PREV_DBUILD_URL=\""+ str(prev_build_url) + "\""
    print "PREV_SRC_CHANGESET=\""+ str(prev_src_changeset) + "\""
    print "PREV_TP_CHANGESET=\""+ str(prev_tp_changeset) + "\""
    print "PREV_BUILD_LOCATION=\""+ str(prev_build_loc) + "\""

else:
        logging.warning("Can't get previous build details")

"""
    Inserting build details before starting build for Daily/cron builds.
"""

if not parallel_status and started_from and started_from.lower() == 'cron':
    if len(sys.argv) < 8:
       print "WH_BUILD_ID=\"\""
    else:
        build_type = sys.argv[4]
        label_type = sys.argv[5]
        customize_info = sys.argv[6]
        static_version = sys.argv[7]
        comment = sys.argv[8]
        data = {'product_id':product_id,'checkout_label': checkout_label, 'started_from': 'Cron', 'started_by_id': 18,
             'status': 'Started', 'report_needed': "true", 'build_type': build_type, 'label_type': label_type,
             'customize_info': customize_info, 'static_version': static_version, 'comment' : comment
             }
        new_build_id = classObject.urlGet('buildlogs', data, 'POST')
        if 'id' in new_build_id:
            print "WH_BUILD_ID=\"" + str(new_build_id['id']) + "\""
        else:
            print "WH_BUILD_ID=\"\""
            print "NEW_BUILD_DETAILS=\"" + str(new_build_id) + "\""
